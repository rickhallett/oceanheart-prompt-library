[
  {
    "title": "marimo islands üèùÔ∏è - marimo",
    "url": "https://docs.marimo.io/guides/island_example.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nmarimo islands üèùÔ∏è\n\nPreview\n\nIslands are an early feature. While the API likely won‚Äôt change, there are some improvements we‚Äôd like to make before we consider them stable. Please let us know on GitHub if you run into any issues or have any feedback!\n\nThis content below is powered by marimo‚Äôs reactive runtime. It will become interactive after initializing the marimo runtime.\n\nHello, islands! üèùÔ∏èüèùÔ∏è\nSee the HTML\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo"
  },
  {
    "title": "API Reference - marimo",
    "url": "https://docs.marimo.io/api/",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nAPI Reference\n\nUse the marimo library in marimo notebooks (import marimo as mo) to\n\nconnect interactive inputs like sliders, dropdowns, and tables to Python,\n\nexpress yourself with dynamically created markdown,\n\nlayout information with tabs or grids,\n\noutput media like images and audio,\n\nand more!\n\n\t\n\n\n\n\nMarkdown\n\n\t\n\nWrite markdown with mo.md\n\n\n\n\nInputs\n\n\t\n\nConnect sliders, dropdowns, tables, and more to Python\n\n\n\n\nLayouts\n\n\t\n\nCustomize outputs with accordions, tabs, stacks, and more\n\n\n\n\nPlotting\n\n\t\n\nOutput interactive plots\n\n\n\n\nMedia\n\n\t\n\nOutput media like images, audio, PDFs, and plain text\n\n\n\n\nDiagrams\n\n\t\n\nFlow charts, graphs, statistic cards, and more\n\n\n\n\nStatus\n\n\t\n\nDisplay progress indicators\n\n\n\n\nOutputs\n\n\t\n\nModify cell outputs, redirect console output\n\n\n\n\nControl flow\n\n\t\n\nControl how cells execute\n\n\n\n\nHTML\n\n\t\n\nManipulate HTML objects\n\n\n\n\nQuery Parameters\n\n\t\n\nAccess and set query parameters with mo.query_params\n\n\n\n\nCommand Line Arguments\n\n\t\n\nAccess command-line arguments with mo.cli_args\n\n\n\n\nState\n\n\t\n\nSynchronize multiple UI elements with mo.state\n\n\n\n\nApp\n\n\t\n\nEmbed notebooks in other notebooks\n\n\n\n\nCell\n\n\t\n\nRun cells defined in another notebook\n\n\n\n\nMiscellaneous\n\n\t\n\nMiscellaneous utilities\n\nNext\nMarkdown\nPrevious\nRecipes\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo"
  },
  {
    "title": "Deploy to our public gallery - marimo",
    "url": "https://docs.marimo.io/guides/deploying/deploying_public_gallery.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nDeploy to our public gallery\n\nIf you would like to deploy your application to our public gallery, please reach out on Discord.\n\nYou can also easily share your notebooks on the public web using WASM notebooks, which run entirely in the browser, no backend required.\n\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo"
  },
  {
    "title": "Deploy to Marimo Cloud - marimo",
    "url": "https://docs.marimo.io/guides/deploying/deploying_marimo_cloud.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nDeploy to Marimo Cloud\n\nTo deploy marimo notebooks and apps to production, with access controls, schedules, and more, you can use Marimo Cloud. Using Marimo Cloud, you can deploy either on our cloud servers or your own (we‚Äôll bring the software).\n\nMarimo Cloud is currently in beta: if you‚Äôd like access, email us at contact@marimo.io or book time on our calendar and we‚Äôll onboard you very quickly.\n\nMarimo Cloud\n\nMarimo Cloud seamlessly augments local development on marimo notebooks with on-demand cloud resources for experimentation, batch processing, sharing, and deployment.\n\nToday, marimo cloud has two main features:\n\ndeploy marimo notebooks as interactive web apps internally or to the public, with access controls;\n\ncollaborate on an unlimited number of WASM-powered marimo notebooks, with mounted storage and GitHub sync.\n\nWe have many more features planned for the near future, and big ideas on how Marimo Cloud can supercharge the entire lifecycle of working with and experimenting on data, from small workloads to very large ones as well.\n\nReach out to us!\n\nIf you‚Äôd like to get onboarded, learn more about our roadmap, or share ideas/feature requests of your own, reach out at contact@marimo.io or book time on our calendar.\n\nFollow along!\n\nTo follow us on our journey:\n\nsign up for the marimo newsletter;\n\nsign up for the cloud waitlist.\n\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nMarimo Cloud\nReach out to us!\nFollow along!"
  },
  {
    "title": "Deploy to Ploomber Cloud - marimo",
    "url": "https://docs.marimo.io/guides/deploying/deploying_ploomber.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nDeploy to Ploomber Cloud\n\nFor production deployments, you can use Ploomber Cloud. It allows you to deploy marimo in a secure and scalable way. See deployment instructions here\n\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo"
  },
  {
    "title": "Authentication - marimo",
    "url": "https://docs.marimo.io/guides/deploying/authentication.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nAuthentication\n\nmarimo provides a simple way to add token/password protection to your marimo server. Given that authentication is a complex topic, marimo does not provide a built-in authentication/authorization system, but instead makes it easy to add your own through ASGI middleware.\n\nEnabling Basic Authentication\n\nAuthentication is enabled by default when running marimo edit/tutorial/new. To disable authentication, you may pass --no-token to your marimo edit/run/new command from the Terminal. The auth token will be randomly generated when in Edit mode and deterministically generated in Run mode (based on the code of the notebook). However, you can also pass your own token/password using the --token-password flag.\n\nmarimo run my_notebook.py --token --token-password=\"sup3rs3cr3t\"\n\nWays to Authenticate\n\nIn order to authenticate, you must either pass the token as a password in the Authorization header, or as a query parameter under access_token in the URL.\n\nEnter the token in the login page:\n\nIf you try to access marimo from a browser, you will be redirected to a login page where you can enter the token.\n\nQuery parameter:\n\nTo authenticate using a query parameter, you must pass the token as a query parameter under access_token in the URL. For example, to authenticate with the token sup3rs3cr3t, you would pass the query parameter http://localhost:2718?access_token=sup3rs3cr3t.\n\nFor convenience, when running locally, marimo will automatically open the URL with the query parameter in your default browser.\n\nBasic Authorization header:\n\nTo authenticate using the Authorization header, you must pass the token as a password in the Authorization header using the Basic authentication scheme. For example, to authenticate with the token sup3rs3cr3t, you would pass the header Authorization Basic base64(\"any_username:sup3rs3cr3t\").\n\nThis is not necessary when using a browser, as the marimo server will redirect you to a minimal login page where you can enter the token.\n\nCustom Authentication\n\nIf you choose to make your marimo application public, you may want to add your own authentication system, along with authorization, rate limiting, etc. You can do this by creating a marimo application programmatically and adding your own middleware to the ASGI application.\n\nHere‚Äôs an example of how you can add authentication to a marimo application using FastAPI:\n\nfrom typing import Annotated, Callable, Coroutine\nfrom fastapi.responses import HTMLResponse, RedirectResponse\nimport marimo\nfrom fastapi import FastAPI, Form, Request, Response\n# Custom auth middleware and login page\nfrom my_auth_module import auth_middleware, my_login_route\n\n\n# Create a marimo asgi app\nserver = (\n    marimo.create_asgi_app()\n    .with_app(path=\"\", root=\"./pages/index.py\")\n    .with_app(path=\"/dashboard\", root=\"./pages/dashboard.py\")\n    .with_app(path=\"/sales\", root=\"./pages/sales.py\")\n)\n\n# Create a FastAPI app\napp = FastAPI()\n\napp.add_middleware(auth_middleware)\napp.add_route(\"/login\", my_login_route, methods=[\"POST\"])\n\napp.mount(\"/\", server.build())\n\n# Run the server\nif __name__ == \"__main__\":\n    import uvicorn\n\n    uvicorn.run(app, host=\"localhost\", port=8000)\n\n\nor for a full example on implementing OAuth2 with FastAPI, see the FastAPI OAuth2 example.\n\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nEnabling Basic Authentication\nWays to Authenticate\nCustom Authentication"
  },
  {
    "title": "Deploy with Docker - marimo",
    "url": "https://docs.marimo.io/guides/deploying/deploying_docker.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nDeploy with Docker\nPrerequisites\n\nA marimo notebook or app: app.py that you want to deploy\n\nA requirements.txt file that contains the dependencies needed for your application to run\n\nCreate a Dockerfile\n\nDockerfile is a text file that contains instructions for building a Docker image. Here‚Äôs an example Dockerfile for a marimo notebook:\n\n# syntax=docker/dockerfile:1.4\n\n# Choose a python version that you know works with your application\nFROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY --link requirements.txt .\n# Install the requirements\nRUN pip install -r requirements.txt\n\n# You may copy more files like csv, images, data\nCOPY --link app.py .\n# COPY . .\n\n\n\nEXPOSE 8080\n\n# Create a non-root user and switch to it\nRUN useradd -m app_user\nUSER app_user\n\nCMD [ \"marimo\", \"run\", \"app.py\", \"--host\", \"0.0.0.0\", \"-p\", \"8080\" ]\n\nBreaking it down\n\nFROM instructs what base image to choose. In our case, we chose Python 3.9 with the ‚Äúslim‚Äù variant. This removes a lot of extra dependencies. You can always add them back as needed.\n\nA slimmer Dockerfile (by bytes) means quick to build, deploy, and start up.\n\nThe WORKDIR sets the current working directory. In most cases, this does not need to be changed.\n\nThe COPY steps will copy all the necessary files into your docker. By adding --link, we end up creating a new layer that does not get invalidated by previous changes. This can be especially important for expensive install steps that do not depend on each other.\n\nRUN lets us run shell commands. We can use this to install dependencies via apt-get, pip, or package managers. In our case, we use it to install our requirements.txt with pip.\n\nOur EXPOSE step tells us which port is exposed to be accessed from outside the Docker container. This will need to match the port at which we run our marimo application on.\n\nWe then create a new user and switch to it with the USER instruction, in order to limit the permissions of the marimo application. This is not required, but recommended.\n\nThe final step CMD instructions what command to run when we run our docker container. Here we run our marimo application at the port 8080.\n\nRunning your application locally\n\nOnce you have your Dockerfile and your application files. You can test it out locally.\n\n# Build your image, and tag it as my_app\ndocker build -t my_app .\n\n# Start your container, and map our port 8080 to our containers 8080\ndocker run -p 8080:8080 -it my_app\n\n# Visit http://localhost:8080\n\n\nAfter you have verified your application runs without errors. You can use these files to deploy your application on your favorite cloud provider that supports deploying dockererized applications.\n\nHealth checks\n\nYou can add a health check to your Dockerfile to ensure that your application is running as expected. This is especially useful when deploying to a cloud provider.\n\nHEALTHCHECK --interval=30s --timeout=3s \\\n  CMD curl -f http://localhost:8080/health || exit 1\n\n\nThe following endpoints may be useful when deploying your application:\n\n/health - A health check endpoint that returns a 200 status code if the application is running as expected\n\n/healthz - Same as above, just a different name for easier integration with cloud providers\n\n/api/status - A status endpoint that returns a JSON object with the status of the server\n\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nPrerequisites\nCreate a Dockerfile\nBreaking it down\nRunning your application locally\nHealth checks"
  },
  {
    "title": "Running the marimo backend programmatically - marimo",
    "url": "https://docs.marimo.io/guides/deploying/programmatically.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nRunning the marimo backend programmatically\n\nmarimo can be run programmatically using the marimo module. This is useful when you want to run marimo as part of a larger application or when you need to customize the behavior of marimo (e.g. middleware, custom error handling, authentication, routing, etc).\n\nFastAPI Example\n\nHere‚Äôs an example of how you can run a marimo application programmatically using FastAPI:\n\nfrom typing import Annotated, Callable, Coroutine\nfrom fastapi.responses import HTMLResponse, RedirectResponse\nimport marimo\nfrom fastapi import FastAPI, Form, Request, Response\n\n\n# Create a marimo asgi app\nserver = (\n    marimo.create_asgi_app()\n    .with_app(path=\"\", root=\"./pages/index.py\")\n    .with_app(path=\"/dashboard\", root=\"./pages/dashboard.py\")\n    .with_app(path=\"/sales\", root=\"./pages/sales.py\")\n)\n\n# Create a FastAPI app\napp = FastAPI()\n\napp.add_middleware(auth_middleware)\napp.add_route(\"/login\", my_login_route, methods=[\"POST\"])\n\napp.mount(\"/\", server.build())\n\n# Run the server\nif __name__ == \"__main__\":\n    import uvicorn\n\n    uvicorn.run(app, host=\"localhost\", port=8000)\n\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nFastAPI Example"
  },
  {
    "title": "Deploy to Railway - marimo",
    "url": "https://docs.marimo.io/guides/deploying/deploying_railway.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nDeploy to Railway\n\nRailway is a platform that allows you to deploy Dockerize containers easily. Using this pre-built template, Railway will deploy a single-instance marimo edit server with persistent storage in a few clicks.\n\nDeploy\n\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nDeploy"
  },
  {
    "title": "Navigation Menu - marimo",
    "url": "https://docs.marimo.io/api/inputs/nav_menu.html#marimo.nav_menu",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nNavigation Menu\nmarimo.nav_menu(menu: dict[str, typing.Union[typing.Mapping[str, typing.Union[typing.Mapping[str, ForwardRef('JSONType')], typing.Sequence[ForwardRef('JSONType')], str, int, float, bool, marimo._output.mime.MIME, NoneType]], typing.Sequence[typing.Union[typing.Mapping[str, ForwardRef('JSONType')], typing.Sequence[ForwardRef('JSONType')], str, int, float, bool, marimo._output.mime.MIME, NoneType]], str, int, float, bool, marimo._output.mime.MIME, NoneType]], *, orientation: Literal['horizontal', 'vertical'] = 'horizontal') ‚Üí Html\n\nNavigation menu component.\n\nThis is useful for creating a navigation menu with hyperlinks, most used when creating multi-page applications, with marimo.create_asgi_app (docs).\n\nExamples.\n\nnav_menu = mo.nav_menu(\n    {\n        \"/overview\": \"Overview\",\n        \"/sales\": f\"{mo.icon('lucide:shopping-cart')} Sales\",\n        \"/products\": f\"{mo.icon('lucide:package')} Products\",\n    }\n)\n\nYou can also nest dictionaries to create submenus\nnav_menu = mo.nav_menu(\n    {\n        \"/overview\": \"Overview\",\n        \"Sales\": {\n            \"/sales\": \"Overview\",\n            \"/sales/invoices\": {\n                \"label\": \"Invoices\",\n                \"description\": \"View invoices\",\n            },\n            \"/sales/customers\": {\n                \"label\": \"Customers\",\n                \"description\": \"View customers\",\n            },\n        },\n    }\n)\n\n\nArgs.\n\nmenu: a dictionary of tab names to tab content; the content can also be nested dictionaries (one level deep) strings are interpreted as markdown\n\nReturns.\n\nAn Html object.\n\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nnav_menu()"
  },
  {
    "title": "Runtime configuration - marimo",
    "url": "https://docs.marimo.io/guides/runtime_configuration.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nRuntime configuration\n\nThrough the notebook settings menu, you can configure how and when marimo runs cells.\n\nOn startup\n\nBy default, marimo runs notebooks automatically on startup. Disable this by unchecking ‚ÄúAutorun on startup‚Äù.\n\nWhen sharing a notebook as an app with marimo run, this setting has no effect.\n\nOn cell change\n\nBy default, when a cell is run or a UI element is interacted with, marimo automatically runs cells that reference any of its variables. You can disable automatic execution of cell‚Äôs descendants in the notebook settings menu by setting \"On cell change\" to \"lazy\".\n\nWhen the runtime is lazy, running a cell marks affected cells as stale but doesn‚Äôt automatically run them. Lazy evaluation means cells are only run when their outputs are needed. If you run a cell that has stale ancestors, those ancestors will also run to make sure your cell doesn‚Äôt use stale inputs. You can always click the notebook run button or use the keyboard shortcut to run all stale cells.\n\nWhen should I use lazy evaluation? Choosing the lazy runtime can be helpful when working on notebooks with expensive cells.\n\nWhen sharing a notebook as an app with marimo run, this setting has no effect.\n\nOn module change\n\nEnable module autoreloading via the settings icon (top right). When enabled, when Python modules that your notebook imports are modified, marimo reloads those modifications so you can use the latest version of your code. This works recursively, meaning that marimo tracks modifications for modules imported by your notebook‚Äôs imported modules too.\n\nAutoreloading comes in two types:\n\n‚Äúlazy‚Äù: automatically marks cells affected by module modifications as stale, letting you know which cells need to be re-run.\n\n‚Äúautorun‚Äù: automatically re-runs cells affected by module modification.\n\nWhy autoreload? Autoreloading enables a workflow that many developers find productive: develop complex logic in Python modules, and use the marimo notebook as a DAG or main script that orchestrates your logic.\n\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nOn startup\nOn cell change\nOn module change"
  },
  {
    "title": "marimo",
    "url": "https://docs.marimo.io/index.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\n\nmarimo is a reactive notebook for Python that models notebooks as dataflow graphs. Run a cell or interact with a UI element, and marimo automatically runs affected cells (or marks them as stale), keeping code and outputs consistent and preventing bugs before they happen. Every marimo notebook is stored as pure Python, executable as a script, and deployable as an app.\n\nBuilt from the ground up\n\nmarimo was built from the ground up to solve well-known problems associated with traditional notebooks.\n\ninstall with pip\npip install marimo && marimo tutorial intro\n\ninstall with uv\ninstall with conda\n\nDeveloper experience is core to marimo, with an emphasis on reproducibility, maintainability, composability, and shareability.\n\nHighlights.\n\nüöÄ batteries-included: replaces jupyter, streamlit, jupytext, ipywidgets, papermill, & more\n\n‚ö°Ô∏è reactive: run a cell, and marimo reactively runs all dependent cells or marks them as stale\n\nüñêÔ∏è interactive: bind sliders, tables, plots, and more to Python ‚Äî no callbacks required\n\nüî¨ reproducible: no hidden state, deterministic execution, built-in package management\n\nüèÉ executable: execute as a Python script, parametrized by CLI args\n\nüõú shareable: deploy as an interactive web app or slides, run in the browser via WASM\n\nüõ¢Ô∏è designed for data: query dataframes and databases with SQL, filter and search dataframes\n\nüêç git-friendly: notebooks are stored as .py files\n\n‚å®Ô∏è a modern editor: GitHub Copilot, AI assistants, vim keybindings, variable explorer, and more\n\n‚ö° marimo notebooks run automatically with interactions and code changes\n\n‚ú® express yourself with markdown, LaTeX, tables, accordions, tabs, grids, and more\n\nüî¨ do reproducible science in an environment that makes your data tangible\n\nüöÄ deploy as interactive web apps\n\nContents\nGetting Started\nInstallation\nTutorials\nNotebooks\nApps\nConvert Jupyter notebooks\nGitHub Copilot\nVS Code extension\nGuides\nRecipes\nControl Flow\nGrouping UI elements together\nWorking with buttons\nCaching\nAPI Reference\nFAQ\nChoosing marimo\nUsing marimo\nExamples\nIntegrations\nCommunity\nShields\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nIndex\n\nIndex\n\nNext\nGetting Started\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo"
  },
  {
    "title": "404: NOT_FOUND",
    "url": "https://docs.marimo.io/guides/module-change",
    "html": "404: NOT_FOUND\nCode: NOT_FOUND\nID: cle1::b6sl7-1726926361362-e4b259ac694f\n\nRead our documentation to learn more about this error."
  },
  {
    "title": "Index - marimo",
    "url": "https://docs.marimo.io/genindex.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nToggle Light / Dark / Auto color theme\nIndex\nA | B | C | D | E | F | G | H | I | L | M | N | P | Q | R | S | T | V\nA\naccordion() (in module marimo)\nadd_code() (marimo.MarimoIslandGenerator method)\naltair_chart() (in module marimo.ui)\nanywidget (class in marimo.ui), [1]\n\t\nApp (class in marimo)\nappend() (in module marimo.output)\narray (class in marimo.ui)\nas_html() (in module marimo)\naudio() (in module marimo)\nB\nbatch (class in marimo.ui)\nbatch() (marimo.Html method)\n\t\nbuild() (marimo.MarimoIslandGenerator method)\nbutton (class in marimo.ui)\nC\ncallout() (in module marimo)\n(marimo.Html method)\ncapture_stderr() (in module marimo)\ncapture_stdout() (in module marimo)\ncarousel() (in module marimo)\nCell (class in marimo)\n\t\ncenter() (in module marimo)\n(marimo.Html method)\ncheckbox (class in marimo.ui)\nclear() (in module marimo.output)\ncli_args() (in module marimo)\ncode_editor (class in marimo.ui)\ncontents() (marimo.ui.file method)\nD\ndata_explorer (class in marimo.ui)\ndataframe (class in marimo.ui)\ndate (class in marimo.ui)\ndate_range (class in marimo.ui)\ndatetime (class in marimo.ui)\n\t\ndefs (marimo.Cell property)\ndefs() (in module marimo)\ndictionary (class in marimo.ui)\ndownload() (in module marimo)\ndropdown (class in marimo.ui)\nE\nembed() (marimo.App method)\nF\nfile (class in marimo.ui)\nfile_browser (class in marimo.ui)\nform (class in marimo.ui)\nfrom_file() (marimo.MarimoIslandGenerator static method)\nfrom_series() (marimo.ui.date static method)\n(marimo.ui.date_range static method)\n(marimo.ui.datetime static method)\n(marimo.ui.dropdown static method)\n(marimo.ui.multiselect static method)\n(marimo.ui.number static method)\n(marimo.ui.radio static method)\n(marimo.ui.range_slider static method)\n(marimo.ui.slider static method)\nG\nget_column_values() (marimo.ui.dataframe method)\nH\nhstack() (in module marimo)\n(marimo.ui.array method)\n(marimo.ui.dictionary method)\n\t\nHtml (class in marimo)\nI\nicon() (in module marimo)\n\t\nimage() (in module marimo)\ninteractive() (in module marimo.mpl)\nL\nlazy() (in module marimo)\n\t\nleft() (in module marimo)\n(marimo.Html method)\nM\nMarimoIslandGenerator (class in marimo)\nMarimoStopError (class in marimo)\nmd() (in module marimo)\n\t\nmermaid() (in module marimo)\nmicrophone (class in marimo.ui)\nmultiselect (class in marimo.ui)\nN\nname() (marimo.ui.file method)\n(marimo.ui.file_browser method)\n\t\nnav_menu() (in module marimo)\nnumber (class in marimo.ui)\nP\npath() (marimo.ui.file_browser method)\npdf() (in module marimo)\nplain() (in module marimo)\n\t\nplain_text() (in module marimo)\nplotly() (in module marimo.ui), [1]\nprogress_bar() (in module marimo.status)\nQ\nquery_params() (in module marimo)\nR\nradio (class in marimo.ui)\nrange_slider (class in marimo.ui)\nredirect_stderr() (in module marimo)\nredirect_stdout() (in module marimo)\nrefresh (class in marimo.ui), [1]\nrefs (marimo.Cell property)\nrefs() (in module marimo)\nrender_body() (marimo.MarimoIslandGenerator method)\nrender_head() (marimo.MarimoIslandGenerator method)\n\t\nrender_html() (marimo.MarimoIslandGenerator method)\nrender_init_island() (marimo.MarimoIslandGenerator method)\nreplace() (in module marimo.output)\nreplace_at_index() (in module marimo.output)\nright() (in module marimo)\n(marimo.Html method)\nroutes() (in module marimo)\nrun() (marimo.Cell method)\nrun_button (class in marimo.ui)\nrunning_in_notebook() (in module marimo)\nS\nselected_key (marimo.ui.dropdown property)\nshow_code() (in module marimo)\nsidebar() (in module marimo)\nslider (class in marimo.ui)\nspinner() (in module marimo.status)\n\t\nstat() (in module marimo)\nstate() (in module marimo)\nstop() (in module marimo)\nstyle() (marimo.Html method)\nswitch (class in marimo.ui)\nT\ntable (class in marimo.ui)\ntabs (class in marimo.ui)\ntext (class in marimo.ui)\n(marimo.Html property)\n\t\ntext_area (class in marimo.ui)\ntree() (in module marimo)\nV\nvideo() (in module marimo)\nvstack() (in module marimo)\n(marimo.ui.array method)\n(marimo.ui.dictionary method)\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo"
  },
  {
    "title": "Community - marimo",
    "url": "https://docs.marimo.io/community.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nCommunity\n\nWe‚Äôre building a community. Come hang out with us!\n\nüåü Star us on GitHub\n\nüí¨ Chat with us on Discord\n\nüìß Subscribe to our Newsletter\n\n‚òÅÔ∏è Join our Cloud Waitlist\n\n‚úèÔ∏è Start a GitHub Discussion\n\nüê¶ Follow us on Twitter\n\nüï¥Ô∏è Follow us on LinkedIn\n\nShields\n\nYou can use our shield for opening a marimo application:\n\nMarkdown\n\n[![marimo](https://marimo.io/shield.svg)](https://marimo.app/l/c7h6pz)\n\n\nHTML\n\n<a target=\"_blank\" href=\"https://marimo.app/l/c7h6pz\">\n  <img src=\"https://marimo.io/shield.svg\" />\n</a>\n\nPrevious\nGoogle Sheets\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nShields"
  },
  {
    "title": "Google Sheets - marimo",
    "url": "https://docs.marimo.io/integrations/google_sheets.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nGoogle Cloud Storage\nGoogle Cloud BigQuery\nGoogle Sheets\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nGoogle Sheets\nGetting Started\n\nTo use Google Sheets as a data source, you will need to install the gspread and oauth2client Python packages. You can install this package using pip:\n\npip install gspread oauth2client\n\nAuthentication\nApplication Default Credentials (Recommended)\n\nThe easiest way to authenticate with Google Sheets is to use Application Default Credentials. If you are running marimo on Google Cloud and your resource has a service account attached, then Application Default Credentials will automatically be used. If you are running marimo locally, you can authenticate with Application Default Credentials by running the following command:\n\ngcloud auth application-default login\n\nService Account Key File\n\nTo authenticate with Google Sheets, you will need to create a service account and download the service account key file. You can create a service account and download the key file by following the instructions here.\n\nOnce you have downloaded the key file, you can authenticate with Google Sheets by setting the GOOGLE_APPLICATION_CREDENTIALS environment variable to the path of the key file:\n\nexport GOOGLE_APPLICATION_CREDENTIALS=/path/to/key/file.json\n\nReading Data\n\nTo read data from Google Sheets, you will need to authenticate and create a gspread.Client. You can then use this object to read data from Google Sheets.\n\n# Cell 1 - Load libraries\nimport marimo as mo\nimport pandas as pd\nimport os\nimport gspread\nfrom oauth2client.service_account import ServiceAccountCredentials\n\n# Authenticate with Google Sheets\nscope = [\n    \"https://spreadsheets.google.com/feeds\",\n    \"https://www.googleapis.com/auth/drive\",\n]\ncredentials = ServiceAccountCredentials.from_json_keyfile_name(\n    os.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"], scope\n)\ngc = gspread.authorize(credentials)\n\n# Cell 2 - Load the sheet\nwks = gc.open(\"marimo\").sheet1\nmo.ui.table(pd.DataFrame(wks.get_all_records()))\n\nExample\n\nCheck out our full example using Google Sheets here\n\nOr run it yourself:\n\nmarimo run https://raw.githubusercontent.com/marimo-team/marimo/main/examples/cloud/gcp/google_sheets.py\n\nNext\nCommunity\nPrevious\nGoogle Cloud BigQuery\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nGetting Started\nAuthentication\nApplication Default Credentials (Recommended)\nService Account Key File\nReading Data\nExample"
  },
  {
    "title": "Google Cloud BigQuery - marimo",
    "url": "https://docs.marimo.io/integrations/google_cloud_bigquery.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nGoogle Cloud Storage\nGoogle Cloud BigQuery\nGoogle Sheets\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nGoogle Cloud BigQuery\nGetting Started\n\nTo use Google Cloud BigQuery as a data source, you will need to install the google-cloud-bigquery Python package. You can install this package using pip:\n\npip install google-cloud-bigquery db-dtypes\n\nAuthentication\nApplication Default Credentials (Recommended)\n\nThe easiest way to authenticate with Google Cloud BigQuery is to use Application Default Credentials. If you are running marimo on Google Cloud and your resource has a service account attached, then Application Default Credentials will automatically be used. If you are running marimo locally, you can authenticate with Application Default Credentials by running the following command:\n\ngcloud auth application-default login\n\nService Account Key File\n\nTo authenticate with Google Cloud BigQuery, you will need to create a service account and download the service account key file. You can create a service account and download the key file by following the instructions here.\n\nOnce you have downloaded the key file, you can authenticate with Google Cloud BigQuery by setting the GOOGLE_APPLICATION_CREDENTIALS environment variable to the path of the key file:\n\nexport GOOGLE_APPLICATION_CREDENTIALS=/path/to/key/file.json\n\nReading Data\n\nTo read data from Google Cloud BigQuery, you will need to create a BigQueryClient object. You can then use this object to read data from Google Cloud BigQuery.\n\n# Cell 1 - Load libraries\nimport marimo as mo\nfrom google.cloud import bigquery\n\n# Cell 2 - Load datasets\nclient = bigquery.Client()\ndatasets = list(client.list_datasets())\n\n# Cell 3 - Select dataset\nselected_dataset = mo.ui.dropdown(\n    label=\"Select dataset\", options=[d.dataset_id for d in datasets]\n)\nselected_dataset\n\n# Cell 4 - Load tables\ndataset = client.dataset(selected_dataset.value)\ntables = list(client.list_tables(dataset))\nselected_table = mo.ui.dropdown(\n    label=\"Select table\", options=[t.table_id for t in tables]\n)\nselected_table\n\n# Cell 5 - Load table data\nresults = client.list_rows(dataset.table(selected_table.value), max_results=10)\nmo.ui.table(results.to_dataframe(), selection=None)\n\nExample\n\nCheck out our full example using Google Cloud BigQuery here\n\nOr run it yourself:\n\nmarimo run https://raw.githubusercontent.com/marimo-team/marimo/main/examples/cloud/gcp/google_cloud_bigquery.py\n\nNext\nGoogle Sheets\nPrevious\nGoogle Cloud Storage\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nGetting Started\nAuthentication\nApplication Default Credentials (Recommended)\nService Account Key File\nReading Data\nExample"
  },
  {
    "title": "Google Cloud Storage - marimo",
    "url": "https://docs.marimo.io/integrations/google_cloud_storage.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nGoogle Cloud Storage\nGoogle Cloud BigQuery\nGoogle Sheets\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nGoogle Cloud Storage\nGetting Started\n\nTo use Google Cloud Storage as a data source, you will need to install the google-cloud-storage Python package. You can install this package using pip:\n\npip install google-cloud-storage\n\nAuthentication\nApplication Default Credentials (Recommended)\n\nThe easiest way to authenticate with Google Cloud Storage is to use Application Default Credentials. If you are running marimo on Google Cloud and your resource has a service account attached, then Application Default Credentials will automatically be used. If you are running marimo locally, you can authenticate with Application Default Credentials by running the following command:\n\ngcloud auth application-default login\n\nService Account Key File\n\nTo authenticate with Google Cloud Storage, you will need to create a service account and download the service account key file. You can create a service account and download the key file by following the instructions here.\n\nOnce you have downloaded the key file, you can authenticate with Google Cloud Storage by setting the GOOGLE_APPLICATION_CREDENTIALS environment variable to the path of the key file:\n\nexport GOOGLE_APPLICATION_CREDENTIALS=/path/to/key/file.json\n\nReading Data\n\nTo read data from Google Cloud Storage, you will need to create a StorageClient object. You can then use this object to read data from Google Cloud Storage.\n\n# Cell 1 - Load libraries\nimport marimo as mo\nfrom google.cloud import storage\n\n# Cell 2 - Load buckets\nclient = storage.Client()\nbuckets = client.list_buckets()\n\n# Cell 3 - Select bucket\nselected_bucket = mo.ui.dropdown(\n    label=\"Select bucket\", options=[b.name for b in buckets]\n)\nselected_bucket\n\n# Cell 4 - Load files\nfiles = list(bucket.list_blobs())\nitems = [\n    {\n        \"Name\": f.name,\n        \"Updated\": f.updated.strftime(\"%h %d, %Y\"),\n        \"Size\": f.size,\n    }\n    for f in files\n]\nfile_table = mo.ui.table(items, selection=\"single\")\nfile_table if items else mo.md(\"No files found\").callout()\n\nExample\n\nCheck out our full example using Google Cloud Storage here\n\nOr run it yourself:\n\nmarimo run https://raw.githubusercontent.com/marimo-team/marimo/main/examples/cloud/gcp/google_cloud_storage.py\n\nNext\nGoogle Cloud BigQuery\nPrevious\nIntegrations\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nGetting Started\nAuthentication\nApplication Default Credentials (Recommended)\nService Account Key File\nReading Data\nExample"
  },
  {
    "title": "Integrations - marimo",
    "url": "https://docs.marimo.io/integrations/index.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nGoogle Cloud Storage\nGoogle Cloud BigQuery\nGoogle Sheets\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nIntegrations\n\nIt is easy to integrate your preferred data sources with marimo. Since marimo is strictly Python, you can utilize any Python library to access your data. In this section, we provide some examples of how to integrate with popular data sources.\n\n\t\n\n\n\n\nGoogle Cloud Storage\n\n\t\n\nIntegrating with Google Cloud Storage\n\n\n\n\nGoogle Cloud BigQuery\n\n\t\n\nIntegrating with Google Cloud BigQuery\n\n\n\n\nGoogle Sheets\n\n\t\n\nIntegrating with Google Sheets\n\nNext\nGoogle Cloud Storage\nPrevious\nExamples\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo"
  },
  {
    "title": "Examples - marimo",
    "url": "https://docs.marimo.io/examples.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nExamples\n\nExamples are available in our repo. Community examples can be found and shared in the marimo cookbook.\n\nWe‚Äôve deployed many of these examples at our public gallery (try them out!).\n\nNext\nIntegrations\nPrevious\nFAQ\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo"
  },
  {
    "title": "FAQ - marimo",
    "url": "https://docs.marimo.io/faq.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nFAQ\n\nChoosing marimo\n\nHow is marimo different from Jupyter?\n\nWhat problems does marimo solve?\n\nHow is marimo.ui different from Jupyter widgets?\n\nUsing marimo\n\nIs marimo a notebook or a library?\n\nWhat‚Äôs the difference between a marimo notebook and a marimo app?\n\nHow does marimo know what cells to run?\n\nDoes marimo slow my code down\n\nHow do I prevent automatic execution from running expensive cells?\n\nHow do I disable automatic execution?\n\nHow do I use sliders and other interactive elements?\n\nHow do I add a submit button to UI elements?\n\nHow do I write markdown?\n\nHow do I display plots?\n\nHow do I prevent matplotlib plots from being cut off?\n\nHow do I display interactive matplotlib plots?\n\nHow do I display objects in rows and columns?\n\nHow do I show cell code in the app view?\n\nHow do I create an output with a dynamic number of UI elements?\n\nWhy aren‚Äôt my on_change handlers being called?\n\nWhy are my on_change handlers in an array all referencing the last element?\n\nHow do I restart a notebook?\n\nHow do I reload modules?\n\nHow does marimo treat type annotations?\n\nHow do I use dotenv?\n\nWhat packages can I use?\n\nHow do I use marimo on a remote server?\n\nHow do I make marimo accessible on all network interfaces?\n\nHow do I use marimo behind JupyterHub?\n\nHow do I deploy apps?\n\nIs marimo free?\n\nChoosing marimo\n\nHow is marimo different from Jupyter?\n\nmarimo is a reinvention of the Python notebook as a reproducible, interactive, and shareable Python program that can be executed as scripts or deployed as interactive web apps.\n\nConsistent state. In marimo, your notebook code, outputs, and program state are guaranteed to be consistent. Run a cell and marimo reacts by automatically running the cells that reference its variables. Delete a cell and marimo scrubs its variables from program memory, eliminating hidden state.\n\nBuilt-in interactivity. marimo also comes with UI elements like sliders, a dataframe transformer, and interactive plots that are automatically synchronized with Python. Interact with an element and the cells that use it are automatically re-run with its latest value.\n\nPure Python programs. Unlike Jupyter notebooks, marimo notebooks are stored as pure Python files that can be executed as scripts, deployed as interactive web apps, and versioned easily with git.\n\nWhat problems does marimo solve?\n\nmarimo solves problems in reproducibility, maintainability, interactivity, reusability, and shareability of notebooks.\n\nReproducibility. In Jupyter notebooks, the code you see doesn‚Äôt necessarily match the outputs on the page or the program state. If you delete a cell, its variables stay in memory, which other cells may still reference; users can execute cells in arbitrary order. This leads to widespread reproducibility issues. One study analyzed 10 million Jupyter notebooks and found that 36% of them weren‚Äôt reproducible.\n\nIn contrast, marimo guarantees that your code, outputs, and program state are consistent, eliminating hidden state and making your notebook reproducible. marimo achieves this by intelligently analyzing your code and understanding the relationships between cells, and automatically re-running cells as needed.\n\nMaintainability. marimo notebooks are stored as pure Python programs (.py files). This lets you version them with git; in contrast, Jupyter notebooks are stored as JSON and require extra steps to version.\n\nInteractivity. marimo notebooks come with UI elements that are automatically synchronized with Python (like sliders, dropdowns); eg, scrub a slider and all cells that reference it are automatically re-run with the new value. This is difficult to get working in Jupyter notebooks.\n\nReusability. marimo notebooks can be executed as Python scripts from the command-line (since they‚Äôre stored as .py files). In contrast, this requires extra steps to do for Jupyter, such as copying and pasting the code out or using external frameworks. In the future, we‚Äôll also let you import symbols (functions, classes) defined in a marimo notebook into other Python programs/notebooks, something you can‚Äôt easily do with Jupyter.\n\nShareability. Every marimo notebook can double as an interactive web app, complete with UI elements, which you can serve using the marimo run command. This isn‚Äôt possible in Jupyter without substantial extra effort.\n\nTo learn more about problems with traditional notebooks, see these references [1] [2].\n\nHow is marimo.ui different from Jupyter widgets?\n\nUnlike Jupyter widgets, marimo‚Äôs interactive elements are automatically synchronized with the Python kernel: no callbacks, no observers, no manually re-running cells.\n\nUsing marimo\n\nIs marimo a notebook or a library?\n\nmarimo is both a notebook and a library.\n\nCreate marimo notebooks with the editor that opens in your browser when you run marimo edit.\n\nUse the marimo library (import marimo as mo) in marimo notebooks. Write markdown with mo.md(...), create stateful interactive elements with mo.ui (mo.ui.slider(...)), and more. See the docs for an API reference.\n\nWhat‚Äôs the difference between a marimo notebook and a marimo app?\n\nmarimo programs are notebooks, apps, or both, depending on how you use them.\n\nThere are two ways to interact with a marimo program:\n\nopen it as a computational notebook with marimo edit\n\nrun it as an interactive app with marimo run\n\nAll marimo programs start as notebooks, since they are created with marimo edit. Because marimo notebooks are reactive and have built-in interactive elements, many can easily be made into useful and beautiful apps by simply hiding the notebook code: this is what marimo run does.\n\nNot every notebook needs to be run as an app ‚Äî marimo notebooks are useful in and of themselves for rapidly exploring data and doing reproducible science. And not every app is improved by interacting with the notebook. In some settings, such as collaborative research, education, and technical presentations, going back and forth between the notebook view and app view (which you can do from marimo edit) can be useful!\n\nHow does marimo know what cells to run?\n\nmarimo reads each cell once to determine what global names it defines and what global names it reads. When a cell is run, marimo runs all other cells that read any of the global names it defines. A global name can refer to a variable, class, function, or import.\n\nIn other words, marimo uses static analysis to make a dataflow graph out of your cells. Each cell is a node in the graph across which global variables ‚Äúflow‚Äù. Whenever a cell is run, either because you changed its code or interacted with a UI element it reads, all its descendants run in turn.\n\nDoes marimo slow my code down?\n\nNo, marimo doesn‚Äôt slow your code down. marimo determines the dependencies among cells by reading your code, not running or tracing it, so there‚Äôs zero runtime overhead.\n\nHow do I prevent automatic execution from running expensive cells?\n\nReactive (automatic) execution ensures your code and outputs are always in sync, improving reproducibility by eliminating hidden state and out-of-order execution; marimo also takes care to run only the minimal set of cells needed to keep your notebook up to date. But when some cells take a long time to run, it‚Äôs understandable to be concerned that automatic execution will kick off expensive cells before you‚Äôre ready to run them.\n\nHere are some tips to avoid accidental execution of expensive cells:\n\nDisable expensive cells. When a cell is disabled, it and its descendants are blocked from running.\n\nUse Python‚Äôs functools.cache to cache expensive intermediate computations (see our best practices guide).\n\nWrap UI elements in a form.\n\nUse mo.stop to conditionally stop execution of a cell and its descendants.\n\nDisable automatic execution in the runtime configuration.\n\nHow do I disable automatic execution?\n\nYou can disable automatic execution through the notebook runtime settings; see the guide on runtime configuration.\n\nHow do I use sliders and other interactive elements?\n\nInteractive UI elements like sliders are available in marimo.ui.\n\nAssign the UI element to a global variable (slider = mo.ui.slider(0, 100))\n\nInclude it in the last expression of a cell to display it (slider or mo.md(f\"Choose a value: {slider}\"))\n\nRead its current value in another cell via its value attribute (slider.value)\n\nWhen a UI element bound to a global variable is interacted with, all cells referencing the global variable are run automatically.\n\nIf you have many UI elements or don‚Äôt know the elements you‚Äôll create until runtime, use marimo.ui.array and marimo.ui.dictionary to create UI elements that wrap other UI elements (sliders = mo.ui.array([slider(1, 100) for _ in range(n_sliders)])).\n\nAll this and more is explained in the UI tutorial. Run it with\n\nmarimo tutorial ui\n\n\nat the command line.\n\nHow do I add a submit button to UI elements?\n\nUse the form method to add a submit button to a UI element. For example,\n\nform = marimo.ui.text_area().form()\n\n\nWhen wrapped in a form, the text area‚Äôs value will only be sent to Python when you click the submit button. Access the last submitted value of the text area with form.value.\n\nHow do I write markdown?\n\nImport marimo (as mo) in a notebook, and use the mo.md function. Learn more in the outputs guide or by running marimo tutorial markdown.\n\nHow do I display plots?\n\nInclude plots in the last expression of a cell to display them, just like all other outputs. If you‚Äôre using matplotlib, you can display the Figure object (get the current figure with plt.gcf()). For examples, run the plots tutorial:\n\nmarimo tutorial plots\n\n\nAlso see the plotting API reference.\n\nHow do I prevent matplotlib plots from being cut off?\n\nIf your legend or axes labels are cut off, try calling plt.tight_layout() before outputting your plot:\n\nimport matplotlib.pyplot as plt\n\nplt.plot([-8, 8])\nplt.ylabel(\"my variable\")\nplt.tight_layout()\nplt.gca()\n\n\nHow do I display interactive matplotlib plots?\n\nUse marimo.mpl.interactive.\n\nfig, ax = plt.subplots()\nax.plot([1, 2])\nmo.mpl.interactive(ax)\n\n\nHow do I display objects in rows and columns?\n\nUse marimo.hstack and marimo.vstack. See the layout tutorial for details:\n\nmarimo tutorial layout\n\n\nHow do I show cell code in the app view?(#faq-show-code)\n\nUse mo.show_code.\n\nHow do I create an output with a dynamic number of UI elements?\n\nUse mo.ui.array, mo.ui.dictionary, or mo.ui.batch to create a UI element that wraps a dynamic number of other UI elements.\n\nIf you need custom formatting, use mo.ui.batch, otherwise use mo.ui.array or mo.ui.dictionary.\n\nFor usage examples, see the recipes for grouping UI elements together.\n\nHow do I restart a notebook?\n\nTo clear all program memory and restart the notebook from scratch, open the notebook menu in the top right and click ‚ÄúRestart kernel‚Äù.\n\nHow do I reload modules?\n\nEnable automatic reloading of modules via the runtime settings in your marimo installation‚Äôs user configuration. (Click the ‚Äúgear‚Äù icon in the top right of a marimo notebook).\n\nWhen enabled, marimo will automatically hot-reload modified modules before executing a cell.\n\nWhy aren‚Äôt my on_change/on_click handlers being called?\n\nA UI Element‚Äôs on_change (or for buttons, on_click) handlers are only called if the element is bound to a global variable. For example, this won‚Äôt work\n\nmo.vstack([mo.ui.button(on_change=lambda _: print(\"I was called\")) for _ in range(10)])\n\n\nIn such cases (when you want to output a dynamic number of UI elements), you need to use mo.ui.array, mo.ui.dictionary, or mo.ui.batch.\n\nSee the recipes for grouping UI elements together for example code.\n\nWhy are my on_change handlers in an array all referencing the last element?\n\nDon‚Äôt do this: In the below snippet, every on_change will print 9!.\n\narray = mo.ui.array(\n  [mo.ui.button(on_change=lambda value: print(i)) for i in range(10)\n])\n\n\nInstead, do this: Explicitly bind i to the current loop value:\n\narray = mo.ui.array(\n    [mo.ui.button(on_change=lambda value, i=i: print(i)) for i in range(10)]\n)\narray\n\n\nThis is necessary because in Python, closures are late-binding.\n\nHow does marimo treat type annotations?\n\nType annotations are registered as references of a cell, unless they are explicitly written as strings. This helps ensure correctness of code that depends on type annotations at runtime (e.g., Pydantic), while still providing a way to omit annotations from affecting dataflow graph.\n\nFor example, in\n\nx: A = ...\n\n\nA is treated as a reference, used in determining the dataflow graph, but in\n\nx: \"A\" = ...\n\n\nA isn‚Äôt made a reference.\n\nFor Python 3.12+, marimo additionally implements annotation scoping.\n\nHow do I use dotenv?\n\nThe package dotenv‚Äôs loadenv() function does not work out-of-the box in marimo. Instead, use dotenv.load_dotenv(dotenv.find_dotenv(usecwd=True)).\n\nWhat packages can I use?\n\nYou can use any Python package. marimo cells run arbitrary Python code.\n\nHow do I use marimo on a remote server?\n\nUse SSH port-forwarding to run marimo on a remote server and connect to it from a browser on your local machine. Make sure to pass the --headless flag when starting marimo on remote:\n\nmarimo edit --headless\n\n\nYou may also want to set a custom host and port:\n\nmarimo edit --headless --host 0.0.0.0 --port 8080\n\n\nHow do I make marimo accessible on all network interfaces?\n\nUse --host 0.0.0.0 with marimo edit, marimo run, or marimo tutorial:\n\nmarimo edit --host 0.0.0.0\n\n\nHow do I use marimo behind JupyterHub?\n\nJupyterHub can be configured to launch marimo using the jupyter-marimo-proxy package.\n\nHow do I deploy apps?\n\nUse the marimo CLI‚Äôs run command to serve a notebook as an app:\n\nmarimo run notebook.py\n\n\nIf you are running marimo inside a Docker container, you may want to run under a different host and port:\n\nmarimo run notebook.py --host 0.0.0.0 --port 8080\n\n\nIs marimo free?\n\nYes!\n\nNext\nExamples\nPrevious\nMiscellaneous\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nChoosing marimo\nHow is marimo different from Jupyter?\nWhat problems does marimo solve?\nHow is marimo.ui different from Jupyter widgets?\nUsing marimo\nIs marimo a notebook or a library?\nWhat‚Äôs the difference between a marimo notebook and a marimo app?\nHow does marimo know what cells to run?\nDoes marimo slow my code down?\nHow do I prevent automatic execution from running expensive cells?\nHow do I disable automatic execution?\nHow do I use sliders and other interactive elements?\nHow do I add a submit button to UI elements?\nHow do I write markdown?\nHow do I display plots?\nHow do I prevent matplotlib plots from being cut off?\nHow do I display interactive matplotlib plots?\nHow do I display objects in rows and columns?\nHow do I show cell code in the app view?(#faq-show-code)\nHow do I create an output with a dynamic number of UI elements?\nHow do I restart a notebook?\nHow do I reload modules?\nWhy aren‚Äôt my on_change/on_click handlers being called?\nWhy are my on_change handlers in an array all referencing the last element?\nHow does marimo treat type annotations?\nHow do I use dotenv?\nWhat packages can I use?\nHow do I use marimo on a remote server?\nHow do I make marimo accessible on all network interfaces?\nHow do I use marimo behind JupyterHub?\nHow do I deploy apps?\nIs marimo free?"
  },
  {
    "title": "Miscellaneous - marimo",
    "url": "https://docs.marimo.io/api/miscellaneous.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nMiscellaneous\nmarimo.running_in_notebook() ‚Üí bool\n\nReturns True if running in a marimo notebook, False otherwise\n\nmarimo.defs() ‚Üí tuple[str, ...]\n\nGet the definitions of the currently executing cell.\n\nReturns:\n\ntuple of the currently executing cell‚Äôs defs.\n\nmarimo.refs() ‚Üí tuple[str, ...]\n\nGet the references of the currently executing cell.\n\nReturns:\n\ntuple of the currently executing cell‚Äôs refs.\n\nNext\nFAQ\nPrevious\nCell\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nrunning_in_notebook()\ndefs()\nrefs()"
  },
  {
    "title": "Cell - marimo",
    "url": "https://docs.marimo.io/api/cell.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nCell\nclass marimo.Cell(_name: str, _cell: CellImpl, _app: InternalApp | None = None)\n\nAn executable notebook cell\n\nA Cell object can be executed as a function via its run() method, which returns the cell‚Äôs last expression (output) and a mapping from its defined names to its values.\n\nCells can be named via the marimo editor in the browser, or by changing the cell‚Äôs function name in the notebook file. Named cells can then be executed for use in other notebooks, or to test in unit tests.\n\nFor example:\n\nfrom my_notebook import my_cell\n\noutput, definitions = my_cell.run()\n\n\nSee the documentation of run for info and examples.\n\nPUBLIC METHODS\n\nrun(**refs)\n\n\t\n\nRun this cell and return its visual output and definitions\n\nPUBLIC DATA ATTRIBUTES:\n\nname\n\n\t\n\n\n\n\nrefs\n\n\t\n\nThe references that this cell takes as input\n\n\n\n\ndefs\n\n\t\n\nThe definitions made by this cell\n\nproperty refs: set[str]\n\nThe references that this cell takes as input\n\nproperty defs: set[str]\n\nThe definitions made by this cell\n\nrun(**refs: Any) ‚Üí tuple[Any, Mapping[str, Any]] | Awaitable[tuple[Any, Mapping[str, Any]]]\n\nRun this cell and return its visual output and definitions\n\nUse this method to run named cells and retrieve their output and definitions.\n\nThis lets you use reuse cells defined in one notebook in another notebook or Python file. It also makes it possible to write and execute unit tests for notebook cells using a test framework like pytest.\n\nExample. marimo cells can be given names either through the editor cell menu or by manually changing the function name in the notebook file. For example, consider a notebook notebook.py:\n\nimport marimo\n\napp = marimo.App()\n\n\n@app.cell\ndef __():\n    import marimo as mo\n\n    return (mo,)\n\n\n@app.cell\ndef __():\n    x = 0\n    y = 1\n    return (x, y)\n\n\n@app.cell\ndef add(mo, x, y):\n    z = x + y\n    mo.md(f\"The value of z is {z}\")\n    return (z,)\n\n\nif __name__ == \"__main__\":\n    app.run()\n\n\nTo reuse the add cell in another notebook, you‚Äôd simply write\n\nfrom notebook import add\n\n# `output` is the markdown rendered by `add`\n# defs[\"z\"] == `1`\noutput, defs = add.run()\n\n\nWhen run is called without arguments, it automatically computes the values that the cell depends on (in this case, mo, x, and y). You can override these values by providing any subset of them as keyword arguments. For example,\n\n# defs[\"z\"] == 4\noutput, defs = add.run(x=2, y=2)\n\n\nDefined UI Elements. If the cell‚Äôs output has UI elements that are in defs, interacting with the output in the frontend will trigger reactive execution of cells that reference the defs object. For example, if output has a slider defined by the cell, then scrubbing the slider will cause cells that reference defs to run.\n\nAsync cells. If this cell is a coroutine function (starting with async), or if any of its ancestors are coroutine functions, then you‚Äôll need to await the result: output, defs = await cell.run(). You can check whether the result is an awaitable using:\n\nfrom collections.abc import Awaitable\n\nret = cell.run()\nif isinstance(ret, Awaitable):\n    output, defs = await ret\nelse:\n    output, defs = ret\n\n\nArguments:\n\nYou may pass values for any of this cell‚Äôs references as keyword arguments. marimo will automatically compute values for any refs that are not provided by executing the parent cells that compute them.\n\nReturns:\n\na tuple (output, defs), or an awaitable of the same, where output is the cell‚Äôs last expression and defs is a Mapping from the cell‚Äôs defined names to their values.\n\nNext\nMiscellaneous\nPrevious\nApp\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nCell\nCell.refs\nCell.defs\nCell.run()"
  },
  {
    "title": "Diagrams - marimo",
    "url": "https://docs.marimo.io/api/diagrams.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nDiagrams\nMermaid diagrams\nmarimo.mermaid(diagram: str) ‚Üí Html\n\nRender a diagram with Mermaid.\n\nExamples.\n\ndiagram = '''\ngraph LR\n    A[Square Rect] -- Link text --> B((Circle))\n    A --> C(Round Rect)\n    B --> D{Rhombus}\n    C --> D\n'''\nmo.mermaid(diagram)\n\n\nMermaid is a tool for making diagrams such as flow charts and graphs. See the Mermaid documentation for details.\n\nArgs.\n\ndiagram: a string containing a Mermaid diagram\n\nReturns.\n\nAn Html object.\n\nStatistic cards\nmarimo.stat(value: str | int | float, label: str | None = None, caption: str | None = None, direction: Literal['increase', 'decrease'] | None = None, bordered: bool = False) ‚Üí Html\n\nDisplay a statistic.\n\nOptionally include a label, caption, and direction.\n\nArgs.\n\nvalue: the value to display\n\nlabel: the label to display\n\ncaption: the caption to display\n\ndirection: the direction of the statistic, either increase or decrease\n\nbordered: whether to display a border around the statistic\n\nReturns.\n\nAn Html object representing the statistic.\n\nNext\nStatus\nPrevious\nPlain text\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nMermaid diagrams\nmermaid()\nStatistic cards\nstat()"
  },
  {
    "title": "Status - marimo",
    "url": "https://docs.marimo.io/api/status.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nStatus\n\nUse progress bars or spinners to visualize loading status in your notebooks and apps. Useful when iterating over collections or loading data from files, databases, or APIs.\n\nProgress bar\n\nYou can display a progress bar while iterating over a collection, similar to tqdm.\n\nmarimo.status.progress_bar(collection: Collection[S | int] | None = None, *, title: str | None = None, subtitle: str | None = None, completion_title: str | None = None, completion_subtitle: str | None = None, total: int | None = None, show_rate: bool = True, show_eta: bool = True, remove_on_exit: bool = False, disabled: bool = False)\n\nIterate over a collection and show a progress bar\n\nExample.\n\nfor i in mo.status.progress_bar(range(10)):\n    ...\n\n\nYou can optionally provide a title and subtitle to show during iteration, and a title/subtitle to show upon completion.\n\nYou can also use progress_bar with a context manager and manually update the bar:\n\nwith mo.status.progress_bar(total=10) as bar:\n    for i in range(10):\n        ...\n        bar.update()\n\n\nThe update method accepts the optional keyword arguments increment (defaults to 1), title, and subtitle.\n\nFor performance reasons, the progress bar is only updated in the UI every 150ms.\n\nArgs.\n\ncollection: optional collection to iterate over\n\ntitle: optional title\n\nsubtitle: optional subtitle\n\ncompletion_title: optional title to show during completion\n\ncompletion_subtitle: optional subtitle to show during completion\n\ntotal: optional total number of items to iterate over\n\nshow_rate: if True, show the rate of progress (items per second)\n\nshow_eta: if True, show the estimated time of completion\n\nremove_on_exit: if True, remove the progress bar from output on exit\n\ndisabled: if True, disable the progress bar\n\nSpinner\nmarimo.status.spinner(title: str | None = None, subtitle: str | None = None, remove_on_exit: bool = True)\n\nShow a loading spinner\n\nUse mo.status.spinner() as a context manager to show a loading spinner. You can optionally pass a title and subtitle.\n\nExample.\n\nwith mo.status.spinner(subtitle=\"Loading data ...\") as _spinner:\n    data = expensive_function()\n    _spinner.update(subtitle=\"Crunching numbers ...\")\n    ...\n\nmo.ui.table(data)\n\n\nYou can also show the spinner without a context manager:\n\nmo.status.spinner(title=\"Loading ...\") if condition else mo.md(\"Done!\")\n\n\nArgs:\n\ntitle: optional title\n\nsubtitle: optional subtitle\n\nremove_on_exit: if True, the spinner is removed from output on exit\n\nNext\nOutputs\nPrevious\nDiagrams\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nProgress bar\nprogress_bar()\nSpinner\nspinner()"
  },
  {
    "title": "App - marimo",
    "url": "https://docs.marimo.io/api/app.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nApp\nclass marimo.App(**kwargs: Any)\n\nA marimo notebook.\n\nA marimo notebook is a dataflow graph, with each node computing a Python function.\n\nasync embed() ‚Üí AppEmbedResult\n\nEmbed a notebook into another notebook.\n\nThe embed method lets you embed the output of a notebook into another notebook and access the values of its variables.\n\nExample.\n\nfrom my_notebook import app\n\n# execute the notebook\nresult = await app.embed()\n\n# view the notebook's visual output\nresult.output\n\n# access the notebook's defined variables\nresult.defs\n\n\nRunning await app.embed() executes the notebook and results an object encapsulating the notebook visual output and its definitions.\n\nEmbedded notebook outputs are interactive: when you interact with UI elements in an embedded notebook‚Äôs output, any cell referring to the app object is marked for execution, and its internal state is automatically updated. This lets you use notebooks as building blocks or components to create higher-level notebooks.\n\nMultiple levels of nesting are supported: it‚Äôs possible to embed a notebook that in turn embeds another notebook, and marimo will do the right thing.\n\nReturns.\n\nAn object result with two attributes: result.output (visual output of the notebook) and result.defs (a dictionary mapping variable names defined by the notebook to their values).\n\nNext\nCell\nPrevious\nState\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nApp\nApp.embed()"
  },
  {
    "title": "State - marimo",
    "url": "https://docs.marimo.io/api/state.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nState\n\nAdvanced topic!\n\nThis API doc covers reactive state (mo.state), an advanced topic.\n\nYou likely don‚Äôt need reactive state. UI elements already have built-in state, their associated value, which you can access with their value attribute. For example, mo.ui.slider() has a value that is its current position on an interval, while mo.ui.button() has a value that can be configured to count the number of times it has been clicked, or to toggle between True and False. Additionally, interacting with UI elements bound to global variables automatically executes cells that reference those variables, letting you react to changes by just reading their value attributes. This functional paradigm is the preferred way of reacting to UI interactions in marimo. So if you think you need to use mo.state, make sure to first read the guide on interactivity. Chances are, the reactive execution built into UI elements will suffice. (For example, you don‚Äôt need reactive state to handle a button click.)\n\nThat said, here are some signs you might need mo.state:\n\nyou need to maintain historical state related to a UI element that can‚Äôt be computed from its built-in value (e.g., all values the user has ever input into a form)\n\nyou need to synchronize two different UI elements (e.g., so that interacting with either one controls the other)\n\nyou need to introduce cycles across cells\n\nIf one of these cases applies to you, then read on. mo.state lets you make all kinds of interesting applications, but like mutable state in general, it can complicate notebook development and has the potential to introduce hard-to-find bugs.\n\nmarimo.state(value: T, allow_self_loops: bool = False) ‚Üí tuple[marimo._runtime.state.State[T], Callable[[T], NoneType]]\n\nMutable reactive state\n\nThis function takes an initial value and returns:\n\na getter function that reads the state value\n\na setter function to set the state‚Äôs value\n\nWhen you call the setter function and update the state value in one cell, all other cells that read any global variables assigned to the getter will automatically run. By default, the cell that called the setter function won‚Äôt be re-run, even if it references the getter; to allow a state setter to possibly run the caller cell, use the keyword argument allow_self_loops=True.\n\nYou can use this function in conjunction with UIElement on_change handlers to trigger side-effects when an element‚Äôs value is updated. For example, you can tie multiple UI elements to derive their values from shared state.\n\nBasic Usage.\n\nCreate state:\n\nget_count, set_count = mo.state(0)\n\n\nRead the value:\n\nget_count()\n\n\nUpdate the state:\n\nset_count(1)\n\n\nUpdate the state based on the current value:\n\nset_count(lambda value: value + 1)\n\n\nNote: Never mutate the state directly. You should only change its value through its setter.\n\nSynchronizing multiple UI elements.\n\nget_state, set_state = mo.state(0)\n\n# updating the state through the slider will recreate the number (below)\nslider = mo.ui.slider(0, 100, value=get_state(), on_change=set_state)\n\n# updating the state through the number will recreate the slider (above)\nnumber = mo.ui.number(0, 100, value=get_state(), on_change=set_state)\n\n# slider and number are synchronized to have the same value (try it!)\n[slider, number]\n\n\nWarning. Do not store marimo.ui elements in state; doing so can lead to hard-to-diagnose bugs.\n\nArgs:\n\nvalue: initial value of the state\n\nallow_self_loops: if True, if a cell calls a state setter and also references its getter, the caller cell will be re-run; defaults to False.\n\nReturns:\n\ngetter function that retrieves the state value\n\nsetter function that takes a new value, or a function taking the current value as its argument and returning a new value\n\nNext\nApp\nPrevious\nCommand Line Arguments\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nstate()"
  },
  {
    "title": "Command Line Arguments - marimo",
    "url": "https://docs.marimo.io/api/cli_args.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nCommand Line Arguments\n\nUse mo.cli_args to access command-line arguments passed to the notebook. This allows you to pass arguments to the notebook that are not controllable by the user. The arguments will be parsed from the command line when running the notebook as an application with marimo run or marimo edit; they will also be parsed from the command line when running as a script.\n\nSome examples passing command-line arguments to the notebook when running as a script:\n\npython notebook.py -- --arg1 value1 --arg2 value2\n# mo.cli_args() == {'arg1': 'value1', 'arg2': 'value2'}\n\npython notebook.py -- --arg1=10 --arg2=true --arg3\n# mo.cli_args() == {'arg1': 10, 'arg2': True, 'arg3': ''}\n\npython notebook.py -- --arg1 10.5 --arg2 hello --arg2 world\n# mo.cli_args() == {'arg1': 10.5, 'arg2': ['hello', 'world']}\n\n\nIn each example, python can be replaced as marimo run (for running as an app) or marimo edit (for running as a notebook).\n\nmarimo.cli_args() ‚Üí CLIArgs\n\nGet the command line arguments of a marimo notebook.\n\n**Examples**:\n\n\nmarimo edit notebook.py -- -size 10\n\n```python3\n# Access the command line arguments\nsize = mo.cli_args().get(\"size\") or 100\n\nfor i in range(size):\n    print(i)\n```\n\n**Returns**:\n\n- A dictionary containing the command line arguments.\n  This dictionary is read-only and cannot be mutated.\n\n\nQuery Parameters\n\nYou can also access query parameters passed to the notebook using mo.query_params. This allows you to pass arguments to the notebook that can be controlled by the user.\n\nNext\nState\nPrevious\nQuery Parameters\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\ncli_args()"
  },
  {
    "title": "Query Parameters - marimo",
    "url": "https://docs.marimo.io/api/query_params.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nQuery Parameters\n\nUse mo.query_params to access query parameters passed to the notebook. You can also use mo.query_params to set query parameters in order to keep track of state in the URL. This is useful for bookmarking or sharing a particular state of the notebook while running as an application with marimo run.\n\nmarimo.query_params() ‚Üí QueryParams\n\nGet the query parameters of a marimo app.\n\nExamples:\n\nKeep the text input in sync with the URL query parameters.\n\n# In it's own cell\nquery_params = mo.query_params()\n\n# In another cell\nsearch = mo.ui.text(\n    value=query_params[\"search\"] or \"\",\n    on_change=lambda value: query_params.set(\"search\", value),\n)\nsearch\n\n\nYou can also set the query parameters reactively:\n\ntoggle = mo.ui.switch(label=\"Toggle me\")\ntoggle\n\n# In another cell\nquery_params[\"is_enabled\"] = toggle.value\n\n\nReturns:\n\nA QueryParams object containing the query parameters. You can directly interact with this object like a dictionary. If you mutate this object, changes will be persisted to the frontend query parameters and any other cells referencing the query parameters will automatically re-run.\n\nCLI arguments\n\nYou can also access command-line arguments passed to the notebook using mo.cli_args. This allows you to pass arguments to the notebook that are not controllable by the user.\n\nNext\nCommand Line Arguments\nPrevious\nHTML\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nquery_params()"
  },
  {
    "title": "HTML - marimo",
    "url": "https://docs.marimo.io/api/html.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nHTML\n\nAll marimo elements extend the HTML element class.\n\nmarimo.as_html(value: object) ‚Üí Html\n\nConvert a value to HTML that can be embedded into markdown\n\nThis function returns an Html object representing value. Use it to embed values into Markdown or other HTML strings.\n\nExample.\n\nimport matplotlib.pyplot as plt\nplt.plot([1, 2])\naxis = plt.gca()\nmo.md(\n    f\"\"\"\n    Here is a plot:\n\n    {mo.as_html(axis)}\n    \"\"\"\n)\n\n\nArgs.\n\nvalue: An object\n\nReturns.\n\nAn Html object\n\nclass marimo.Html(text: str)\n\nA wrapper around HTML text that can be used as an output.\n\nOutput an Html object as the last expression of a cell to render it in your app.\n\nUse f-strings to embed Html objects as text into other HTML or markdown strings. For example:\n\nhello_world = Html(\"<h2>Hello, World</h2>\")\nHtml(\n    f'''\n    <h1>Hello, Universe!</h1>\n    {hello_world}\n    '''\n)\n\n\nAttributes.\n\ntext: a string of HTML\n\nInitialization Args.\n\ntext: a string of HTML\n\nMethods.\n\nbatch: convert this HTML element into a batched UI element\n\ncallout: wrap this element in a callout\n\ncenter: center this element in the output area\n\nright: right-justify this element in the output area\n\nPUBLIC METHODS\n\nbatch(**elements)\n\n\t\n\nConvert an HTML object with templated text into a UI element.\n\n\n\n\ncenter()\n\n\t\n\nCenter an item.\n\n\n\n\nright()\n\n\t\n\nRight-justify.\n\n\n\n\nleft()\n\n\t\n\nLeft-justify.\n\n\n\n\ncallout([kind])\n\n\t\n\nCreate a callout containing this HTML element.\n\n\n\n\nstyle(style)\n\n\t\n\nWrap an object in a styled container.\n\nPUBLIC DATA ATTRIBUTES:\n\ntext\n\n\t\n\nA string of HTML representing this element.\n\nproperty text: str\n\nA string of HTML representing this element.\n\nbatch(**elements: UIElement[JSONType, object]) ‚Üí batch_plugin\n\nConvert an HTML object with templated text into a UI element.\n\nThis method lets you create custom UI elements that are represented by arbitrary HTML.\n\nExample.\n\nuser_info = mo.md(\n    '''\n    - What's your name?: {name}\n    - When were you born?: {birthday}\n    '''\n).batch(name=mo.ui.text(), birthday=mo.ui.date())\n\n\nIn this example, user_info is a UI Element whose output is markdown and whose value is a dict with keys 'name' and ‚Äòbirthday‚Äô (and values equal to the values of their corresponding elements).\n\nArgs.\n\nelements: the UI elements to interpolate into the HTML template.\n\ncenter() ‚Üí Html\n\nCenter an item.\n\nExample.\n\nmo.md(\"# Hello, world\").center()\n\n\nReturns.\n\nAn Html object.\n\nright() ‚Üí Html\n\nRight-justify.\n\nExample.\n\nmo.md(\"# Hello, world\").right()\n\n\nReturns.\n\nAn Html object.\n\nleft() ‚Üí Html\n\nLeft-justify.\n\nExample.\n\nmo.md(\"# Hello, world\").left()\n\n\nReturns.\n\nAn Html object.\n\ncallout(kind: Literal['neutral', 'danger', 'warn', 'success', 'info'] = 'neutral') ‚Üí Html\n\nCreate a callout containing this HTML element.\n\nA callout wraps your HTML element in a raised box, emphasizing its importance. You can style the callout for different situations with the kind argument.\n\nExamples.\n\nmo.md(\"Hooray, you did it!\").callout(kind=\"success\")\n\nmo.md(\"It's dangerous to go alone!\").callout(kind=\"warn\")\n\nstyle(style: dict[str, Any]) ‚Üí Html\n\nWrap an object in a styled container.\n\nExample.\n\nmo.md(\"...\").style({\"max-height\": \"300px\", \"overflow\": \"auto\"})\n\n\nArgs.\n\nstyles: a dict of CSS styles, keyed by property name\n\nNext\nQuery Parameters\nPrevious\nControl flow\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nas_html()\nHtml\nHtml.text\nHtml.batch()\nHtml.center()\nHtml.right()\nHtml.left()\nHtml.callout()\nHtml.style()"
  },
  {
    "title": "Control flow - marimo",
    "url": "https://docs.marimo.io/api/control_flow.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nControl flow\n\nUse mo.stop to halt execution of a cell, and optionally output an object. This function is useful for validating user input.\n\nmarimo.stop(predicate: bool, output: object | None = None) ‚Üí None\n\nStops execution of a cell when predicate is True\n\nWhen predicate is True, this function raises a MarimoStopError. If uncaught, this exception stops execution of the current cell and makes output its output. Any descendants of this cell that were previously scheduled to run will not be run, and their defs will be removed from program memory.\n\nExample:\n\nmo.stop(form.value is None, mo.md(\"**Submit the form to continue.**\"))\n\n\nRaises:\n\nWhen predicate is True, raises a MarimoStopError.\n\nclass marimo.MarimoStopError(output: object | None)\n\nRaised by marimo.stop to stop execution of a cell and descendants.\n\nInherits from BaseException to prevent accidental capture with except Exception (similar to KeyboardInterrupt)\n\nUse mo.ui.refresh to trigger other cells to run periodically, on a configurable interval (or on click).\n\nclass marimo.ui.refresh(options: list[Union[int, float, str]] | None = None, default_interval: int | float | str | None = None, *, label: str = '', on_change: Callable[[int], None] | None = None)\n\nA refresh button that will auto-refresh its descendants for a given interval.\n\nEach option value can either be a number (int or float) in seconds or a human-readable string (e.g.¬†‚Äú1s‚Äù, ‚Äú10s‚Äù, ‚Äú1m‚Äù).\n\nYou can also combine multiple time units (e.g.¬†‚Äú1m 30s‚Äù).\n\nNote: The refresh interval may not be exact, as it depends on the time it takes to render the content and the time it takes to send the content to the client. Also, due to the buffering of UI element changes, if the downstream cells take a long time to render, the refresh interval may be longer than expected.\n\nExample.\n\nrefresh_button = mo.ui.refresh(\n    options=[\"1m\", \"5m 30s\", \"10m\"],\n    default_interval=\"10m\",\n)\nrefresh_button\n\n\nAttributes.\n\nvalue: The time in seconds since the refresh has been activated.\n\nInitialization Args.\n\noptions: The options for the refresh interval, as a list of human-readable strings or numbers (int or float) in seconds. If no options are provided and default_interval is provided, the options will be generated automatically. If no options are provided and default_interval is not provided, the refresh button will not be displayed with a dropdown for auto-refresh.\n\ndefault_interval: The default value of the refresh interval.\n\nlabel: optional text label for the element\n\non_change: optional callback to run when this element‚Äôs value changes\n\nPUBLIC METHODS\n\nInherited from UIElement\nInherited from Html\n\nPUBLIC DATA ATTRIBUTES:\n\nname\n\n\t\n\nInherited from UIElement\nInherited from Html\nNext\nHTML\nPrevious\nOutputs\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nstop()\nMarimoStopError\nrefresh"
  },
  {
    "title": "Outputs - marimo",
    "url": "https://docs.marimo.io/api/outputs.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nOutputs\nCell outputs\n\nCell outputs\n\nEvery cell in a marimo notebook can have a visual output. When editing, outputs are displayed above cells. When running a notebook as an app, its UI is an arrangement of outputs.\n\nA cell‚Äôs output is by default its last expression. You can also create outputs programmatically, using mo.output.replace() and mo.output.append().\n\nmarimo.output.replace(value: object) ‚Üí None\n\nReplace a cell‚Äôs output with a new one.\n\nCall mo.output.replace() to write to a cell‚Äôs output area, replacing the existing output, if any.\n\nArgs:\n\nvalue: object to output\n\nmarimo.output.append(value: object) ‚Üí None\n\nAppend a new object to a cell‚Äôs output.\n\nCall this function to incrementally build a cell‚Äôs output. Appended outputs are stacked vertically.\n\nArgs:\n\nvalue: object to output\n\nmarimo.output.clear() ‚Üí None\n\nClear a cell‚Äôs output.\n\nmarimo.output.replace_at_index(value: object, idx: int) ‚Üí None\n\nReplace a cell‚Äôs output at the given index with value.\n\nCall this function to replace an existing object in a cell‚Äôs output. If idx is equal to the length of the output, this is equivalent to an append.\n\nArgs:\n\nvalue: new object to replace an existing object\n\nidx: index of output to replace\n\nLast expression replaces existing output\n\nEnding a cell with a non-None expression is the same as calling mo.output.replace() on it: the last expression replaces any output you may have already written. Wrap the last expression in mo.output.append if you want to add to an existing output instead of replacing it.\n\nDisplay cell code in marimo‚Äôs app views\n\nUse mo.show_code() to display the cell‚Äôs code in the output area, which will then be visible in all app views.\n\nmarimo.show_code(output: object | None = None) ‚Üí Html\n\nDisplay an output along with the code of the current cell.\n\nUse mo.show_code to show the code of the current cell along with the cell‚Äôs output. This is useful if you want a cell‚Äôs code to appear in the app preview or when running the notebook as an app with marimo run.\n\nIn the displayed code, all occurrences of mo.show_code(‚Ä¶) will be replaced with ‚Ä¶\n\nShow code that produces the output factorial(5):\n\ndef factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\n\n\nmo.show_code(factorial(5))\n\n\nShow code of a cell, without an output:\n\ndef factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\n\n\nmo.show_code()\n\n\nArgs:\n\noutput: the output to display above the cell‚Äôs code; omit the output to just show the cel‚Äôs code, without an output.\n\nReturns:\n\nHTML of the output arg displayed with its code.\n\nConsole outputs\n\nConsole outputs\n\nText written to stdout/stderr, including print statements and logs, shows up in a console output area below a cell.\n\nBy default, these console outputs don‚Äôt appear when running a marimo notebook as an app. If you do want them to appear in apps, marimo provides utility functions for capturing console outputs and redirecting them to cell outputs.\n\nmarimo.redirect_stdout() ‚Üí Iterator[None]\n\nRedirect stdout to a cell‚Äôs output area.\n\nwith mo.redirect_stdout():\n    # These print statements will show up in the cell's output area\n    print(\"Hello!\")\n    print(\"World!\")\n\nmarimo.redirect_stderr() ‚Üí Iterator[None]\n\nRedirect stderr to a cell‚Äôs output area.\n\nwith mo.redirect_stderr():\n    # These messages will show up in the cell's output area\n    sys.stderr.write(\"Hello!\")\n    sys.stderr.write(\"World!\")\n\nmarimo.capture_stdout() ‚Üí Iterator[StringIO]\n\nCapture standard output.\n\nUse this context manager to capture print statements and other output sent to standard output.\n\nExample.\n\nwith mo.capture_stdout() as buffer:\n    print(\"Hello!\")\noutput = buffer.getvalue()\n\nmarimo.capture_stderr() ‚Üí Iterator[StringIO]\n\nCapture standard error.\n\nUse this context manager to capture output sent to standard error.\n\nExample.\n\nwith mo.capture_stderr() as buffer:\n    sys.stderr.write(\"Hello!\")\noutput = buffer.getvalue()\n\nNext\nControl flow\nPrevious\nStatus\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nCell outputs\nreplace()\nappend()\nclear()\nreplace_at_index()\nDisplay cell code in marimo‚Äôs app views\nshow_code()\nConsole outputs\nredirect_stdout()\nredirect_stderr()\ncapture_stdout()\ncapture_stderr()"
  },
  {
    "title": "Plain text - marimo",
    "url": "https://docs.marimo.io/api/media/plain_text.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nImage\nAudio\nVideo\nPDF\nDownload Media\nPlain text\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nPlain text\nmarimo.plain_text(text: str) ‚Üí Html\n\nText that‚Äôs fixed-width, with spaces and newlines preserved.\n\nArgs.\n\ntext: text to output\n\nReturns.\n\nAn Html object representing the text.\n\nNext\nDiagrams\nPrevious\nDownload Media\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nplain_text()"
  },
  {
    "title": "Download Media - marimo",
    "url": "https://docs.marimo.io/api/media/download.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nImage\nAudio\nVideo\nPDF\nDownload Media\nPlain text\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nDownload Media\nmarimo.download(data: str | bytes | BytesIO | BufferedReader, filename: str | None = None, mimetype: str | None = None, disabled: bool = False, *, label: str = 'Download') ‚Üí Html\n\nShow a download button for a url, bytes, or file-like object.\n\nExamples.\n\ndownload_txt = mo.download(\n    data=\"Hello, world!\".encode(\"utf-8\"),\n    filename=\"hello.txt\",\n    mimetype=\"text/plain\",\n)\n\ndownload_image = mo.download(\n    data=open(\"hello.png\", \"rb\"),\n)\n\n\nArgs.\n\ndata: The data to download. Can be a string (interpreted as a URL), bytes, or a file opened in binary mode.\n\nfilename: The name of the file to download. If not provided, the name will be guessed from the data.\n\nmimetype: The mimetype of the file to download, for example, (e.g.¬†‚Äútext/csv‚Äù, ‚Äúimage/png‚Äù). If not provided, the mimetype will be guessed from the filename.\n\nReturns.\n\nAn Html object for a download button.\n\nNext\nPlain text\nPrevious\nPDF\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\ndownload()"
  },
  {
    "title": "PDF - marimo",
    "url": "https://docs.marimo.io/api/media/pdf.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nImage\nAudio\nVideo\nPDF\nDownload Media\nPlain text\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nPDF\nmarimo.pdf(src: str | io.IOBase, initial_page: int | None = None, width: int | str | None = '100%', height: int | str | None = '70vh', style: dict[str, Any] | None = None) ‚Üí Html\n\nRender a PDF.\n\nThis currently uses the native browser PDF viewer, but may be replaced with a custom viewer.\n\nExample.\n\nmo.pdf(\n    src=\"https://arxiv.org/pdf/2104.00282.pdf\",\n    width=\"100%\",\n    height=\"50vh\",\n)\n\nwith open(\"paper.pdf\", \"rb\") as file:\n    mo.pdf(src=file)\n\n\nArgs.\n\nsrc: the URL of the pdf or a file-like object\n\ninitial_page: the page to open the pdf to. only works if src is a URL\n\nwidth: the width of the pdf\n\nheight: the height of the pdf. for a percentage of the user‚Äôs viewport, use a string like \"50vh\"\n\nstyle: a dictionary of CSS styles to apply to the pdf\n\nReturns.\n\nHtml object\n\nNext\nDownload Media\nPrevious\nVideo\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\npdf()"
  },
  {
    "title": "Video - marimo",
    "url": "https://docs.marimo.io/api/media/video.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nImage\nAudio\nVideo\nPDF\nDownload Media\nPlain text\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nVideo\nmarimo.video(src: str | bytes | BytesIO | BufferedReader, controls: bool = True, muted: bool = False, autoplay: bool = False, loop: bool = False, width: int | None = None, height: int | None = None, rounded: bool = False) ‚Üí Html\n\nRender an video as HTML.\n\nExample.\n\nmo.video(\n    src=\"https://v3.cdnpk.net/videvo_files/video/free/2013-08/large_watermarked/hd0992_preview.mp4\",\n    controls=False,\n)\n\n\nArgs.\n\nsrc: the URL of the video or a file-like object\n\ncontrols: whether to show the controls\n\nmuted: whether to mute the video\n\nautoplay: whether to autoplay the video. the video will only autoplay if muted is True\n\nloop: whether to loop the video\n\nwidth: the width of the video\n\nheight: the height of the video\n\nrounded: whether to round the corners of the video\n\nReturns.\n\nHtml object\n\nNext\nPDF\nPrevious\nAudio\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nvideo()"
  },
  {
    "title": "Audio - marimo",
    "url": "https://docs.marimo.io/api/media/audio.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nImage\nAudio\nVideo\nPDF\nDownload Media\nPlain text\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nAudio\nmarimo.audio(src: str | BytesIO) ‚Üí Html\n\nRender an audio file as HTML.\n\nExample.\n\nmo.audio(\n    src=\"https://upload.wikimedia.org/wikipedia/commons/8/8c/Ivan_Ili%C4%87-Chopin_-_Prelude_no._1_in_C_major.ogg\"\n)\n\nmo.audio(src=\"path/to/local/file.wav\")\n\n\nArgs.\n\nsrc: a path or URL to an audio file, bytes, or a file-like object opened in binary mode\n\nReturns.\n\nAn audio player as an Html object.\n\nNext\nVideo\nPrevious\nImage\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\naudio()"
  },
  {
    "title": "Image - marimo",
    "url": "https://docs.marimo.io/api/media/image.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nImage\nAudio\nVideo\nPDF\nDownload Media\nPlain text\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nImage\nmarimo.image(src: str | bytes | BytesIO | BufferedReader | Any, alt: str | None = None, width: int | None = None, height: int | None = None, rounded: bool = False, style: dict[str, Any] | None = None) ‚Üí Html\n\nRender an image as HTML.\n\nExamples.\n\n# Render an image from a local file\nmo.image(src=\"path/to/image.png\")\n\n# Render an image from a URL\nmo.image(\n    src=\"https://marimo.io/logo.png\",\n    alt=\"Marimo logo\",\n    width=100,\n    height=100,\n    rounded=True,\n)\n\n\nArgs.\n\nsrc: a path or URL to an image, a file-like object (opened in binary mode), or array-like object.\n\nalt: the alt text of the image\n\nwidth: the width of the image in pixels\n\nheight: the height of the image in pixels\n\nrounded: whether to round the corners of the image\n\nstyle: a dictionary of CSS styles to apply to the image\n\nReturns.\n\nHtml object\n\nNext\nAudio\nPrevious\nMedia\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nimage()"
  },
  {
    "title": "Media - marimo",
    "url": "https://docs.marimo.io/api/media/index.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nImage\nAudio\nVideo\nPDF\nDownload Media\nPlain text\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nMedia\n\nUse these functions to embed media in your outputs.\n\nmarimo.image\n\n\t\n\nRender an image as HTML.\n\n\n\n\nmarimo.audio\n\n\t\n\nRender an audio file as HTML.\n\n\n\n\nmarimo.video\n\n\t\n\nRender an video as HTML.\n\n\n\n\nmarimo.pdf\n\n\t\n\nRender a PDF.\n\n\n\n\nmarimo.download\n\n\t\n\nShow a download button for a url, bytes, or file-like object.\n\n\n\n\nmarimo.plain_text\n\n\t\n\nText that‚Äôs fixed-width, with spaces and newlines preserved.\n\nMost of these methods accept URLs (including data URLs), paths to local files, or file-like objects.\n\nNext\nImage\nPrevious\nPlotting\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo"
  },
  {
    "title": "Plotting - marimo",
    "url": "https://docs.marimo.io/api/plotting.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nPlotting\n\nmarimo supports most major plotting libraries, including Matplotlib, Seaborn, Plotly, and Altair. Just import your plotting library of choice and use it as you normally would.\n\nFor more information about plotting, see the plotting guide.\n\nReactive charts with Altair\nDisabling automatic selection\n\nmarimo automatically adds a default selection based on the mark type, however, you may want to customize the selection behavior of your Altair chart. You can do this by setting chart_selection and legend_selection to False, and using .add_params directly on your Altair chart.\n\n# Create an interval selection\nbrush = alt.selection_interval(encodings=[\"x\"])\n\n_chart = (\n    alt.Chart(traces, height=150)\n    .mark_line()\n    .encode(x=\"index:Q\", y=\"value:Q\", color=\"traces:N\")\n    .add_params(brush) # add the selection to the chart\n)\n\nchart = mo.ui.altair_chart(\n    _chart,\n    # disable automatic selection\n    chart_selection=False,\n    legend_selection=False\n)\nchart # You can now access chart.value to get the selected data\n\nmarimo.ui.altair_chart(chart: altair.Chart, chart_selection: Literal['point'] | Literal['interval'] | bool = True, legend_selection: list[str] | bool = True, *, label: str = '', on_change: Callable[[ChartDataType], None] | None = None) ‚Üí None\n\nMake reactive charts with Altair\n\nUse mo.ui.altair_chart to make Altair charts reactive: select chart data with your cursor on the frontend, get them as a dataframe in Python!\n\nFor Polars DataFrames, you can convert to a DataFrame. However the returned DataFrame will still be a DataFrame, so you will need to convert back to a Polars DataFrame if you want.\n\nExample.\n\nimport altair as alt\nimport marimo as mo\nfrom vega_datasets import data\n\nchart = (\n    alt.Chart(data.cars())\n    .mark_point()\n    .encode(\n        x=\"Horsepower\",\n        y=\"Miles_per_Gallon\",\n        color=\"Origin\",\n    )\n)\n\nchart = mo.ui.altair_chart(chart)\n\n# View the chart and selected data as a dataframe\nmo.hstack([chart, chart.value])\n\n\nAttributes.\n\nvalue: a dataframe of the plot data filtered by the selections\n\ndataframe: a dataframe of the unfiltered chart data\n\nselections: the selection of the chart; this may be an interval along the name of an axis or a selection of points\n\nInitialization Args.\n\nchart: An altair.Chart\n\nchart_selection: optional selection type, \"point\", \"interval\", or a bool; defaults to True which will automatically detect the best selection type\n\nlegend_selection: optional list of legend fields (columns) for which to enable selection, True to enable selection for all fields, or False to disable selection entirely\n\nlabel: optional text label for the element\n\non_change: optional callback to run when this element‚Äôs value changes\n\nPerformance and Data Transformers\n\nAltair has a concept of data transformers, which can be used to improve performance.\n\nSuch examples are:\n\npandas Dataframe has to be sanitized and serialized to JSON.\n\nThe rows of a Dataframe might need to be sampled or limited to a maximum number.\n\nThe Dataframe might be written to a .csv or .json file for performance reasons.\n\nBy default, Altair uses the default data transformer, which is the slowest in marimo. It is limited to 5000 rows (although we increase this to 20_000 rows as marimo can handle this). This includes the data inside the HTML that is being sent over the network, which can also be limited by marimo‚Äôs maximum message size.\n\nIt is recommended to use the marimo_csv data transformer, which is the most performant and can handle the largest datasets: it converts the data to a CSV file which is smaller and can be sent over the network. This can handle up to +400,000 rows with no issues.\n\nWhen using mo.ui.altair_chart, we automatically set the data transformer to marimo_csv for you. If you are using Altair directly, you can set the data transformer using the following code:\n\nimport altair as alt\nalt.data_transformers.enable('marimo_csv')\n\nReactive plots with Plotly\nmarimo.ui.plotly(figure: go.Figure, config: Dict[str, Any] | None = None, renderer_name: str | None = None, *, label: str = '', on_change: Callable[[JSONType], None] | None = None) ‚Üí None\n\nMake reactive plots with Plotly.\n\nUse mo.ui.plotly to make plotly plots reactive: select data with your cursor on the frontend, get them as a list of dicts in Python!\n\nExample.\n\nimport plotly.express as px\nimport marimo as mo\nfrom vega_datasets import data\n\n_plot = px.scatter(\n    data.cars(), x=\"Horsepower\", y=\"Miles_per_Gallon\", color=\"Origin\"\n)\n\nplot = mo.ui.plotly(_plot)\n\n# View the plot and selected data\nmo.hstack([plot, plot.value])\n\n\nOr with custom configuration:\n\nplot = mo.ui.plotly(\n    _plot,\n    config={\"staticPlot\": True},\n)\n\n\nAttributes.\n\nvalue: a dict of the plot data\n\nranges: the selection of the plot; this may be an interval along the name of an axis\n\nInitialization Args.\n\nfigure: A plotly.graph_objects.Figure\n\nconfig: optional configuration for the plot This is a dictionary that is passed directly to the plotly. See the plotly documentation for more information: https://plotly.com/javascript/configuration-options/ This takes precedence over the default configuration of the renderer.\n\nrenderer_name: optional renderer to use for the plot. If this is not provided, the default renderer (pio.renderers.default) is used.\n\nlabel: optional text label for the element\n\non_change: optional callback to run when this element‚Äôs value changes\n\nInteractive matplotlib\nmarimo.mpl.interactive(figure: Figure | Axes) ‚Üí Html\n\nRender a matplotlib figure using an interactive viewer.\n\nThe interactive viewer allows you to pan, zoom, and see plot coordinates on mouse hover.\n\nExample:\n\nplt.plot([1, 2])\n# plt.gcf() gets the current figure\nmo.mpl.interactive(plt.gcf())\n\n\nArgs:\n\nfigure: a matplotlib Figure or Axes object\n\nReturns:\n\nAn interactive matplotlib figure as an Html object\n\nOther plotting libraries\n\nYou can use all the popular plotting libraries with marimo. Such as:\n\nMatplotlib\n\nPlotly\n\nSeaborn\n\nBokeh\n\nAltair\n\nHoloViews\n\nhvPlot\n\nLeafmap\n\nNext\nMedia\nPrevious\nTree\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nReactive charts with Altair\nDisabling automatic selection\naltair_chart()\nPerformance and Data Transformers\nReactive plots with Plotly\nplotly()\nInteractive matplotlib\ninteractive()\nOther plotting libraries"
  },
  {
    "title": "Tree - marimo",
    "url": "https://docs.marimo.io/api/layouts/tree.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nAccordion\nCarousel\nCallout\nJustify\nLazy\nPlain\nRoutes\nSidebar\nStacks\nTree\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nTree\nmarimo.tree(items: list[Any] | tuple[Any] | dict[Any, Any], label: str | None = None) ‚Üí Html\n\nRender a nested structure of lists, tuples, or dicts as a tree.\n\nExample.\n\nmo.tree([\"entry\", \"another entry\", {\"key\": [0, 1, 2]}], label=\"A tree.\")\n\n\nArgs.\n\nitems: nested structure of lists, tuples, or dicts\n\nlabel: optional text label for the tree\n\nReturns.\n\nHtml object\n\nNext\nPlotting\nPrevious\nStacks\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\ntree()"
  },
  {
    "title": "Stacks - marimo",
    "url": "https://docs.marimo.io/api/layouts/stacks.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nAccordion\nCarousel\nCallout\nJustify\nLazy\nPlain\nRoutes\nSidebar\nStacks\nTree\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nStacks\nmarimo.hstack(items: Sequence[object], *, justify: Literal['start', 'center', 'end', 'space-between', 'space-around'] = 'space-between', align: Literal['start', 'end', 'center', 'stretch'] | None = None, wrap: bool = False, gap: float = 0.5, widths: Literal['equal'] | Sequence[float] | None = None) ‚Üí Html\n\nStack items horizontally, in a row.\n\nCombine with vstack to build a grid.\n\nExample.\n\n# Build a row of items\nmo.hstack([mo.md(\"...\"), mo.ui.text_area()])\n\n# Build a grid.\nmo.hstack(\n    [\n        mo.vstack([mo.md(\"...\"), mo.ui.text_area()]),\n        mo.vstack([mo.ui.checkbox(), mo.ui.text(), mo.ui.date()]),\n    ]\n)\n\n\nArgs.\n\nitems: A list of items.\n\njustify: Justify items horizontally: start, center, end, space-between, or space-around.\n\nalign: Align items vertically: start, end, center, or stretch.\n\nwrap: Wrap items or not.\n\ngap: Gap between items as a float in rem. 1rem is 16px by default.\n\nwidths: ‚Äúequal‚Äù to give items equal width; or a list of relative widths with same length as items, eg, [1, 2] means the second item is twice as wide as the first; or None for a sensible default\n\nReturns.\n\nAn Html object.\n\nmarimo.vstack(items: Sequence[object], *, align: Literal['start', 'end', 'center', 'stretch'] | None = None, justify: Literal['start', 'center', 'end', 'space-between', 'space-around'] = 'start', gap: float = 0.5, heights: Literal['equal'] | Sequence[float] | None = None) ‚Üí Html\n\nStack items vertically, in a column.\n\nCombine with hstack to build a grid of items.\n\nExample.\n\n# Build a column of items\nmo.vstack([mo.md(\"...\"), mo.ui.text_area()])\n\n# Build a grid.\nmo.vstack(\n    [\n        mo.hstack([mo.md(\"...\"), mo.ui.text_area()]),\n        mo.hstack([mo.ui.checkbox(), mo.ui.text(), mo.ui.date()]),\n    ]\n)\n\n\nArgs.\n\nitems: A list of items.\n\nalign: Align items horizontally: start, end, center, or stretch.\n\njustify: Justify items vertically: start, center, end,\n\ngap: Gap between items as a float in rem. 1rem is 16px by default.\n\nheights: ‚Äúequal‚Äù to give items equal height; or a list of relative heights with same length as items, eg, [1, 2] means the second item is twice as tall as the first; or None for a sensible default\n\nReturns.\n\nAn Html object.\n\nNext\nTree\nPrevious\nSidebar\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nhstack()\nvstack()"
  },
  {
    "title": "Sidebar - marimo",
    "url": "https://docs.marimo.io/api/layouts/sidebar.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nAccordion\nCarousel\nCallout\nJustify\nLazy\nPlain\nRoutes\nSidebar\nStacks\nTree\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nSidebar\nmarimo.sidebar(item: object, footer: object | None = None) ‚Üí None\n\nDisplays content in a sidebar. This is a special layout component that will display the content in a sidebar layout, rather than below/above the cell.\n\nThis component still needs to be the last expression in the cell, in order to display correctly.\n\nYou may use more than one mo.sidebar - they will be displayed in the order they are called.\n\nExamples.\n\nmo.sidebar(\n    [\n        mo.md(\"# marimo\"),\n        mo.nav_menu(\n            {\n                \"#home\": f\"{mo.icon('lucide:home')} Home\",\n                \"#about\": f\"{mo.icon('lucide:user')} About\",\n                \"#contact\": f\"{mo.icon('lucide:phone')} Contact\",\n                \"Links\": {\n                    \"https://twitter.com/marimo_io\": \"Twitter\",\n                    \"https://github.com/marimo-team/marimo\": \"GitHub\",\n                },\n            },\n            orientation=\"vertical\",\n        ),\n    ]\n)\n\n\nArgs.\n\nitem: the content to display in the sidebar\n\nfooter: the content to display at the bottom of the sidebar\n\nReturns.\n\nAn Html object.\n\nNext\nStacks\nPrevious\nRoutes\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nsidebar()"
  },
  {
    "title": "Routes - marimo",
    "url": "https://docs.marimo.io/api/layouts/routes.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nAccordion\nCarousel\nCallout\nJustify\nLazy\nPlain\nRoutes\nSidebar\nStacks\nTree\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nRoutes\nmarimo.routes(routes: dict[str, Callable[[], object] | Callable[[], Coroutine[None, None, object]] | object]) ‚Üí None\n\nRenders a list of routes that are switched based on the URL path.\n\nRoutes currently don‚Äôt support nested routes, or dynamic routes (e.g.¬†#/user/:id). If you‚Äôd like to see these features, please let us know on GitHub: https://github.com/marimo-team/marimo/issues\n\nFor a simple-page-application (SPA) experience, you should use hash-based routing. For example, prefix your routes with #/.\n\nIf you are using a multi-page-application (MPA) with marimo.create_asgi_app, you should use path-based routing. For example, prefix your routes with /.\n\nExamples.\n\nmo.routes(\n    {\n        \"#/\": render_home,\n        \"#/about\": render_about,\n        \"#/contact\": render_contact,\n        mo.routes.CATCH_ALL: render_home,\n    }\n)\n\n\nArgs.\n\nroutes: a dictionary of routes, where the key is the URL path and the value is a function that returns the content to display.\n\nReturns.\n\nAn Html object.\n\nFull example with a sidebar\n\nHere is a marimo program that uses routes with a sidebar.\n\nimport marimo\n\napp = marimo.App()\n\n@app.cell\ndef __():\n   import marimo as mo\n   return\n\n\n@app.cell\ndef __():\n    mo.sidebar(\n        [\n            mo.md(\"# marimo\"),\n            mo.nav_menu(\n                {\n                    \"#/\": f\"{mo.icon('lucide:home')} Home\",\n                    \"#/about\": f\"{mo.icon('lucide:user')} About\",\n                    \"#/contact\": f\"{mo.icon('lucide:phone')} Contact\",\n                    \"Links\": {\n                        \"https://twitter.com/marimo_io\": \"Twitter\",\n                        \"https://github.com/marimo-team/marimo\": \"GitHub\",\n                    },\n                },\n                orientation=\"vertical\",\n            ),\n        ]\n    )\n    return\n\n@app.cell\ndef __():\n    mo.routes({\n        \"#/\": mo.md(\"# Home\"),\n        \"#/about\": mo.md(\"# About\"),\n        \"#/contact\": mo.md(\"# Contact\"),\n        mo.routes.CATCH_ALL: mo.md(\"# Home\"),\n    })\n    return\n\nNext\nSidebar\nPrevious\nPlain\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nroutes()\nFull example with a sidebar"
  },
  {
    "title": "Lazy - marimo",
    "url": "https://docs.marimo.io/api/layouts/lazy.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nAccordion\nCarousel\nCallout\nJustify\nLazy\nPlain\nRoutes\nSidebar\nStacks\nTree\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nLazy\nmarimo.lazy(element: Callable[[], object] | object | Callable[[], Coroutine[None, None, object]], show_loading_indicator: bool = False) ‚Üí None\n\nLazy load a component until it is visible.\n\nUse mo.lazy to defer rendering of an item until it‚Äôs visible. This is useful for loading expensive components only when they are needed, e.g., only when an accordion or tab is opened.\n\nThe argument to mo.lazy can be an object to render lazily, or a function that returns the object to render (that is, functions are lazily evaluated). The function can be synchronous or asynchronous. Using a function is useful when the item to render is the result of a database query or some other expensive operation.\n\nExamples.\n\nCreate a lazy-loaded tab:\n\ntabs = mo.ui.tabs(\n    {\"Overview\": tab1, \"Charts\": mo.lazy(expensive_component)}\n)\n\n\nCreate a lazy-loaded accordion:\n\naccordion = mo.ui.accordion({\"Charts\": mo.lazy(expensive_component)})\n\n\nUsage with async functions:\n\nasync def expensive_component(): ...\n\n\nmo.lazy(expensive_component)\n\n\nInitialization Args.\n\nelement: object or callable that returns content to be lazily loaded\n\nshow_loading_indicator: a boolean, whether to show a loading indicator while the content is being loaded. Default is False.\n\nNext\nPlain\nPrevious\nJustify\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nlazy()"
  },
  {
    "title": "Plain - marimo",
    "url": "https://docs.marimo.io/api/layouts/plain.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nAccordion\nCarousel\nCallout\nJustify\nLazy\nPlain\nRoutes\nSidebar\nStacks\nTree\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nPlain\nmarimo.plain(value: Any) ‚Üí Plain\n\nWrap a value to indicate that it should be displayed without any opinionated formatting.\n\nThis is the best way to opt out of marimo‚Äôs default dataframe rendering.\n\nExample.\n\ndf = data.cars()\nmo.plain(df)\n\n\nArgs.\n\nvalue: Any value\n\nNext\nRoutes\nPrevious\nLazy\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nplain()"
  },
  {
    "title": "Justify - marimo",
    "url": "https://docs.marimo.io/api/layouts/justify.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nAccordion\nCarousel\nCallout\nJustify\nLazy\nPlain\nRoutes\nSidebar\nStacks\nTree\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nJustify\nmarimo.center(item: object) ‚Üí Html\n\nCenter an item.\n\nReturns.\n\nA centered Html object.\n\nmarimo.left(item: object) ‚Üí Html\n\nLeft-justify an item.\n\nReturns.\n\nA left-justified Html object.\n\nmarimo.right(item: object) ‚Üí Html\n\nRight-justify an item.\n\nReturns.\n\nA right-justified Html object.\n\nNext\nLazy\nPrevious\nCallout\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\ncenter()\nleft()\nright()"
  },
  {
    "title": "Carousel - marimo",
    "url": "https://docs.marimo.io/api/layouts/carousel.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nAccordion\nCarousel\nCallout\nJustify\nLazy\nPlain\nRoutes\nSidebar\nStacks\nTree\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nCarousel\nmarimo.carousel(items: Sequence[object]) ‚Üí Html\n\nCreate a carousel of items.\n\nExample.\n\nmo.carousel([mo.md(\"...\"), mo.ui.text_area()])\n\n\nArgs.\n\nitems: A list of items.\n\nReturns.\n\nAn Html object.\n\nNext\nCallout\nPrevious\nAccordion\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\ncarousel()"
  },
  {
    "title": "Callout - marimo",
    "url": "https://docs.marimo.io/api/layouts/callout.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nAccordion\nCarousel\nCallout\nJustify\nLazy\nPlain\nRoutes\nSidebar\nStacks\nTree\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nCallout\nmarimo.callout(value: object, kind: Literal['neutral', 'warn', 'success', 'info', 'danger'] = 'neutral') ‚Üí Html\n\nBuild a callout output.\n\nArgs.\n\nvalue: A value to render in the callout\n\nkind: The kind of callout (affects styling).\n\nReturns.\n\nAn HTML object.\n\nNext\nJustify\nPrevious\nCarousel\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\ncallout()"
  },
  {
    "title": "Accordion - marimo",
    "url": "https://docs.marimo.io/api/layouts/accordion.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nAccordion\nCarousel\nCallout\nJustify\nLazy\nPlain\nRoutes\nSidebar\nStacks\nTree\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nAccordion\nmarimo.accordion(items: dict[str, object], multiple: bool = False, lazy: bool = False) ‚Üí Html\n\nAccordion of one or more items.\n\nExample.\n\nmo.accordion(\n    {\"Tip\": \"Use accordions to let users reveal and hide content.\"}\n)\n\n\nAccordion content can be lazily loaded:\n\nmo.accordion({\"View total\": expensive_item}, lazy=True)\n\n\nwhere expensive_item is the item to render, or a callable that returns the item to render.\n\nArgs.\n\nitems: a dictionary of item names to item content; strings are interpreted as markdown\n\nmultiple: whether to allow multiple items to be open simultaneously\n\nlazy: a boolean, whether to lazily load the accordion content. This is a convenience that wraps each accordion in a mo.lazy component.\n\nReturns.\n\nAn Html object.\n\nNext\nCarousel\nPrevious\nLayouts\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\naccordion()"
  },
  {
    "title": "Custom UI elements - marimo",
    "url": "https://docs.marimo.io/api/inputs/anywidget.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nArray\nBatch\nButton\nCheckbox\nCode Editor\nDataframe\nData Explorer\nDates\nDictionary\nDropdown\nFile\nFile Browser\nForm\nMicrophone\nMultiselect\nNumber\nRadio\nRange Slider\nRefresh\nRun Button\nSlider\nSwitch\nTable\nTabs\nText\nText Area\nCustom UI elements\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nCustom UI elements\n\nBuild custom UI plugins that hook into marimo‚Äôs reactive execution engine by using anywidget.\n\nanywidget is a Python library and specification for creating custom Jupyter-compatible widgets. marimo supports anywidget, allowing you to import anywidget widgets or create your own custom widgets and use them in your notebooks and apps.\n\nImporting a widget\n\nYou can use anywidgets that others have built, such as quak or drawdata, directly in marimo.\n\nHere is an example using drawdata:\n\n# pip install drawdata\nfrom drawdata import ScatterWidget\n\nwidget = mo.ui.anywidget(ScatterWidget())\n\n# In another cell, you can access the widget's value\nwidget.value\n\n# You can also access the widget's specific properties\nwidget.data\nwidget.data_as_polars\n\n\nFor additional examples, see our repo.\n\nCustom widget\nimport anywidget\nimport traitlets\nimport marimo as mo\n\nclass CounterWidget(anywidget.AnyWidget):\n  # Widget front-end JavaScript code\n  _esm = \"\"\"\n    function render({ model, el }) {\n      let getCount = () => model.get(\"count\");\n      let button = document.createElement(\"button\");\n      button.innerHTML = `count is ${getCount()}`;\n      button.addEventListener(\"click\", () => {\n        model.set(\"count\", getCount() + 1);\n        model.save_changes();\n      });\n      model.on(\"change:count\", () => {\n        button.innerHTML = `count is ${getCount()}`;\n      });\n      el.appendChild(button);\n    }\n    export default { render };\n  \"\"\"\n  _css = \"\"\"\n    button {\n      padding: 5px !important;\n      border-radius: 5px !important;\n      background-color: #f0f0f0 !important;\n\n      &:hover {\n        background-color: lightblue !important;\n        color: white !important;\n      }\n    }\n  \"\"\"\n\n  # Stateful property that can be accessed by JavaScript & Python\n  count = traitlets.Int(0).tag(sync=True)\n\nwidget = mo.ui.anywidget(CounterWidget())\n\n\n# In another cell, you can access the widget's value\nwidget.value\n\n# You can also access the widget's specific properties\nwidget.count\n\nclass marimo.ui.anywidget(widget: AnyWidget)\n\nCreate a UIElement from an AnyWidget. This proxies all the widget‚Äôs attributes and methods.\n\nExample.\n\nfrom drawdata import ScatterWidget\nimport marimo as mo\n\nscatter = ScatterWidget()\nscatter = mo.ui.anywidget(scatter)\n\n# In another cell, access its value\n# This works for all widgets\nscatter.value\n\n# Or attributes specifically on the ScatterWidget\nscatter.data_as_pandas\nscatter.data_as_polars\n\n\nAttributes.\n\nvalue: The value of the widget‚Äôs traits as a dictionary.\n\nwidget: The widget being wrapped.\n\nInitialization Args.\n\nwidget: The widget to wrap.\n\nPUBLIC METHODS\n\nInherited from UIElement\nInherited from Html\n\nPUBLIC DATA ATTRIBUTES:\n\nInherited from UIElement\nInherited from Html\nNext\nLayouts\nPrevious\nText Area\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nImporting a widget\nCustom widget\nanywidget"
  },
  {
    "title": "Text Area - marimo",
    "url": "https://docs.marimo.io/api/inputs/text_area.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nArray\nBatch\nButton\nCheckbox\nCode Editor\nDataframe\nData Explorer\nDates\nDictionary\nDropdown\nFile\nFile Browser\nForm\nMicrophone\nMultiselect\nNumber\nRadio\nRange Slider\nRefresh\nRun Button\nSlider\nSwitch\nTable\nTabs\nText\nText Area\nCustom UI elements\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nText Area\nclass marimo.ui.text_area(value: str = '', placeholder: str = '', max_length: int | None = None, disabled: bool = False, debounce: bool | int = True, rows: int | None = None, *, label: str = '', on_change: Callable[[str], None] | None = None, full_width: bool = False)\n\nA text area that is larger than ui.text.\n\nExample.\n\ntext_area = mo.ui.text_area()\n\n\nAttributes.\n\nvalue: a string of the text area contents\n\nInitialization Args.\n\nvalue: initial value of the text area\n\nplaceholder: placeholder text to display when the text area is empty\n\nmax_length: maximum length of input\n\ndisabled: whether the input is disabled\n\ndebounce: whether the input is debounced. If number, debounce by that many milliseconds. If True, then value is only emitted on Ctrl+Enter or when the input loses focus.\n\nrows: number of rows of text to display\n\nlabel: text label for the element\n\non_change: optional callback to run when this element‚Äôs value changes\n\nfull_width: whether the input should take up the full width of its container\n\nPUBLIC METHODS\n\nInherited from UIElement\nInherited from Html\n\nPUBLIC DATA ATTRIBUTES:\n\nInherited from UIElement\nInherited from Html\nNext\nCustom UI elements\nPrevious\nText\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\ntext_area"
  },
  {
    "title": "Layouts - marimo",
    "url": "https://docs.marimo.io/api/layouts/index.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nAccordion\nCarousel\nCallout\nJustify\nLazy\nPlain\nRoutes\nSidebar\nStacks\nTree\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nLayouts\n\nmarimo has higher-order layout functions that you can use to arrange outputs in rows, columns, tables, tabs, and more.\n\nStateless\n\nUnlike elements in marimo.ui, these don‚Äôt have any values associated with them but just render their children in a certain way.\n\nmarimo.accordion\n\n\t\n\nAccordion of one or more items.\n\n\n\n\nmarimo.carousel\n\n\t\n\nCreate a carousel of items.\n\n\n\n\nmarimo.callout\n\n\t\n\nBuild a callout output.\n\n\n\n\nmarimo.center\n\n\t\n\nCenter an item.\n\n\n\n\nmarimo.hstack\n\n\t\n\nStack items horizontally, in a row.\n\n\n\n\nmarimo.lazy\n\n\t\n\nLazy load a component until it is visible.\n\n\n\n\nmarimo.left\n\n\t\n\nLeft-justify an item.\n\n\n\n\nmarimo.nav_menu\n\n\t\n\nNavigation menu component.\n\n\n\n\nmarimo.plain\n\n\t\n\nWrap a value to indicate that it should be displayed without any opinionated formatting.\n\n\n\n\nmarimo.right\n\n\t\n\nRight-justify an item.\n\n\n\n\nmarimo.routes\n\n\t\n\nRenders a list of routes that are switched based on the URL path.\n\n\n\n\nmarimo.sidebar\n\n\t\n\nDisplays content in a sidebar.\n\n\n\n\nmarimo.tree\n\n\t\n\nRender a nested structure of lists, tuples, or dicts as a tree.\n\n\n\n\nmarimo.vstack\n\n\t\n\nStack items vertically, in a column.\n\nStateful\n\nSome elements in marimo.ui are also helpful for layout. These elements do have values associated with them: for example, tabs tracks the selected tab name, and table tracks the selected rows.\n\nmarimo.ui.tabs\n\n\t\n\nDisplay objects in a tabbed view.\n\n\n\n\nmarimo.ui.table\n\n\t\n\nA table component with selectable rows.\n\nNext\nAccordion\nPrevious\nCustom UI elements\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nStateless\nStateful"
  },
  {
    "title": "Text - marimo",
    "url": "https://docs.marimo.io/api/inputs/text.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nArray\nBatch\nButton\nCheckbox\nCode Editor\nDataframe\nData Explorer\nDates\nDictionary\nDropdown\nFile\nFile Browser\nForm\nMicrophone\nMultiselect\nNumber\nRadio\nRange Slider\nRefresh\nRun Button\nSlider\nSwitch\nTable\nTabs\nText\nText Area\nCustom UI elements\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nText\nclass marimo.ui.text(value: str = '', placeholder: str = '', kind: Literal['text', 'password', 'email', 'url'] = 'text', max_length: int | None = None, disabled: bool = False, debounce: bool | int = True, *, label: str = '', on_change: Callable[[str], None] | None = None, full_width: bool = False)\n\nA text input.\n\nExample.\n\ntext = mo.ui.text(value=\"Hello, World!\")\n\n\nAttributes.\n\nvalue: a string of the input‚Äôs contents\n\nInitialization Args.\n\nvalue: default value of text box\n\nplaceholder: placeholder text to display when the text area is empty\n\nkind: input kind, one of \"text\", \"password\", \"email\", or \"url\" defaults to \"text\"\n\nmax_length: maximum length of input\n\ndisabled: whether the input is disabled\n\ndebounce: whether the input is debounced. If number, debounce by that many milliseconds. If True, then value is only emitted on Enter or when the input loses focus.\n\nlabel: text label for the element\n\non_change: optional callback to run when this element‚Äôs value changes\n\nfull_width: whether the input should take up the full width of its container\n\nPUBLIC METHODS\n\nInherited from UIElement\nInherited from Html\n\nPUBLIC DATA ATTRIBUTES:\n\nInherited from UIElement\nInherited from Html\nNext\nText Area\nPrevious\nTabs\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\ntext"
  },
  {
    "title": "Table - marimo",
    "url": "https://docs.marimo.io/api/inputs/table.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nArray\nBatch\nButton\nCheckbox\nCode Editor\nDataframe\nData Explorer\nDates\nDictionary\nDropdown\nFile\nFile Browser\nForm\nMicrophone\nMultiselect\nNumber\nRadio\nRange Slider\nRefresh\nRun Button\nSlider\nSwitch\nTable\nTabs\nText\nText Area\nCustom UI elements\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nTable\nclass marimo.ui.table(data: ListOrTuple[str | int | float | bool | MIME | None] | ListOrTuple[Dict[str, JSONType]] | Dict[str, ListOrTuple[JSONType]] | 'pd.DataFrame' | 'pl.DataFrame' | 'pa.Table', pagination: bool | None = None, selection: Literal['single', 'multi'] | None = 'multi', page_size: int = 10, show_column_summaries: bool = True, format_mapping: Dict[str, str | Callable[..., Any]] | None = None, freeze_columns_left: Sequence[str] | None = None, freeze_columns_right: Sequence[str] | None = None, *, label: str = '', on_change: Callable[[List[JSONType] | Dict[str, ListOrTuple[JSONType]] | 'pd.DataFrame' | 'pl.DataFrame' | 'pa.Table'], None] | None = None, _internal_column_charts_row_limit: int | None = None, _internal_summary_row_limit: int | None = None, _internal_total_rows: int | Literal['too_many'] | None = None)\n\nA table component with selectable rows. Get the selected rows with table.value.\n\nThe table data can be supplied a:\n\na list of dicts, with one dict for each row, keyed by column names;\n\na list of values, representing a table with a single column;\n\na Pandas dataframe; or\n\na Polars dataframe; or\n\nan Ibis dataframe; or\n\na PyArrow table.\n\nExamples.\n\nCreate a table from a list of dicts, one for each row.\n\ntable = mo.ui.table(\n    data=[\n        {\"first_name\": \"Michael\", \"last_name\": \"Scott\"},\n        {\"first_name\": \"Dwight\", \"last_name\": \"Schrute\"},\n    ],\n    label=\"Users\",\n)\n\n\nCreate a table from a single column of data:\n\ntable = mo.ui.table( data=[ {‚Äòfirst_name‚Äô: ‚ÄòMichael‚Äô, ‚Äòlast_name‚Äô: ‚ÄòScott‚Äô}, {‚Äòfirst_name‚Äô: ‚ÄòDwight‚Äô, ‚Äòlast_name‚Äô: ‚ÄòSchrute‚Äô} ], label=‚ÄòUsers‚Äô )\n\nCreate a table from a dataframe:\n\n# df is a Pandas or Polars dataframe\ntable = mo.ui.table(\n    data=df,\n    # use pagination when your table has many rows\n    pagination=True,\n    label=\"Dataframe\",\n)\n\n\nCreate a table with format mapping:\n\n# format_mapping is a dict keyed by column names,\n# with values as formatting functions or strings\ndef format_name(name):\n    return name.upper()\n\n\ntable = mo.ui.table(\n    data=[\n        {\"first_name\": \"Michael\", \"last_name\": \"Scott\", \"age\": 45},\n        {\"first_name\": \"Dwight\", \"last_name\": \"Schrute\", \"age\": 40},\n    ],\n    format_mapping={\n        \"first_name\": format_name,  # Use callable to format first names\n        \"age\": \"{:.1f}\".format,  # Use string format for age\n    },\n    label=\"Format Mapping\",\n)\n\n\nIn each case, access the table data with table.value.\n\nAttributes.\n\nvalue: the selected rows, in the same format as the original data, or None if no selection\n\ndata: the original table data\n\nInitialization Args.\n\ndata: Values can be primitives (str, int, float, bool, or None) or marimo elements: e.g. mo.ui.button(...), mo.md(...), mo.as_html(...), etc. Data can be passed in many ways:\n\nas dataframes: a pandas dataframe, a polars dataframe\n\nas rows: a list of dicts, where each dict represents a row in the table\n\nas columns: a dict keyed by column names, where the value of each entry is a list representing a column\n\nas a single column: a list of values\n\npagination: whether to paginate; if False, all rows will be shown defaults to True when above 10 rows, False otherwise\n\nselection: ‚Äòsingle‚Äô or ‚Äòmulti‚Äô to enable row selection, or None to disable\n\npage_size: the number of rows to show per page. defaults to 10\n\nshow_column_summaries: whether to show column summaries\n\nformat_mapping: a mapping from column names to formatting strings or functions\n\nfreeze_columns_left: list of column names to freeze on the left\n\nfreeze_columns_right: list of column names to freeze on the right\n\nlabel: text label for the element\n\non_change: optional callback to run when this element‚Äôs value changes\n\nPUBLIC METHODS\n\ndownload_as(args)\n\n\t\n\n\n\n\nget_column_summaries(args)\n\n\t\n\n\n\n\nsearch(args)\n\n\t\n\nInherited from UIElement\nInherited from Html\n\nPUBLIC DATA ATTRIBUTES:\n\ndata\n\n\t\n\nInherited from UIElement\nInherited from Html\nNext\nTabs\nPrevious\nSwitch\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\ntable"
  },
  {
    "title": "Tabs - marimo",
    "url": "https://docs.marimo.io/api/inputs/tabs.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nArray\nBatch\nButton\nCheckbox\nCode Editor\nDataframe\nData Explorer\nDates\nDictionary\nDropdown\nFile\nFile Browser\nForm\nMicrophone\nMultiselect\nNumber\nRadio\nRange Slider\nRefresh\nRun Button\nSlider\nSwitch\nTable\nTabs\nText\nText Area\nCustom UI elements\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nTabs\nclass marimo.ui.tabs(tabs: dict[str, object], value: str | None = None, lazy: bool = False, *, label: str = '', on_change: Callable[[str], None] | None = None)\n\nDisplay objects in a tabbed view.\n\nExamples.\n\nShow content in tabs:\n\ntab1 = mo.vstack([\n    \"slider\": mo.ui.slider(1, 10),\n    \"text\": mo.ui.text(),\n    \"date\": mo.ui.date()\n])\n\ntab2 = mo.md(\"You can show arbitrary content in a tab.\")\n\ntabs = mo.ui.tabs({\n    \"Heading 1\": tab1,\n    \"Heading 2\": tab2\n})\n\n\nControl which tab is selected:\n\ntabs = mo.ui.tabs(\n    {\"Heading 1\": tab1, \"Heading 2\": tab2}, value=\"Heading 2\"\n)\n\n\nTab content can be lazily loaded:\n\ntabs = mo.ui.tabs(\n    {\"Heading 1\": tab1, \"Heading 2\": expensive_component}, lazy=True\n)\n\n\nAttributes.\n\nvalue: A string, the name of the selected tab.\n\nInitialization Args.\n\ntabs: a dictionary of tab names to tab content; strings are interpreted as markdown\n\nvalue: the name of the tab to open; defaults to the first tab\n\nlazy: a boolean, whether to lazily load the tab content. This is a convenience that wraps each tab in a mo.lazy component.\n\nPUBLIC METHODS\n\nInherited from UIElement\nInherited from Html\n\nPUBLIC DATA ATTRIBUTES:\n\nInherited from UIElement\nInherited from Html\nNext\nText\nPrevious\nTable\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\ntabs"
  },
  {
    "title": "Switch - marimo",
    "url": "https://docs.marimo.io/api/inputs/switch.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nArray\nBatch\nButton\nCheckbox\nCode Editor\nDataframe\nData Explorer\nDates\nDictionary\nDropdown\nFile\nFile Browser\nForm\nMicrophone\nMultiselect\nNumber\nRadio\nRange Slider\nRefresh\nRun Button\nSlider\nSwitch\nTable\nTabs\nText\nText Area\nCustom UI elements\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nSwitch\nclass marimo.ui.switch(value: bool = False, *, label: str = '', on_change: Callable[[bool], None] | None = None)\n\nA boolean switch.\n\nExample.\n\nswitch = mo.ui.switch()\n\n\nAttributes.\n\nvalue: A boolean, True if checked.\n\nInitialization Args.\n\nvalue: default value, True or False\n\nlabel: text label for the element\n\non_change: optional callback to run when this element‚Äôs value changes\n\nPUBLIC METHODS\n\nInherited from UIElement\nInherited from Html\n\nPUBLIC DATA ATTRIBUTES:\n\nInherited from UIElement\nInherited from Html\nNext\nTable\nPrevious\nSlider\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nswitch"
  },
  {
    "title": "Refresh - marimo",
    "url": "https://docs.marimo.io/api/inputs/refresh.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nArray\nBatch\nButton\nCheckbox\nCode Editor\nDataframe\nData Explorer\nDates\nDictionary\nDropdown\nFile\nFile Browser\nForm\nMicrophone\nMultiselect\nNumber\nRadio\nRange Slider\nRefresh\nRun Button\nSlider\nSwitch\nTable\nTabs\nText\nText Area\nCustom UI elements\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nRefresh\nclass marimo.ui.refresh(options: list[Union[int, float, str]] | None = None, default_interval: int | float | str | None = None, *, label: str = '', on_change: Callable[[int], None] | None = None)\n\nA refresh button that will auto-refresh its descendants for a given interval.\n\nEach option value can either be a number (int or float) in seconds or a human-readable string (e.g.¬†‚Äú1s‚Äù, ‚Äú10s‚Äù, ‚Äú1m‚Äù).\n\nYou can also combine multiple time units (e.g.¬†‚Äú1m 30s‚Äù).\n\nNote: The refresh interval may not be exact, as it depends on the time it takes to render the content and the time it takes to send the content to the client. Also, due to the buffering of UI element changes, if the downstream cells take a long time to render, the refresh interval may be longer than expected.\n\nExample.\n\nrefresh_button = mo.ui.refresh(\n    options=[\"1m\", \"5m 30s\", \"10m\"],\n    default_interval=\"10m\",\n)\nrefresh_button\n\n\nAttributes.\n\nvalue: The time in seconds since the refresh has been activated.\n\nInitialization Args.\n\noptions: The options for the refresh interval, as a list of human-readable strings or numbers (int or float) in seconds. If no options are provided and default_interval is provided, the options will be generated automatically. If no options are provided and default_interval is not provided, the refresh button will not be displayed with a dropdown for auto-refresh.\n\ndefault_interval: The default value of the refresh interval.\n\nlabel: optional text label for the element\n\non_change: optional callback to run when this element‚Äôs value changes\n\nPUBLIC METHODS\n\nInherited from UIElement\nInherited from Html\n\nPUBLIC DATA ATTRIBUTES:\n\nname\n\n\t\n\nInherited from UIElement\nInherited from Html\nNext\nRun Button\nPrevious\nRange Slider\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nrefresh"
  },
  {
    "title": "Range Slider - marimo",
    "url": "https://docs.marimo.io/api/inputs/range_slider.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nArray\nBatch\nButton\nCheckbox\nCode Editor\nDataframe\nData Explorer\nDates\nDictionary\nDropdown\nFile\nFile Browser\nForm\nMicrophone\nMultiselect\nNumber\nRadio\nRange Slider\nRefresh\nRun Button\nSlider\nSwitch\nTable\nTabs\nText\nText Area\nCustom UI elements\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nRange Slider\nclass marimo.ui.range_slider(start: int | float | None = None, stop: int | float | None = None, step: int | float | None = None, value: Sequence[int | float] | None = None, debounce: bool = False, orientation: Literal['horizontal', 'vertical'] = 'horizontal', show_value: bool = False, steps: Sequence[int | float] | None = None, *, label: str = '', on_change: Callable[[Sequence[int | float]], None] | None = None, full_width: bool = False)\n\nA numeric slider for specifying a range over an interval.\n\nExample.\n\nrange_slider = mo.ui.range_slider(start=1, stop=10, step=2, value=[2, 6])\n\n\nOr from a dataframe series:\n\nrange_slider = mo.ui.range_slider.from_series(df[\"column_name\"])\n\n\nAttributes.\n\nvalue: the current range value of the slider\n\nstart: the minimum value of the interval\n\nstop: the maximum value of the interval\n\nstep: the slider increment\n\nsteps: list of steps\n\nInitialization Args.\n\nstart: the minimum value of the interval\n\nstop: the maximum value of the interval\n\nstep: the slider increment\n\nvalue: default value\n\ndebounce: whether to debounce the slider to only send the value on mouse-up or drag-end\n\norientation: the orientation of the slider, either ‚Äúhorizontal‚Äù or ‚Äúvertical‚Äù\n\nshow_value: whether to display the current value of the slider\n\nsteps: list of steps to customize the slider, mutually exclusive with start, stop, and step\n\nlabel: text label for the element\n\non_change: optional callback to run when this element‚Äôs value changes\n\nfull_width: whether the input should take up the full width of its container\n\nPUBLIC METHODS\n\nfrom_series(series, **kwargs)\n\n\t\n\nCreate a range slider from a dataframe series.\n\nInherited from UIElement\nInherited from Html\n\nPUBLIC DATA ATTRIBUTES:\n\nInherited from UIElement\nInherited from Html\nstatic from_series(series: DataFrameSeries, **kwargs: Any) ‚Üí range_slider\n\nCreate a range slider from a dataframe series.\n\nNext\nRefresh\nPrevious\nRadio\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nrange_slider\nrange_slider.from_series()"
  },
  {
    "title": "Run Button - marimo",
    "url": "https://docs.marimo.io/api/inputs/run_button.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nArray\nBatch\nButton\nCheckbox\nCode Editor\nDataframe\nData Explorer\nDates\nDictionary\nDropdown\nFile\nFile Browser\nForm\nMicrophone\nMultiselect\nNumber\nRadio\nRange Slider\nRefresh\nRun Button\nSlider\nSwitch\nTable\nTabs\nText\nText Area\nCustom UI elements\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nRun Button\nclass marimo.ui.run_button(kind: Literal['neutral', 'success', 'warn', 'danger'] = 'neutral', disabled: bool = False, tooltip: str | None = None, *, label: str = 'click to run', on_change: Callable[[Any], None] | None = None, full_width: bool = False)\n\nA button that can be used to trigger computation.\n\nExample.\n\n# a button that when clicked will have its value set to True;\n# any cells referencing that button will automatically run.\nbutton = mo.ui.run_button()\nbutton\n\nslider = mo.ui.slider(1, 10)\nslider\n\n# if the button hasn't been clicked, don't run.\nmo.stop(not button.value)\n\nslider.value\n\n\nWhen clicked, run_button‚Äôs value is set to True, and any cells referencing it are run. After those cells are run, run_button‚Äôs value will automatically be set back to False as long as automatic execution is enabled.\n\nAttributes.\n\nvalue: the value of the button; True when clicked, and reset to False after cells referencing the button finish running (when automatic execution is enabled).\n\nInitialization Args.\n\nkind: ‚Äòneutral‚Äô, ‚Äòsuccess‚Äô, ‚Äòwarn‚Äô, or ‚Äòdanger‚Äô\n\ndisabled: whether the button is disabled\n\ntooltip: a tooltip to display for the button\n\nlabel: text label for the element\n\non_change: optional callback to run when this element‚Äôs value changes\n\nfull_width: whether the input should take up the full width of its container\n\nPUBLIC METHODS\n\nInherited from UIElement\nInherited from Html\n\nPUBLIC DATA ATTRIBUTES:\n\nInherited from UIElement\nInherited from Html\nNext\nSlider\nPrevious\nRefresh\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nrun_button"
  },
  {
    "title": "Slider - marimo",
    "url": "https://docs.marimo.io/api/inputs/slider.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nArray\nBatch\nButton\nCheckbox\nCode Editor\nDataframe\nData Explorer\nDates\nDictionary\nDropdown\nFile\nFile Browser\nForm\nMicrophone\nMultiselect\nNumber\nRadio\nRange Slider\nRefresh\nRun Button\nSlider\nSwitch\nTable\nTabs\nText\nText Area\nCustom UI elements\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nSlider\nclass marimo.ui.slider(start: int | float | None = None, stop: int | float | None = None, step: int | float | None = None, value: int | float | None = None, debounce: bool = False, orientation: Literal['horizontal', 'vertical'] = 'horizontal', show_value: bool = False, steps: Sequence[int | float] | None = None, *, label: str = '', on_change: Callable[[int | float | None], None] | None = None, full_width: bool = False)\n\nA numeric slider over an interval.\n\nExample.\n\nslider = mo.ui.slider(start=1, stop=10, step=2)\n\n\nOr from a dataframe series:\n\nslider = mo.ui.slider.from_series(df[\"column_name\"])\n\n\nAttributes.\n\nvalue: the current numeric value of the slider\n\nstart: the minimum value of the interval\n\nstop: the maximum value of the interval\n\nstep: the slider increment\n\nsteps: list of steps\n\nInitialization Args.\n\nstart: the minimum value of the interval\n\nstop: the maximum value of the interval\n\nstep: the slider increment\n\nvalue: default value\n\ndebounce: whether to debounce the slider to only send the value on mouse-up or drag-end\n\norientation: the orientation of the slider, either ‚Äúhorizontal‚Äù or ‚Äúvertical‚Äù\n\nshow_value: whether to display the current value of the slider\n\nsteps: list of steps to customize the slider, mutually exclusive with start, stop, and step\n\nlabel: text label for the element\n\non_change: optional callback to run when this element‚Äôs value changes\n\nfull_width: whether the input should take up the full width of its container\n\nPUBLIC METHODS\n\nfrom_series(series, **kwargs)\n\n\t\n\nCreate a slider from a dataframe series.\n\nInherited from UIElement\nInherited from Html\n\nPUBLIC DATA ATTRIBUTES:\n\nInherited from UIElement\nInherited from Html\nstatic from_series(series: DataFrameSeries, **kwargs: Any) ‚Üí slider\n\nCreate a slider from a dataframe series.\n\nNext\nSwitch\nPrevious\nRun Button\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nslider\nslider.from_series()"
  },
  {
    "title": "Radio - marimo",
    "url": "https://docs.marimo.io/api/inputs/radio.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nArray\nBatch\nButton\nCheckbox\nCode Editor\nDataframe\nData Explorer\nDates\nDictionary\nDropdown\nFile\nFile Browser\nForm\nMicrophone\nMultiselect\nNumber\nRadio\nRange Slider\nRefresh\nRun Button\nSlider\nSwitch\nTable\nTabs\nText\nText Area\nCustom UI elements\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nRadio\nclass marimo.ui.radio(options: Sequence[str] | dict[str, Any], value: str | None = None, inline: bool = False, *, label: str = '', on_change: Callable[[Any], None] | None = None)\n\nA radio group.\n\nExample.\n\nradiogroup = mo.ui.radio(\n    options=[\"a\", \"b\", \"c\"], value=\"a\", label=\"choose one\"\n)\n\nradiogroup = mo.ui.radio(\n    options={\"one\": 1, \"two\": 2, \"three\": 3},\n    value=\"one\",\n    label=\"pick a number\",\n)\n\n\nOr from a dataframe series:\n\nradiogroup = mo.ui.radio.from_series(df[\"column_name\"])\n\n\nAttributes.\n\nvalue: the value of the selected radio option\n\noptions: a dict mapping option name to option value\n\nInitialization Args.\n\noptions: sequence of text options, or dict mapping option name to option value\n\nvalue: default option name, if None, starts with nothing checked\n\nlabel: optional text label for the element\n\non_change: optional callback to run when this element‚Äôs value changes\n\nPUBLIC METHODS\n\nfrom_series(series, **kwargs)\n\n\t\n\nCreate a radio group from a dataframe series.\n\nInherited from UIElement\nInherited from Html\n\nPUBLIC DATA ATTRIBUTES:\n\nInherited from UIElement\nInherited from Html\nstatic from_series(series: DataFrameSeries, **kwargs: Any) ‚Üí radio\n\nCreate a radio group from a dataframe series.\n\nNext\nRange Slider\nPrevious\nNumber\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nradio\nradio.from_series()"
  },
  {
    "title": "Multiselect - marimo",
    "url": "https://docs.marimo.io/api/inputs/multiselect.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nArray\nBatch\nButton\nCheckbox\nCode Editor\nDataframe\nData Explorer\nDates\nDictionary\nDropdown\nFile\nFile Browser\nForm\nMicrophone\nMultiselect\nNumber\nRadio\nRange Slider\nRefresh\nRun Button\nSlider\nSwitch\nTable\nTabs\nText\nText Area\nCustom UI elements\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nMultiselect\nclass marimo.ui.multiselect(options: Sequence[str] | dict[str, Any], value: Sequence[str] | None = None, *, label: str = '', on_change: Callable[[List[object]], None] | None = None, full_width: bool = False, max_selections: int | None = None)\n\nA multiselect input.\n\nExample.\n\nmultiselect = mo.ui.multiselect(\n    options=[\"a\", \"b\", \"c\"], label=\"choose some options\"\n)\n\n\nOr from a dataframe series:\n\nmultiselect = mo.ui.multiselect.from_series(df[\"column_name\"])\n\n\nAttributes.\n\nvalue: the selected values, or None if no selection\n\noptions: a dict mapping option name to option value\n\nInitialization Args.\n\noptions: sequence of text options, or dict mapping option name to option value\n\nvalue: a list of initially selected options\n\nlabel: text label for the element\n\non_change: optional callback to run when this element‚Äôs value changes\n\nfull_width: whether the input should take up the full width of its container\n\nmax_selections: maximum number of items that can be selected\n\nPUBLIC METHODS\n\nfrom_series(series, **kwargs)\n\n\t\n\nCreate a multiselect from a dataframe series.\n\nInherited from UIElement\nInherited from Html\n\nPUBLIC DATA ATTRIBUTES:\n\nInherited from UIElement\nInherited from Html\nstatic from_series(series: DataFrameSeries, **kwargs: Any) ‚Üí multiselect\n\nCreate a multiselect from a dataframe series.\n\nNext\nNumber\nPrevious\nMicrophone\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nmultiselect\nmultiselect.from_series()"
  },
  {
    "title": "Number - marimo",
    "url": "https://docs.marimo.io/api/inputs/number.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nArray\nBatch\nButton\nCheckbox\nCode Editor\nDataframe\nData Explorer\nDates\nDictionary\nDropdown\nFile\nFile Browser\nForm\nMicrophone\nMultiselect\nNumber\nRadio\nRange Slider\nRefresh\nRun Button\nSlider\nSwitch\nTable\nTabs\nText\nText Area\nCustom UI elements\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nNumber\nclass marimo.ui.number(start: float, stop: float, step: float | None = None, value: float | None = None, debounce: bool = False, *, label: str = '', on_change: Callable[[int | float | None], None] | None = None, full_width: bool = False)\n\nA number picker over an interval.\n\nExample.\n\nnumber = mo.ui.number(start=1, stop=10, step=2)\n\n\nOr from a dataframe series:\n\nnumber = mo.ui.number.from_series(df[\"column_name\"])\n\n\nAttributes.\n\nvalue: the value of the number, possibly None\n\nstart: the minimum value of the interval\n\nstop: the maximum value of the interval\n\nstep: the number increment\n\nInitialization Args.\n\nstart: the minimum value of the interval\n\nstop: the maximum value of the interval\n\nstep: the number increment\n\nvalue: default value\n\ndebounce: whether to debounce (rate-limit) value updates from the frontend\n\nlabel: text label for the element\n\non_change: optional callback to run when this element‚Äôs value changes\n\nfull_width: whether the input should take up the full width of its container\n\nPUBLIC METHODS\n\nfrom_series(series, **kwargs)\n\n\t\n\nCreate a number picker from a dataframe series.\n\nInherited from UIElement\nInherited from Html\n\nPUBLIC DATA ATTRIBUTES:\n\nInherited from UIElement\nInherited from Html\nstatic from_series(series: DataFrameSeries, **kwargs: Any) ‚Üí number\n\nCreate a number picker from a dataframe series.\n\nNext\nRadio\nPrevious\nMultiselect\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nnumber\nnumber.from_series()"
  },
  {
    "title": "Microphone - marimo",
    "url": "https://docs.marimo.io/api/inputs/microphone.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nArray\nBatch\nButton\nCheckbox\nCode Editor\nDataframe\nData Explorer\nDates\nDictionary\nDropdown\nFile\nFile Browser\nForm\nMicrophone\nMultiselect\nNumber\nRadio\nRange Slider\nRefresh\nRun Button\nSlider\nSwitch\nTable\nTabs\nText\nText Area\nCustom UI elements\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nMicrophone\nclass marimo.ui.microphone(*, label: str = '', on_change: Callable[[BytesIO], None] | None = None)\n\nAn audio recorder element.\n\nUse mo.ui.microphone to record audio via the user‚Äôs browser. The user must grant permission to use the microphone.\n\nExample.\n\nmic = mo.ui.microphone()\nmic\n\nmo.audio(mic.value)\n\n\nAttributes.\n\nvalue: The blob of the recorded audio, as an io.BytesIO object.\n\nInitialization Args.\n\nlabel: optional text label for the element\n\non_change: optional callback to run when this element‚Äôs value changes\n\nPUBLIC METHODS\n\nInherited from UIElement\nInherited from Html\n\nPUBLIC DATA ATTRIBUTES:\n\nname\n\n\t\n\nInherited from UIElement\nInherited from Html\nNext\nMultiselect\nPrevious\nForm\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nmicrophone"
  },
  {
    "title": "File - marimo",
    "url": "https://docs.marimo.io/api/inputs/file.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nArray\nBatch\nButton\nCheckbox\nCode Editor\nDataframe\nData Explorer\nDates\nDictionary\nDropdown\nFile\nFile Browser\nForm\nMicrophone\nMultiselect\nNumber\nRadio\nRange Slider\nRefresh\nRun Button\nSlider\nSwitch\nTable\nTabs\nText\nText Area\nCustom UI elements\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nFile\nclass marimo.ui.file(filetypes: Sequence[str] | None = None, multiple: bool = False, kind: Literal['button', 'area'] = 'button', *, label: str = '', on_change: Callable[[Sequence[FileUploadResults]], None] | None = None)\n\nA button or drag-and-drop area to upload a file.\n\nOnce a file is uploaded, the UI element‚Äôs value is a list of namedtuples (name, contents), where name is the filename and contents is the contents of the file. Alternatively, use the methods name(index: int = 0) and contents(index: int = 0) to retrieve the name or contents of the file at a specified index.\n\nUse the kind argument to switch between a button and a drag-and-drop area.\n\nThe maximum file size is 100MB.\n\nExamples.\n\nUploading a single file:\n\nf = mo.ui.file()\n\n# access the uploaded file's name\nf.value[0].name\n# or\nf.name()\n\n# access the uploaded file's contents\nf.value[0].contents\n# or\nf.contents()\n\n\nUploading multiple files, accepting only .png and .jpg extensions:\n\nf = mo.ui.file(filetypes=[\".png\", \".jpg\"], multiple=True)\n\n# access an uploaded file's name\nf.value[index].name\n# or\nf.name(index)\n\n# access the uploaded file's contents\nf.value[index].contents\n# or\nf.contents(index)\n\n\nAttributes.\n\nvalue: a sequence of FileUploadResults, which have string name and bytes contents fields\n\nMethods.\n\nname(self, index: int = 0) -> Optional[str]: Get the name of the uploaded file at index.\n\ncontents(self, index: int = 0) -> Optional[bytes]: Get the contents of the uploaded file at index.\n\nInitialization Args.\n\nfiletypes: the file types accepted; for example, filetypes=[\".png\", \".jpg\"]. If None, all files are accepted. In addition to extensions, you may provide \"audio/*\", \"video/*\", or \"image/*\" to accept any audio, video, or image file.\n\nmultiple: if True, allow the user to upload multiple files\n\nkind: \"button\" or \"area\"\n\nlabel: text label for the element\n\non_change: optional callback to run when this element‚Äôs value changes\n\nPUBLIC METHODS\n\nname([index])\n\n\t\n\nGet file name at index.\n\n\n\n\ncontents([index])\n\n\t\n\nGet file contents at index.\n\nInherited from UIElement\nInherited from Html\n\nPUBLIC DATA ATTRIBUTES:\n\nInherited from UIElement\nInherited from Html\nname(index: int = 0) ‚Üí str | None\n\nGet file name at index.\n\ncontents(index: int = 0) ‚Üí bytes | None\n\nGet file contents at index.\n\nNext\nFile Browser\nPrevious\nDropdown\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nfile\nfile.name()\nfile.contents()"
  },
  {
    "title": "Form - marimo",
    "url": "https://docs.marimo.io/api/inputs/form.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nArray\nBatch\nButton\nCheckbox\nCode Editor\nDataframe\nData Explorer\nDates\nDictionary\nDropdown\nFile\nFile Browser\nForm\nMicrophone\nMultiselect\nNumber\nRadio\nRange Slider\nRefresh\nRun Button\nSlider\nSwitch\nTable\nTabs\nText\nText Area\nCustom UI elements\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nForm\nclass marimo.ui.form(element: UIElement[S, T], *, bordered: bool = True, loading: bool = False, submit_button_label: str = 'Submit', submit_button_tooltip: str | None = None, submit_button_disabled: bool = False, clear_on_submit: bool = False, show_clear_button: bool = False, clear_button_label: str = 'Clear', clear_button_tooltip: str | None = None, validate: Callable[[Mapping[str, Mapping[str, JSONType] | Sequence[JSONType] | str | int | float | bool | MIME | None] | Sequence[Mapping[str, JSONType] | Sequence[JSONType] | str | int | float | bool | MIME | None] | str | int | float | bool | MIME | None], str | None] | None = None, label: str = '', on_change: Callable[[T | None], None] | None = None)\n\nA submittable form linked to a UIElement.\n\nUse a form to prevent sending UI element values to Python until a button is clicked.\n\nThe value of a form is the value of the underlying element the last time the form was submitted.\n\nExample.\n\n# Create a form with chaining\nform = mo.ui.slider(1, 100).form()\n\n# Create a form with multiple elements\nform = (\n    mo.md('''\n    **Your form.**\n\n    {name}\n\n    {date}\n''')\n    .batch(\n        name=mo.ui.text(label=\"name\"),\n        date=mo.ui.date(label=\"date\"),\n    )\n    .form(show_clear_button=True, bordered=False)\n)\n\n# Instantiate a form directly\nform = mo.ui.form(element=mo.ui.slider(1, 100))\n\n\nAttributes.\n\nvalue: the value of the wrapped element when the form‚Äôs submit button was last clicked\n\nelement: a copy of the wrapped element\n\nInitialization Args.\n\nelement: the element to wrap\n\nbordered: whether the form should have a border\n\nloading: whether the form should be in a loading state\n\nsubmit_button_label: the label of the submit button\n\nsubmit_button_tooltip: the tooltip of the submit button\n\nsubmit_button_disabled: whether the submit button should be disabled\n\nclear_on_submit: whether the form should clear its contents after submitting\n\nshow_clear_button: whether the form should show a clear button\n\nclear_button_label: the label of the clear button\n\nclear_button_tooltip: the tooltip of the clear button\n\nvalidate: a function that takes the form‚Äôs value and returns an error message if the value is invalid, or None if the value is valid\n\nlabel: text label for the form\n\non_change: optional callback to run when this element‚Äôs value changes\n\nPUBLIC METHODS\n\nInherited from UIElement\nInherited from Html\n\nPUBLIC DATA ATTRIBUTES:\n\nInherited from UIElement\nInherited from Html\nNext\nMicrophone\nPrevious\nFile Browser\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nform"
  },
  {
    "title": "File Browser - marimo",
    "url": "https://docs.marimo.io/api/inputs/file_browser.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nArray\nBatch\nButton\nCheckbox\nCode Editor\nDataframe\nData Explorer\nDates\nDictionary\nDropdown\nFile\nFile Browser\nForm\nMicrophone\nMultiselect\nNumber\nRadio\nRange Slider\nRefresh\nRun Button\nSlider\nSwitch\nTable\nTabs\nText\nText Area\nCustom UI elements\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nFile Browser\nclass marimo.ui.file_browser(initial_path: str = '', filetypes: Sequence[str] | None = None, selection_mode: str = 'file', multiple: bool = True, restrict_navigation: bool = False, *, label: str = '', on_change: Callable[[Sequence[FileInfo]], None] | None = None)\n\nFile browser for browsing and selecting server-side files.\n\nExamples.\n\nSelecting multiple files:\n\nfile_browser = mo.ui.file_browser(\n    initial_path=\"path/to/dir\", multiple=True\n)\n\n# Access the selected file path(s):\nfile_browser.path(index)\n\n# Get name of selected file(s)\nfile_browser.name(index)\n\n\nAttributes.\n\nvalue: a sequence of file paths representing selected files.\n\nInitialization Args.\n\ninitial_path: starting directory, default current working directory.\n\nfiletypes: the file types to display in each directory; for example, filetypes=[\".txt\", \".csv\"]. If None, all files are displayed.\n\nselection_mode: either ‚Äúfile‚Äù or ‚Äúdirectory‚Äù.\n\nmultiple: if True, allow the user to select multiple files.\n\nrestrict_navigation: if True, prevent the user from navigating any level above the given path.\n\nlabel: text label for the element\n\non_change: optional callback to run when this element‚Äôs value changes\n\nPUBLIC METHODS\n\nlist_directory(args)\n\n\t\n\n\n\n\nname([index])\n\n\t\n\nGet file name at index.\n\n\n\n\npath([index])\n\n\t\n\nGet file path at index.\n\nInherited from UIElement\nInherited from Html\n\nPUBLIC DATA ATTRIBUTES:\n\nInherited from UIElement\nInherited from Html\nname(index: int = 0) ‚Üí str | None\n\nGet file name at index.\n\npath(index: int = 0) ‚Üí str | None\n\nGet file path at index.\n\nNext\nForm\nPrevious\nFile\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nfile_browser\nfile_browser.name()\nfile_browser.path()"
  },
  {
    "title": "Dropdown - marimo",
    "url": "https://docs.marimo.io/api/inputs/dropdown.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nArray\nBatch\nButton\nCheckbox\nCode Editor\nDataframe\nData Explorer\nDates\nDictionary\nDropdown\nFile\nFile Browser\nForm\nMicrophone\nMultiselect\nNumber\nRadio\nRange Slider\nRefresh\nRun Button\nSlider\nSwitch\nTable\nTabs\nText\nText Area\nCustom UI elements\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nDropdown\nclass marimo.ui.dropdown(options: Sequence[str] | dict[str, Any], value: str | None = None, allow_select_none: bool | None = None, *, label: str = '', on_change: Callable[[Any], None] | None = None, full_width: bool = False)\n\nA dropdown menu.\n\nExample.\n\ndropdown = mo.ui.dropdown(\n    options=[\"a\", \"b\", \"c\"], value=\"a\", label=\"choose one\"\n)\n\ndropdown = mo.ui.dropdown(\n    options={\"one\": 1, \"two\": 2, \"three\": 3},\n    value=\"one\",\n    label=\"pick a number\",\n)\n\n\nOr from a dataframe series:\n\ndropdown = mo.ui.dropdown.from_series(df[\"column_name\"])\n\n\nAttributes.\n\nvalue: the selected value, or None if no selection\n\noptions: a dict mapping option name to option value\n\nselected_key: the selected option‚Äôs key, or None if no selection\n\nInitialization Args.\n\noptions: sequence of text options, or dict mapping option name to option value\n\nvalue: default option name\n\nallow_select_none: whether to include special option (\"--\") for a None value; when None, defaults to True when value is None\n\nlabel: text label for the element\n\non_change: optional callback to run when this element‚Äôs value changes\n\nfull_width: whether the input should take up the full width of its container\n\nPUBLIC METHODS\n\nfrom_series(series, **kwargs)\n\n\t\n\nCreate a dropdown from a dataframe series.\n\nInherited from UIElement\nInherited from Html\n\nPUBLIC DATA ATTRIBUTES:\n\nselected_key\n\n\t\n\nThe selected option‚Äôs key, or None if no selection.\n\nInherited from UIElement\nInherited from Html\nstatic from_series(series: DataFrameSeries, **kwargs: Any) ‚Üí dropdown\n\nCreate a dropdown from a dataframe series.\n\nproperty selected_key: str | None\n\nThe selected option‚Äôs key, or None if no selection.\n\nNext\nFile\nPrevious\nDictionary\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\ndropdown\ndropdown.from_series()\ndropdown.selected_key"
  },
  {
    "title": "Dates - marimo",
    "url": "https://docs.marimo.io/api/inputs/dates.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nArray\nBatch\nButton\nCheckbox\nCode Editor\nDataframe\nData Explorer\nDates\nDictionary\nDropdown\nFile\nFile Browser\nForm\nMicrophone\nMultiselect\nNumber\nRadio\nRange Slider\nRefresh\nRun Button\nSlider\nSwitch\nTable\nTabs\nText\nText Area\nCustom UI elements\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nDates\nSingle date\nclass marimo.ui.date(start: dt.date | str | None = None, stop: dt.date | str | None = None, value: dt.date | str | None = None, *, label: str = '', on_change: Callable[[dt.date], None] | None = None, full_width: bool = False)\n\nA date picker with an optional start and stop date.\n\nExample.\n\n# initialize the date picker at a given date\ndate = mo.ui.date(value=\"2022-01-01\")\n\n# when value is omitted, date picker initializes with today's date\ndate = mo.ui.date()\n\n# create a date picker with bounds\ndate = mo.ui.date(\n    value=\"2022-06-01\",\n    start=\"2022-01-01\",\n    stop=\"2022-12-31\",\n)\n\n\nOr from a dataframe series:\n\ndate = mo.ui.date.from_series(df[\"column_name\"])\n\n\nAttributes.\n\nvalue: a str (YYYY-MM-DD) or datetime.date object of the chosen date\n\nstart: the start date\n\nstop: the stop date\n\nInitialization Args.\n\nstart: minimum date selectable; if None, defaults to 01-01-0001\n\nstop: maximum date selectable; if None, defaults to 12-31-9999\n\nvalue: default date\n\nif None and start and stop are None, defaults to the current day;\n\nelse if None and start is not None, defaults to start;\n\nelse if None and stop is not None, defaults to stop\n\nlabel: text label for the element\n\non_change: optional callback to run when this element‚Äôs value changes\n\nfull_width: whether the input should take up the full width of its container\n\nPUBLIC METHODS\n\nfrom_series(series, **kwargs)\n\n\t\n\nCreate a date picker from a dataframe series.\n\nInherited from UIElement\nInherited from Html\n\nPUBLIC DATA ATTRIBUTES:\n\nDATE_FORMAT\n\n\t\n\n\n\n\nstart\n\n\t\n\n\n\n\nstop\n\n\t\n\nInherited from UIElement\nInherited from Html\nstatic from_series(series: DataFrameSeries, **kwargs: Any) ‚Üí date\n\nCreate a date picker from a dataframe series.\n\nDate and time\nclass marimo.ui.datetime(start: dt.datetime | str | None = None, stop: dt.datetime | str | None = None, value: dt.datetime | str | None = None, *, label: str | None = None, on_change: Callable[[dt.datetime | None], None] | None = None, full_width: bool = False)\n\nA datetime picker over an interval.\n\nExample.\n\ndatetime_picker = mo.ui.datetime(\n    start=dt.datetime(2023, 1, 1),\n    stop=dt.datetime(2023, 12, 31, 23, 59, 59),\n)\n\n\nOr from a dataframe series:\n\ndatetime_picker = mo.ui.datetime.from_series(df[\"datetime_column\"])\n\n\nAttributes.\n\nvalue: the selected datetime, possibly None\n\nstart: the minimum selectable datetime\n\nstop: the maximum selectable datetime\n\nInitialization Args.\n\nstart: the minimum selectable datetime (default: minimum datetime)\n\nstop: the maximum selectable datetime (default: maximum datetime)\n\nvalue: default value\n\nlabel: text label for the element\n\non_change: optional callback to run when this element‚Äôs value changes\n\nfull_width: whether the input should take up the full width of its container\n\nPUBLIC METHODS\n\nfrom_series(series, **kwargs)\n\n\t\n\nCreate a datetime picker from a dataframe series.\n\nInherited from UIElement\nInherited from Html\n\nPUBLIC DATA ATTRIBUTES:\n\nDATETIME_FORMAT\n\n\t\n\n\n\n\nstart\n\n\t\n\n\n\n\nstop\n\n\t\n\nInherited from UIElement\nInherited from Html\nstatic from_series(series: DataFrameSeries, **kwargs: Any) ‚Üí datetime\n\nCreate a datetime picker from a dataframe series.\n\nDate range\n\n```{eval-rst} .. marimo-embed:\n\n@app.cell\ndef __():\n    date_range = mo.ui.date_range(label=\"Start Date\")\n    return\n\n@app.cell\ndef __():\n    mo.hstack([date_range, mo.md(f\"Has value: {date_range.value}\")])\n    return\n\nclass marimo.ui.date_range(start: dt.date | str | None = None, stop: dt.date | str | None = None, value: Tuple[dt.date, dt.date] | Tuple[str, str] | None = None, *, label: str | None = None, on_change: Callable[[Tuple[dt.date, dt.date]], None] | None = None, full_width: bool = False)\n\nA date range picker over an interval.\n\nExample.\n\ndate_range = mo.ui.date_range(\n    start=dt.date(2023, 1, 1), stop=dt.date(2023, 12, 31)\n)\n\n\nOr from a dataframe series:\n\ndate_range = mo.ui.date_range.from_series(df[\"date_column\"])\n\n\nAttributes.\n\nvalue: a tuple of two dates representing the selected range\n\nstart: the minimum selectable date\n\nstop: the maximum selectable date\n\nInitialization Args.\n\nstart: the minimum selectable date (default: minimum date)\n\nstop: the maximum selectable date (default: maximum date)\n\nvalue: default value (tuple of two dates)\n\nlabel: text label for the element\n\non_change: optional callback to run when this element‚Äôs value changes\n\nfull_width: whether the input should take up the full width of its container\n\nPUBLIC METHODS\n\nfrom_series(series, **kwargs)\n\n\t\n\nCreate a date range picker from a dataframe series.\n\nInherited from UIElement\nInherited from Html\n\nPUBLIC DATA ATTRIBUTES:\n\nDATEFORMAT\n\n\t\n\n\n\n\nstart\n\n\t\n\n\n\n\nstop\n\n\t\n\nInherited from UIElement\nInherited from Html\nstatic from_series(series: DataFrameSeries, **kwargs: Any) ‚Üí date_range\n\nCreate a date range picker from a dataframe series.\n\nNext\nDictionary\nPrevious\nData Explorer\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nSingle date\ndate\ndate.from_series()\nDate and time\ndatetime\ndatetime.from_series()\nDate range\ndate_range\ndate_range.from_series()"
  },
  {
    "title": "Dictionary - marimo",
    "url": "https://docs.marimo.io/api/inputs/dictionary.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nArray\nBatch\nButton\nCheckbox\nCode Editor\nDataframe\nData Explorer\nDates\nDictionary\nDropdown\nFile\nFile Browser\nForm\nMicrophone\nMultiselect\nNumber\nRadio\nRange Slider\nRefresh\nRun Button\nSlider\nSwitch\nTable\nTabs\nText\nText Area\nCustom UI elements\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nDictionary\nclass marimo.ui.dictionary(elements: dict[str, marimo._plugins.ui._core.ui_element.UIElement[Any, Any]], *, label: str = '', on_change: Callable[[dict[str, object]], None] | None = None)\n\nA dictionary of UI elements.\n\nUse a dictionary to\n\ncreate a set of UI elements at runtime\n\ngroup together logically related UI elements\n\nkeep the number of global variables in your program small\n\nAccess the values of the elements using the value attribute of the dictionary.\n\nThe elements in the dictionary can be accessed using square brackets (dictionary[key]) and embedded in other marimo outputs. You can also iterate over the UI elements using the same syntax used for Python dicts.\n\nNote: The UI elements in the dictionary are clones of the original elements: interacting with the dictionary will not update the original elements, and vice versa.\n\nExamples.\n\nA heterogeneous collection of UI elements:\n\nd = mo.ui.dictionary(\n    {\n        \"slider\": mo.ui.slider(1, 10),\n        \"text\": mo.ui.text(),\n        \"date\": mo.ui.date(),\n    }\n)\n\n\nGet the values of the slider, text, and date elements via d.value:\n\n# d.value returns a dict with keys \"slider\", \"text\", \"date\"\nd.value\n\n\nAccess and output a UI element in the array:\n\nmo.md(f\"This is a slider: d['slider']\")\n\n\nSome number of UI elements, determined at runtime:\n\nmo.ui.dictionary({\n    f\"option {i}\": mo.ui.slider(1, 10)\n    for i in range random.randint(4, 8)\n})\n\n\nAttributes.\n\nvalue: a dict holding the values of the UI elements, keyed by their names.\n\nelements: a dict of the wrapped elements (clones of the originals)\n\non_change: optional callback to run when this element‚Äôs value changes\n\nInitialization Args.\n\nelements: a dict mapping names to UI elements to include\n\nlabel: a descriptive name for the dictionary to trigger value updates\n\nPUBLIC METHODS\n\nhstack(**kwargs)\n\n\t\n\nStack the elements horizontally.\n\n\n\n\nvstack(**kwargs)\n\n\t\n\nStack the elements vertically.\n\nInherited from _batch_base\nInherited from UIElement\nInherited from Html\n\nPUBLIC DATA ATTRIBUTES:\n\nInherited from _batch_base\nInherited from UIElement\nInherited from Html\nhstack(**kwargs: Any) ‚Üí Html\n\nStack the elements horizontally.\n\nFor kwargs, see marimo.hstack.\n\nvstack(**kwargs: Any) ‚Üí Html\n\nStack the elements vertically.\n\nFor kwargs, see marimo.vstack.\n\nNext\nDropdown\nPrevious\nDates\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\ndictionary\ndictionary.hstack()\ndictionary.vstack()"
  },
  {
    "title": "Dataframe - marimo",
    "url": "https://docs.marimo.io/api/inputs/dataframe.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nArray\nBatch\nButton\nCheckbox\nCode Editor\nDataframe\nData Explorer\nDates\nDictionary\nDropdown\nFile\nFile Browser\nForm\nMicrophone\nMultiselect\nNumber\nRadio\nRange Slider\nRefresh\nRun Button\nSlider\nSwitch\nTable\nTabs\nText\nText Area\nCustom UI elements\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nDataframe\n\nThe dataframe UI element outputs a visual editor to apply ‚Äútransforms‚Äù to a dataframe, such as filtering rows, applying group-bys and aggregations, and more. The transformed dataframe is shown below the transform editor. The UI output also includes the generated Python used to generate the resulting dataframe, which you can copy paste into a cell. You can programmatically access the resulting dataframe by accessing the element‚Äôs .value attribute.\n\nPandas Required\n\nIn order to use the dataframe UI element, you must have the pandas package installed. You can install it with pip install pandas.\n\nSupported transforms are:\n\nFilter Rows\n\nRename Column\n\nColumn Conversion\n\nSort Column\n\nGroup By\n\nAggregate\n\nclass marimo.ui.dataframe(df: DataFrameType, on_change: Callable[[DataFrameType], None] | None = None, page_size: int | None = 5, limit: int | None = None)\n\nRun transformations on a DataFrame or series. Currently only Pandas or Polars DataFrames are supported.\n\nExample.\n\ndataframe = mo.ui.dataframe(data)\n\n\nAttributes.\n\nvalue: the transformed DataFrame or series\n\nInitialization Args.\n\ndf: the DataFrame or series to transform\n\npage_size: the number of rows to show in the table\n\nlimit: the number of items to load into memory, in case the data is remote and lazily fetched. This is likely true for SQL-backed dataframes via Ibis.\n\nPUBLIC METHODS\n\nget_dataframe(_args)\n\n\t\n\n\n\n\nget_column_values(args)\n\n\t\n\nGet all the unique values in a column.\n\n\n\n\nsearch(args)\n\n\t\n\nInherited from UIElement\nInherited from Html\n\nPUBLIC DATA ATTRIBUTES:\n\nInherited from UIElement\nInherited from Html\nget_column_values(args: GetColumnValuesArgs) ‚Üí GetColumnValuesResponse\n\nGet all the unique values in a column.\n\nNext\nData Explorer\nPrevious\nCode Editor\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\ndataframe\ndataframe.get_column_values()"
  },
  {
    "title": "Data Explorer - marimo",
    "url": "https://docs.marimo.io/api/inputs/data_explorer.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nArray\nBatch\nButton\nCheckbox\nCode Editor\nDataframe\nData Explorer\nDates\nDictionary\nDropdown\nFile\nFile Browser\nForm\nMicrophone\nMultiselect\nNumber\nRadio\nRange Slider\nRefresh\nRun Button\nSlider\nSwitch\nTable\nTabs\nText\nText Area\nCustom UI elements\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nData Explorer\n\nThe data explorer UI element outputs a visual editor explore your data via plotting and intelligent recommendations. You can incrementally build your ‚Äúmain‚Äù plot by adding different encodings: x-axis, y-axis, color, size, and shape. As you build your plot, the UI element will suggest further plots by intelligently ‚Äúexploding‚Äù an additional encoding derived from your base plot.\n\nPandas Required\n\nIn order to use the dataframe UI element, you must have the pandas package installed. You can install it with pip install pandas.\n\nclass marimo.ui.data_explorer(df: pd.DataFrame | pl.DataFrame | pa.Table, on_change: Callable[[Dict[str, Any]], None] | None = None)\n\nQuickly explore a DataFrame with automatically suggested visualizations.\n\nExample.\n\nmo.ui.data_explorer(data)\n\n\nAttributes.\n\nvalue: the resulting DataFrame chart spec\n\nInitialization Args.\n\ndf: the DataFrame to visualize\n\nPUBLIC METHODS\n\nInherited from UIElement\nInherited from Html\n\nPUBLIC DATA ATTRIBUTES:\n\nInherited from UIElement\nInherited from Html\nNext\nDates\nPrevious\nDataframe\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\ndata_explorer"
  },
  {
    "title": "Checkbox - marimo",
    "url": "https://docs.marimo.io/api/inputs/checkbox.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nArray\nBatch\nButton\nCheckbox\nCode Editor\nDataframe\nData Explorer\nDates\nDictionary\nDropdown\nFile\nFile Browser\nForm\nMicrophone\nMultiselect\nNumber\nRadio\nRange Slider\nRefresh\nRun Button\nSlider\nSwitch\nTable\nTabs\nText\nText Area\nCustom UI elements\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nCheckbox\nclass marimo.ui.checkbox(value: bool = False, *, label: str = '', on_change: Callable[[bool], None] | None = None)\n\nA boolean checkbox.\n\nExample.\n\ncheckbox = mo.ui.checkbox()\n\n\nAttributes.\n\nvalue: a boolean, True if checked\n\nInitialization Args.\n\nvalue: default value, True or False\n\nlabel: text label for the element\n\non_change: optional callback to run when this element‚Äôs value changes\n\nPUBLIC METHODS\n\nInherited from UIElement\nInherited from Html\n\nPUBLIC DATA ATTRIBUTES:\n\nInherited from UIElement\nInherited from Html\nNext\nCode Editor\nPrevious\nButton\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\ncheckbox"
  },
  {
    "title": "Code Editor - marimo",
    "url": "https://docs.marimo.io/api/inputs/code_editor.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nArray\nBatch\nButton\nCheckbox\nCode Editor\nDataframe\nData Explorer\nDates\nDictionary\nDropdown\nFile\nFile Browser\nForm\nMicrophone\nMultiselect\nNumber\nRadio\nRange Slider\nRefresh\nRun Button\nSlider\nSwitch\nTable\nTabs\nText\nText Area\nCustom UI elements\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nCode Editor\nclass marimo.ui.code_editor(value: str = '', language: str = 'python', placeholder: str = '', theme: Literal['light', 'dark'] | None = None, disabled: bool = False, min_height: int | None = None, max_height: int | None = None, *, label: str = '', on_change: Callable[[str], None] | None = None)\n\nA code editor.\n\nExample.\n\ncode_editor = mo.ui.code_editor()\n\n\nAttributes.\n\nvalue: a string of the code editor contents\n\nInitialization Args.\n\nvalue: initial value of the code editor\n\nlanguage: language of the code editor, defaults to \"python\"; most major languages are supported, including ‚Äúsql‚Äù, ‚Äújavascript‚Äù, ‚Äútypescript‚Äù, ‚Äúhtml‚Äù, ‚Äúcss‚Äù, ‚Äúc‚Äù, ‚Äúcpp‚Äù, ‚Äúrust‚Äù, and more\n\nplaceholder: placeholder text to display when the code editor is empty\n\ntheme: theme of the code editor, defaults to the editor‚Äôs default\n\ndisabled: whether the input is disabled\n\nmin_height: minimum height of the code editor in pixels\n\nmax_height: maximum height of the code editor in pixels\n\nlabel: text label for the element\n\non_change: optional callback to run when this element‚Äôs value changes\n\nPUBLIC METHODS\n\nInherited from UIElement\nInherited from Html\n\nPUBLIC DATA ATTRIBUTES:\n\nInherited from UIElement\nInherited from Html\nNext\nDataframe\nPrevious\nCheckbox\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\ncode_editor"
  },
  {
    "title": "Batch - marimo",
    "url": "https://docs.marimo.io/api/inputs/batch.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nArray\nBatch\nButton\nCheckbox\nCode Editor\nDataframe\nData Explorer\nDates\nDictionary\nDropdown\nFile\nFile Browser\nForm\nMicrophone\nMultiselect\nNumber\nRadio\nRange Slider\nRefresh\nRun Button\nSlider\nSwitch\nTable\nTabs\nText\nText Area\nCustom UI elements\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nBatch\nclass marimo.ui.batch(html: Html, elements: dict[str, marimo._plugins.ui._core.ui_element.UIElement[Any, Any]], on_change: Callable[[Dict[str, object]], None] | None = None)\n\nConvert an HTML object with templated text into a UI element.\n\nA batch is a UI element that wraps other UI elements, and is represented by custom HTML or markdown. You can create a batch by calling the batch() method on Html objects.\n\nGet the value of the wrapped UI elements using the value attribute of the batch.\n\nExample.\n\nIn the below example, user_info is a UI Element whose output is markdown and whose value is a dict with keys 'name' and 'birthday' (and values equal to the values of their corresponding elements).\n\nuser_info = mo.md(\n    '''\n    - What's your name?: {name}\n    - When were you born?: {birthday}\n    '''\n).batch(name=mo.ui.text(), birthday=mo.ui.date())\n\n\nTo get the value of name and birthday, use:\n\nuser_info.value\n\n\nYou can also instantiate this class directly:\n\nmarkdown = mo.md(\n    '''\n    - What's your name?: {name}\n    - When were you born?: {birthday}\n    '''\n)\nbatch = mo.ui.batch(\n    markdown, {\"name\": mo.ui.text(), \"birthday\": mo.ui.date()}\n)\n\n\nAttributes.\n\nvalue: a dict of the batched elements‚Äô values\n\nelements: a dict of the batched elements (clones of the originals)\n\non_change: optional callback to run when this element‚Äôs value changes\n\nInitialization Args.\n\nhtml: a templated Html object\n\nelements: the UI elements to interpolate into the HTML template\n\non_change: optional callback to run when this element‚Äôs value changes\n\nPUBLIC METHODS\n\nInherited from _batch_base\nInherited from UIElement\nInherited from Html\n\nPUBLIC DATA ATTRIBUTES:\n\nInherited from _batch_base\nInherited from UIElement\nInherited from Html\nNext\nButton\nPrevious\nArray\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nbatch"
  },
  {
    "title": "Button - marimo",
    "url": "https://docs.marimo.io/api/inputs/button.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nArray\nBatch\nButton\nCheckbox\nCode Editor\nDataframe\nData Explorer\nDates\nDictionary\nDropdown\nFile\nFile Browser\nForm\nMicrophone\nMultiselect\nNumber\nRadio\nRange Slider\nRefresh\nRun Button\nSlider\nSwitch\nTable\nTabs\nText\nText Area\nCustom UI elements\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nButton\n\nLooking for a submit/run button?\n\nIf you‚Äôre looking for a button to trigger computation on click, consider using mo.ui.run_button.\n\nclass marimo.ui.button(on_click: Callable[[Any], Any] | None = None, value: Any | None = None, kind: Literal['neutral', 'success', 'warn', 'danger'] = 'neutral', disabled: bool = False, tooltip: str | None = None, *, label: str = 'click here', on_change: Callable[[Any], None] | None = None, full_width: bool = False)\n\nA button with an optional callback and optional value.\n\nExample.\n\n# a button that when clicked will execute\n# any cells referencing that button\nbutton = mo.ui.button()\n\n# a counter implementation\ncounter_button = mo.ui.button(\n    value=0, on_click=lambda value: value + 1, label=\"increment\"\n)\n\n# adding intent\ndelete_button = mo.ui.button(\n    label=\"Do not click\",\n    kind=\"danger\",\n)\n\n\nAttributes.\n\nvalue: the value of the button\n\nInitialization Args.\n\non_click: a callable called on click that takes the current value of the button and returns a new value\n\nvalue: an initial value for the button\n\nkind: ‚Äòneutral‚Äô, ‚Äòsuccess‚Äô, ‚Äòwarn‚Äô, or ‚Äòdanger‚Äô\n\ndisabled: whether the button is disabled\n\nlabel: text label for the element\n\non_change: optional callback to run when this element‚Äôs value changes\n\nfull_width: whether the input should take up the full width of its container\n\nPUBLIC METHODS\n\nInherited from UIElement\nInherited from Html\n\nPUBLIC DATA ATTRIBUTES:\n\nInherited from UIElement\nInherited from Html\nNext\nCheckbox\nPrevious\nBatch\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nbutton"
  },
  {
    "title": "Array - marimo",
    "url": "https://docs.marimo.io/api/inputs/array.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nArray\nBatch\nButton\nCheckbox\nCode Editor\nDataframe\nData Explorer\nDates\nDictionary\nDropdown\nFile\nFile Browser\nForm\nMicrophone\nMultiselect\nNumber\nRadio\nRange Slider\nRefresh\nRun Button\nSlider\nSwitch\nTable\nTabs\nText\nText Area\nCustom UI elements\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nArray\nclass marimo.ui.array(elements: Sequence[UIElement[Any, Any]], *, label: str = '', on_change: Callable[[Sequence[object]], None] | None = None)\n\nAn array of UI elements.\n\nUse an array to\n\ncreate a dynamic number of UI elements at runtime\n\ngroup together logically related UI elements\n\nkeep the number of global variables in your program small\n\nAccess the values of the elements using the value attribute of the array (array.value).\n\nThe elements in the array can be accessed using square brackets (array[index]) and embedded in other marimo outputs. You can also iterate over the UI elements using the in operator (for element in array).\n\nNote: The UI elements in the array are clones of the original elements: interacting with the array will not update the original elements, and vice versa.\n\nExamples.\n\nA heterogeneous collection of UI elements:\n\narray = mo.ui.array([mo.ui.slider(1, 10), mo.ui.text(), mo.ui.date()])\n\n\nGet the values of the slider, text, and date elements via array.value:\n\n# array.value returns a list with the values of the elements\narray.value\n\n\nAccess and output a UI element in the array:\n\nmo.md(f\"This is a slider: array[0]\")\n\n\nSome number of UI elements, determined at runtime:\n\nmo.ui.array([mo.ui.slider(1, 10) for _ in range random.randint(4, 8)])\n\n\nAttributes.\n\nvalue: a list containing the values of the array‚Äôs entries\n\nelements: a list of the wrapped elements (clones of the originals)\n\nInitialization Args.\n\nelements: the UI elements to include\n\nlabel: a descriptive name for the array\n\non_change: optional callback to run when this element‚Äôs value changes\n\nPUBLIC METHODS\n\nhstack(**kwargs)\n\n\t\n\nStack the elements horizontally.\n\n\n\n\nvstack(**kwargs)\n\n\t\n\nStack the elements vertically.\n\nInherited from UIElement\nInherited from Html\n\nPUBLIC DATA ATTRIBUTES:\n\nelements\n\n\t\n\nInherited from UIElement\nInherited from Html\nhstack(**kwargs: Any) ‚Üí Html\n\nStack the elements horizontally.\n\nFor kwargs, see marimo.hstack.\n\nvstack(**kwargs: Any) ‚Üí Html\n\nStack the elements vertically.\n\nFor kwargs, see marimo.vstack.\n\nNext\nBatch\nPrevious\nInputs\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\narray\narray.hstack()\narray.vstack()"
  },
  {
    "title": "Online playground - marimo",
    "url": "https://docs.marimo.io/guides/wasm.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nOverview\nReactivity\nInteractivity\nSQL\nRun as an app\nRun as a script\nOutputs\nDataframes\nPlotting\nEditor features\nToggle navigation of Editor features\nTheming\nBest practices\nToggle navigation of Best practices\nComing from other tools\nToggle navigation of Coming from other tools\nIntegrating with marimo\nToggle navigation of Integrating with marimo\nReactive state\nOnline playground\nExporting\nConfiguration\nTroubleshooting\nDeploying\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nOnline playground\n\nWe‚Äôve built an online playground that lets you run marimo entirely in the browser ‚Äì no backend required!\n\nmarimo notebooks that run entirely in the browser are called WebAssembly notebooks, or WASM notebooks for short.\n\nIn contrast to marimo notebooks that you create with the CLI, WASM notebooks run without a web server and Python process; instead, the web browser executes your Python code. For this reason, WASM makes it extremely easy to share marimo notebooks, and makes it possible to tinker with notebooks without having to install Python on your machine.\n\nTry our playground! Just navigate to https://marimo.new.\n\nWASM?\n\nmarimo-in-the-browser is powered by a technology called WebAssembly, or ‚ÄúWASM‚Äù for short. Hence the name ‚ÄúWASM notebook‚Äù.\n\nWhen should I use WASM notebooks?\n\nWASM notebooks are excellent for sharing your work, quickly experimenting with code and models, doing lightweight data exploration, authoring blog posts, tutorials, and educational materials, and even building tools. They are not well-suited for notebooks that do heavy computation.\n\nIssues?\n\nWASM notebooks are a new feature. If you run into problems, please open a GitHub issue.\n\nCreating and sharing WASM notebooks\n\nWASM notebooks run at marimo.app.\n\nCreating new notebooks\n\nTo create a new WASM notebook, just visit marimo.new.\n\nThink of marimo.new as your own personal scratchpad for experimenting with code, data, and models and for prototyping tools, available to you at all times and on all devices.\n\nSaving WASM notebooks\n\nWhen you save a WASM notebook, a copy of your code is saved to your web browser‚Äôs local storage. When you return to marimo.app, the last notebook you worked on will be re-opened.\n\nCreating shareable permalinks\n\nAt marimo.app, save your notebook and then click the Create permalink button to generate a shareable permalink to your notebook.\n\nPlease be aware that marimo permalinks are publicly accessible.\n\nCreating WASM notebooks from local notebooks\n\nIn the marimo editor‚Äôs notebook action menu, use Share > Create WebAssembly link to get a marimo.app/... URL representing your notebook:\n\nWASM notebooks come with common Python packages installed, but you may need to install additional packages using micropip.\n\nThe obtained URL encodes your notebook code as a parameter, so it can be quite long. If you want a URL that‚Äôs easier to share, you can create a shareable permalink.\n\nInstalling packages\n\nWASM notebooks come with many packages pre-installed, including NumPy, SciPy, scikit-learn, pandas, and matplotlib; see Pyodide‚Äôs documentation for a full list.\n\nTo install other packages, use micropip:\n\nIn one cell, import micropip:\n\nimport micropip\n\n\nIn the next one, install packages:\n\nawait micropip.install(\"plotly\")\nimport plotly\n\n\nTry it! A WASM notebook is embedded below. Try installing a package.\n\nConfiguration\n\nYour marimo.app URLs can be configured using the following parameters.\n\nRead-only mode\n\nTo view a notebook in read-only mode, with code cells locked, append &mode=read to your URL‚Äôs list of query parameters (or ?mode=read if your URL doesn‚Äôt have a query string).\n\nExample:\n\nhttps://marimo.app/l/83qamt?mode=read\n\nEmbed\n\nTo hide the marimo.app header, append &embed=true to your URL‚Äôs list of query parameters (or ?embed=true if your URL doesn‚Äôt have a query string).\n\nExample:\n\nhttps://marimo.app/l/83qamt?embed=true\n\nhttps://marimo.app/l/83qamt?mode=read&embed=true\n\nSee the section on embedding for examples of how to embed marimo notebooks in your own webpages.\n\nExcluding code\n\nBy default, WASM notebooks expose your Python code to viewers. If you‚Äôve enabled read-only mode, you can exclude code with &include-code=false. If you want to include code but have it be hidden by default, use the parameter &show-code=false.\n\nA sufficiently determined user would still be able to obtain your code, so don‚Äôt think of this as a security feature; instead, think of it as an aesthetic or practical choice.\n\nEmbedding\n\nWASM notebooks can be embedded into other webpages using the HTML <iframe> tag.\n\nEmbedding a blank notebook\n\nUse the following snippet to embed a blank marimo notebook into your web page, providing your users with an interactive code playground.\n\n<iframe\n  src=\"https://marimo.app/l/aojjhb?embed=true\"\n  width=\"100%\"\n  height=\"300\"\n  frameborder=\"0\"\n></iframe>\n\nEmbedding an existing notebook\n\nTo embed existing marimo notebooks into a webpage, first, obtain a URL to your notebook, then put it in an iframe.\n\n<iframe\n  src=\"https://marimo.app/l/c7h6pz?embed=true\"\n  width=\"100%\"\n  height=\"300\"\n  frameborder=\"0\"\n></iframe>\n\n\nAfter obtaining a URL to your notebook,\n\nEmbedding an existing notebook in read-only mode\n\nYou can optionally render embedded notebooks in read-only mode by appending &mode=read to your URL.\n\n<iframe\n  src=\"https://marimo.app/l/c7h6pz?mode=read&embed=true\"\n  width=\"100%\"\n  height=\"300\"\n  frameborder=\"0\"\n></iframe>\n\nLimitations\n\nWhile WASM notebooks let you get up and running with marimo instantly, they have some limitations.\n\nPackages. Not all packages are available in WASM notebooks; see Pyodide‚Äôs documentation on supported packages.\n\nPDB. PDB is not currently supported. This may be fixed in the future.\n\nThreading and multi-processing. WASM notebooks do not support multithreading and multiprocessing. This may be fixed in the future.\n\nBrowser support\n\nWASM notebooks are supported in the latest versions of Chrome, Firefox, Edge, and Safari.\n\nChrome is the recommended browser for WASM notebooks as it seems to have the best performance and compatibility.\n\nNext\nExporting\nPrevious\nReactive state\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nCreating and sharing WASM notebooks\nCreating new notebooks\nCreating shareable permalinks\nCreating WASM notebooks from local notebooks\nInstalling packages\nConfiguration\nRead-only mode\nEmbed\nExcluding code\nEmbedding\nEmbedding a blank notebook\nEmbedding an existing notebook\nEmbedding an existing notebook in read-only mode\nLimitations\nBrowser support"
  },
  {
    "title": "Inputs - marimo",
    "url": "https://docs.marimo.io/api/inputs/index.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nArray\nBatch\nButton\nCheckbox\nCode Editor\nDataframe\nData Explorer\nDates\nDictionary\nDropdown\nFile\nFile Browser\nForm\nMicrophone\nMultiselect\nNumber\nRadio\nRange Slider\nRefresh\nRun Button\nSlider\nSwitch\nTable\nTabs\nText\nText Area\nCustom UI elements\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nInputs\n\nmarimo comes packaged with interactive UI elements that you can use to build powerful notebooks and apps. These elements are available in marimo.ui.\n\nmarimo.ui.array\n\n\t\n\nAn array of UI elements.\n\n\n\n\nmarimo.ui.batch\n\n\t\n\nConvert an HTML object with templated text into a UI element.\n\n\n\n\nmarimo.ui.button\n\n\t\n\nA button with an optional callback and optional value.\n\n\n\n\nmarimo.ui.checkbox\n\n\t\n\nA boolean checkbox.\n\n\n\n\nmarimo.ui.code_editor\n\n\t\n\nA code editor.\n\n\n\n\nmarimo.ui.dataframe\n\n\t\n\nRun transformations on a DataFrame or series.\n\n\n\n\nmarimo.ui.data_explorer\n\n\t\n\nQuickly explore a DataFrame with automatically suggested visualizations.\n\n\n\n\nmarimo.ui.date\n\n\t\n\nA date picker with an optional start and stop date.\n\n\n\n\nmarimo.ui.datetime\n\n\t\n\nA datetime picker over an interval.\n\n\n\n\nmarimo.ui.date_range\n\n\t\n\nA date range picker over an interval.\n\n\n\n\nmarimo.ui.dictionary\n\n\t\n\nA dictionary of UI elements.\n\n\n\n\nmarimo.ui.dropdown\n\n\t\n\nA dropdown menu.\n\n\n\n\nmarimo.ui.file\n\n\t\n\nA button or drag-and-drop area to upload a file.\n\n\n\n\nmarimo.ui.file_browser\n\n\t\n\nFile browser for browsing and selecting server-side files.\n\n\n\n\nmarimo.ui.form\n\n\t\n\nA submittable form linked to a UIElement.\n\n\n\n\nmarimo.ui.microphone\n\n\t\n\nAn audio recorder element.\n\n\n\n\nmarimo.ui.multiselect\n\n\t\n\nA multiselect input.\n\n\n\n\nmarimo.ui.number\n\n\t\n\nA number picker over an interval.\n\n\n\n\nmarimo.ui.radio\n\n\t\n\nA radio group.\n\n\n\n\nmarimo.ui.range_slider\n\n\t\n\nA numeric slider for specifying a range over an interval.\n\n\n\n\nmarimo.ui.refresh\n\n\t\n\nA refresh button that will auto-refresh its descendants for a given interval.\n\n\n\n\nmarimo.ui.run_button\n\n\t\n\nA button that can be used to trigger computation.\n\n\n\n\nmarimo.ui.slider\n\n\t\n\nA numeric slider over an interval.\n\n\n\n\nmarimo.ui.switch\n\n\t\n\nA boolean switch.\n\n\n\n\nmarimo.ui.tabs\n\n\t\n\nDisplay objects in a tabbed view.\n\n\n\n\nmarimo.ui.table\n\n\t\n\nA table component with selectable rows.\n\n\n\n\nmarimo.ui.text\n\n\t\n\nA text input.\n\n\n\n\nmarimo.ui.text_area\n\n\t\n\nA text area that is larger than ui.text.\n\nTo use a UI element, assign it to a global variable and output it in a cell. When you interact with the frontend element, the Python object‚Äôs value attribute is automatically updated, and all cells referencing that object automatically run with the element‚Äôs latest value.\n\nIntegrations\n\nmarimo.ui.altair_chart\n\n\t\n\nMake reactive charts with Altair\n\n\n\n\nmarimo.ui.plotly\n\n\t\n\nMake reactive plots with Plotly.\n\n\n\n\nmarimo.mpl.interactive\n\n\t\n\nRender a matplotlib figure using an interactive viewer.\n\n\n\n\nmarimo.ui.anywidget\n\n\t\n\nCreate a UIElement from an AnyWidget.\n\nNext\nArray\nPrevious\nMarkdown\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nIntegrations"
  },
  {
    "title": "Markdown - marimo",
    "url": "https://docs.marimo.io/api/markdown.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nMarkdown\n\nWrite markdown with mo.md; make your markdown interactive, dynamic, and visually rich by interpolating arbitrary Python values and marimo elements.\n\nmarimo.md(text: str) ‚Üí Html\n\nWrite markdown\n\nThis function takes a string of markdown as input and returns an Html object. Output the object as the last expression of a cell to render the markdown in your app.\n\nInterpolation.\n\nYou can interpolate Python values into your markdown strings, for example using f-strings. Html objects and UI elements can be directly interpolated. For example:\n\ntext_input = mo.ui.text()\nmd(f\"Enter some text: {text_input}\")\n\n\nFor other objects, like plots, use marimo‚Äôs as_html method to embed them in markdown:\n\nimport matplotlib.pyplot as plt\n\nplt.plot([1, 2])\naxis = plt.gca()\nmd(f\"Here's a plot: {mo.as_html(axis)}\")\n\n\nLaTeX.\n\nEnclose LaTeX in single ‚Äò$‚Äô signs for inline math, and double ‚Äò$$‚Äô for display math or square brackets for display math. (Use raw strings, prefixed with an ‚Äúr‚Äù, to use single backslashes.) For example:\n\nmo.md(\n    r'''\n    The exponential function $f(x) = e^x$ can be represented as\n\n    \\[\n        f(x) = 1 + x + \\frac{x^2}{2!} + \\frac{x^3}{3!} + \\ldots.\n    \\]\n    '''\n)\n\n\nrenders:\n\nThe exponential function \nùëì\n(\nùë•\n)\n=\nùëí\nùë•\n can be represented as\n\nùëì\n(\nùë•\n)\n=\n1\n+\nùë•\n+\nùë•\n2\n2\n!\n+\nùë•\n3\n3\n!\n+\n‚Ä¶\n.\n\nArgs:\n\ntext: a string of markdown\n\nReturns:\n\nAn Html object.\n\nIcons\n\nYou can render icons from Iconify with mo.icon.\n\nmarimo.icon(icon_name: str, *, size: int | None = None, color: str | None = None, inline: bool = True, flip: Literal['horizontal', 'vertical', 'horizontal,vertical'] | None = None, rotate: Literal['90deg', '180deg', '270deg'] | None = None, style: dict[str, Union[str, int, float, NoneType]] | None = None) ‚Üí Html\n\nDisplays an icon. These icons are referenced by name from the Iconify library.\n\nThey are named in the format icon-set:icon-name, e.g. lucide:leaf.\n\nIcons are lazily loaded from a CDN, so they will not be loaded when not connected to the internet.\n\nThese can be used in buttons, tabs, and other UI elements.\n\nExamples.\n\nmo.md(f\"# {mo.icon('lucide:leaf')} Leaf\")\n\nmo.ui.button(\n    label=f\"{mo.icon('lucide:rocket')} Submit\",\n)\n\n\nArgs.\n\nicon_name: the name of the icon to display\n\nsize: the size of the icon in pixels\n\ncolor: the color of the icon\n\ninline: whether to display the icon inline or as a block element\n\nflip: whether to flip the icon horizontally, vertically, or both\n\nrotate: whether to rotate the icon 90, 180, or 270 degrees\n\nstyle: a dictionary of CSS styles to apply to the icon\n\nReturns.\n\nAn Html object.\n\nTooltips\n\nYou can render a tooltip by adding the data-tooltip attribute to an element.\n\nmo.md(\n    '''\n    <div data-tooltip=\"This is a tooltip\">Hover over me</div>\n    '''\n)\nmo.ui.button(\n    label='<div data-tooltip=\"This is a tooltip\">Hover over me</div>'\n)\n\nNext\nInputs\nPrevious\nAPI Reference\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nmd()\nIcons\nicon()\nTooltips"
  },
  {
    "title": "API Reference - marimo",
    "url": "https://docs.marimo.io/api/index.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nMarkdown\nInputs\nToggle navigation of Inputs\nLayouts\nToggle navigation of Layouts\nPlotting\nMedia\nToggle navigation of Media\nDiagrams\nStatus\nOutputs\nControl flow\nHTML\nQuery Parameters\nCommand Line Arguments\nState\nApp\nCell\nMiscellaneous\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nAPI Reference\n\nUse the marimo library in marimo notebooks (import marimo as mo) to\n\nconnect interactive inputs like sliders, dropdowns, and tables to Python,\n\nexpress yourself with dynamically created markdown,\n\nlayout information with tabs or grids,\n\noutput media like images and audio,\n\nand more!\n\n\t\n\n\n\n\nMarkdown\n\n\t\n\nWrite markdown with mo.md\n\n\n\n\nInputs\n\n\t\n\nConnect sliders, dropdowns, tables, and more to Python\n\n\n\n\nLayouts\n\n\t\n\nCustomize outputs with accordions, tabs, stacks, and more\n\n\n\n\nPlotting\n\n\t\n\nOutput interactive plots\n\n\n\n\nMedia\n\n\t\n\nOutput media like images, audio, PDFs, and plain text\n\n\n\n\nDiagrams\n\n\t\n\nFlow charts, graphs, statistic cards, and more\n\n\n\n\nStatus\n\n\t\n\nDisplay progress indicators\n\n\n\n\nOutputs\n\n\t\n\nModify cell outputs, redirect console output\n\n\n\n\nControl flow\n\n\t\n\nControl how cells execute\n\n\n\n\nHTML\n\n\t\n\nManipulate HTML objects\n\n\n\n\nQuery Parameters\n\n\t\n\nAccess and set query parameters with mo.query_params\n\n\n\n\nCommand Line Arguments\n\n\t\n\nAccess command-line arguments with mo.cli_args\n\n\n\n\nState\n\n\t\n\nSynchronize multiple UI elements with mo.state\n\n\n\n\nApp\n\n\t\n\nEmbed notebooks in other notebooks\n\n\n\n\nCell\n\n\t\n\nRun cells defined in another notebook\n\n\n\n\nMiscellaneous\n\n\t\n\nMiscellaneous utilities\n\nNext\nMarkdown\nPrevious\nRecipes\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo"
  },
  {
    "title": "Recipes - marimo",
    "url": "https://docs.marimo.io/recipes.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nRecipes\n\nThis page includes code snippets or ‚Äúrecipes‚Äù for a variety of common tasks. Use them as building blocks or examples when making your own notebooks.\n\nIn these recipes, each code block represents a cell.\n\nControl Flow\nShow an output conditionally\n\nUse cases. Hide an output until a condition is met (e.g., until algorithm parameters are valid), or show different outputs depending on the value of a UI element or some other Python object\n\nRecipe.\n\nUse an if expression to choose which output to show.\n\n# condition is a boolean, True of False\ncondition = True\n\"condition is True\" if condition else None\n\nRun a cell on a timer\n\nUse cases.\n\nLoad new data periodically, and show updated plots or other outputs. For example, in a dashboard monitoring a training run, experiment trial, real-time weather data, ‚Ä¶\n\nRun a job periodically\n\nRecipe.\n\nImport packages\n\nimport marimo as mo\n\n\nCreate a mo.ui.refresh timer that fires once a second:\n\nrefresh = mo.ui.refresh(default_interval=\"1s\")\n# This outputs a timer that fires once a second\nrefresh\n\n\nReference the timer by name to make this cell run once a second\n\nimport random\n\n# This cell will run once a second!\nrefresh\n\nmo.md(\"#\" + \"üçÉ\" * random.randint(1, 10))\n\nRequire form submission before sending UI value\n\nUse cases. UI elements automatically send their values to the Python when they are interacted with, and run all cells referencing the elements. This makes marimo notebooks responsive, but it can be an issue when the downstream cells are expensive, or when the input (such as a text box) needs to be filled out completely before it is considered valid. Forms let you gate submission of UI element values on manual confirmation, via a button press.\n\nRecipe.\n\nImport packages\n\nimport marimo as mo\n\n\nCreate a submittable form.\n\nform = mo.ui.text(label=\"Your name\").form()\nform\n\n\nGet the value of the form.\n\nform.value\n\nStop execution of a cell and its descendants\n\nUse cases. For example, don‚Äôt run a cell or its descendants if a form is unsubmitted.\n\nRecipe.\n\nImport packages\n\nimport marimo as mo\n\n\nCreate a submittable form.\n\nform = mo.ui.text(label=\"Your name\").form()\nform\n\n\nUse mo.stop to stop execution when the form is unsubmitted.\n\nmo.stop(form.value is None, mo.md(\"Submit the form to continue\"))\n\nmo.md(f\"Hello, {form.value}!\")\n\nGrouping UI elements together\nCreate an array of UI elements\n\nUse cases. In order to synchronize UI elements between the frontend and backend (Python), marimo requires you to assign UI elements to global variables. But sometimes you don‚Äôt know the number of elements to make until runtime: for example, maybe you want to make a list of sliders, and the number of sliders to make depends on the value of some other UI element.\n\nYou might be tempted to create a Python list of UI elements, such as l = [mo.ui.slider(1, 10) for i in range(number.value)]: however, this won‚Äôt work, because the sliders are not bound to global variables.\n\nFor such cases, marimo provides the ‚Äúhigher-order‚Äù UI element mo.ui.array, which lets you make a new UI element out of a list of UI elements: l = mo.ui.array([mo.ui.slider(1, 10) for i in range(number.value)]). The value of an array element is a list of the values of the elements it wraps (in this case, a list of the slider values). Any time you interact with any of the UI elements in the array, all cells referencing the array by name (in this case, ‚Äúl‚Äù) will run automatically.\n\nRecipe.\n\nImport packages.\n\nimport marimo as mo\n\n\nUse mo.ui.array to group together many UI elements into a list.\n\nimport random\n\n# instead of random.randint, in your notebook you'd use the value of\n# an upstream UI element or other Python object\narray = mo.ui.array([mo.ui.text() for i in range(random.randint(1, 10))])\narray\n\n\nGet the value of the UI elements using array.value\n\narray.value\n\nCreate a dictionary of UI elements\n\nUse cases. Same as for creating an array of UI elements, but lets you name each of the wrapped elements with a string key.\n\nRecipe.\n\nImport packages.\n\nimport marimo as mo\n\n\nUse mo.ui.dictionary to group together many UI elements into a list.\n\nimport random\n\n# instead of random.randint, in your notebook you'd use the value of\n# an upstream UI element or other Python object\ndictionary = mo.ui.dictionary({str(i): mo.ui.text() for i in range(random.randint(1, 10))})\ndictionary\n\n\nGet the value of the UI elements using dictionary.value\n\ndictionary.value\n\nEmbed a dynamic number of UI elements in another output\n\nUse cases. When you want to embed a dynamic number of UI elements in other outputs (like tables or markdown).\n\nRecipe.\n\nImport packages\n\nimport marimo as mo\n\n\nGroup the elements with mo.ui.dictionary or mo.ui.array, then retrieve them from the container and display them elsewhere.\n\nimport random\n\nn_items = random.randint(2, 5)\n\n# Create a dynamic number of elements using `mo.ui.dictionary` and\n# `mo.ui.array`\nelements = mo.ui.dictionary(\n    {\n        \"checkboxes\": mo.ui.array([mo.ui.checkbox() for _ in range(n_items)]),\n        \"texts\": mo.ui.array(\n            [mo.ui.text(placeholder=\"task ...\") for _ in range(n_items)]\n        ),\n    }\n)\n\nmo.md(\n    f\"\"\"\n    Here's a TODO list of {n_items} items\\n\\n\n    \"\"\"\n    + \"\\n\\n\".join(\n        # Iterate over the elements and embed them in markdown\n        [\n            f\"{checkbox} {text}\"\n            for checkbox, text in zip(\n                elements[\"checkboxes\"], elements[\"texts\"]\n            )\n        ]\n    )\n)\n\n\nGet the value of the elements\n\nelements.value\n\nCreate a hstack (or vstack) of UI elements with on_change handlers\n\nUse cases. Arrange a dynamic number of UI elements in a hstack or vstack, for example some number of buttons, and execute some side-effect when an element is interacted with, e.g. when a button is clicked.\n\nRecipe.\n\nImport packages\n\nimport marimo as mo\n\n\nCreate buttons in mo.ui.array and pass them to hstack ‚Äì a regular Python list won‚Äôt work. Make sure to assign the array to a global variable.\n\nimport random\n\n\n# Create a state object that will store the index of the\n# clicked button\nget_state, set_state = mo.state(None)\n\n# Create an mo.ui.array of buttons - a regular Python list won't work.\nbuttons = mo.ui.array(\n    [\n        mo.ui.button(\n            label=\"button \" + str(i), on_change=lambda v, i=i: set_state(i)\n        )\n        for i in range(random.randint(2, 5))\n    ]\n)\n\nmo.hstack(buttons)\n\n\nGet the state value\n\nget_state()\n\nCreate a table column of buttons with on_change handlers\n\nUse cases. Arrange a dynamic number of UI elements in a column of a table, and execute some side-effect when an element is interacted with, e.g. when a button is clicked.\n\nRecipe.\n\nImport packages\n\nimport marimo as mo\n\n\nCreate buttons in mo.ui.array and pass them to mo.ui.table. Make sure to assign the table and array to global variables\n\nimport random\n\n\n# Create a state object that will store the index of the\n# clicked button\nget_state, set_state = mo.state(None)\n\n# Create an mo.ui.array of buttons - a regular Python list won't work.\nbuttons = mo.ui.array(\n    [\n        mo.ui.button(\n            label=\"button \" + str(i), on_change=lambda v, i=i: set_state(i)\n        )\n        for i in range(random.randint(2, 5))\n    ]\n)\n\n# Put the buttons array into the table\ntable = mo.ui.table(\n    {\n        \"Action\": [\"Action Name\"] * len(buttons),\n        \"Trigger\": list(buttons),\n    }\n)\ntable\n\n\nGet the state value\n\nget_state()\n\nCreate a form with multiple UI elements\n\nUse cases. Combine multiple UI elements into a form so that submission of the form sends all its elements to Python.\n\nRecipe.\n\nImport packages.\n\nimport marimo as mo\n\n\nUse mo.ui.form and Html.batch to create a form with multiple elements.\n\nform = mo.md(\n   r\"\"\"\n   Choose your algorithm parameters:\n\n   - $\\epsilon$: {epsilon}\n   - $\\delta$: {delta}\n   \"\"\"\n).batch(epsilon=mo.ui.slider(0.1, 1, step=0.1), delta=mo.ui.number(1, 10)).form()\nform\n\n\nGet the submitted form value.\n\nform.value\n\nWorking with buttons\nCreate a button that triggers computation when clicked\n\nUse cases. To trigger a computation on button click and only on button click, use mo.ui.run_button().\n\nRecipe.\n\nImport packages\n\nimport marimo as mo\n\n\nCreate a run button\n\nbutton = mo.ui.run_button()\nbutton\n\n\nRun something only if the button has been clicked.\n\nmo.stop(not button.value, \"Click 'run' to generate a random number\")\n\nimport random\nrandom.randint(0, 1000)\n\nCreate a counter button\n\nUse cases. A counter button, i.e. a button that counts the number of times it has been clicked, is a helpful building block for reacting to button clicks (see other recipes in this section).\n\nRecipe.\n\nImport packages\n\nimport marimo as mo\n\n\nUse mo.ui.button and its on_click argument to create a counter button.\n\n# Initialize the button value to 0, increment it on every click\nbutton = mo.ui.button(value=0, on_click=lambda count: count + 1)\nbutton\n\n\nGet the button value\n\nbutton.value\n\nCreate a toggle button\n\nUse cases. Toggle between two states using a button with a button that toggles between True and False. (Tip: you can also just use mo.ui.switch.)\n\nRecipe.\n\nImport packages\n\nimport marimo as mo\n\n\nUse mo.ui.button and its on_click argument to create a toggle button.\n\n# Initialize the button value to False, flip its value on every click.\nbutton = mo.ui.button(value=False, on_click=lambda value: not value)\nbutton\n\n\nToggle between two outputs using the button value.\n\nmo.md(\"True!\") if button.value else mo.md(\"False!\")\n\nRe-run a cell when a button is pressed\n\nUse cases. For example, you have a cell showing a random sample of data, and you want to resample on button press.\n\nRecipe.\n\nImport packages\n\nimport marimo as mo\n\n\nCreate a button without a value, to function as a trigger.\n\nbutton = mo.ui.button()\nbutton\n\n\nReference the button in another cell.\n\n# the button acts as a trigger: every time it is clicked, this cell is run\nbutton\n\n# Replace with your custom logic\nimport random\nrandom.randint(0, 100)\n\nRun a cell when a button is pressed, but not before\n\nUse cases. Wait for confirmation before executing downstream cells (similar to a form).\n\nRecipe.\n\nImport packages\n\nimport marimo as mo\n\n\nCreate a counter button.\n\nbutton = mo.ui.button(value=0, on_click=lambda count: count + 1)\nbutton\n\n\nOnly execute when the count is greater than 0.\n\n# Don't run this cell if the button hasn't been clicked, using mo.stop.\n# Alternatively, use an if expression.\nmo.stop(button.value == 0)\n\nmo.md(f\"The button was clicked {button.value} times\")\n\nReveal an output when a button is pressed\n\nUse cases. Incrementally reveal a user interface.\n\nRecipe.\n\nImport packages\n\nimport marimo as mo\n\n\nCreate a counter button.\n\nbutton = mo.ui.button(value=0, on_click=lambda count: count + 1)\nbutton\n\n\nShow an output after the button is clicked.\n\nmo.md(\"#\" + \"üçÉ\" * button.value) if button.value > 0 else None\n\nCaching\nCache expensive computations\n\nUse case. Because marimo runs cells automatically as code and UI elements change, it can be helpful to cache expensive intermediate computations. For example, perhaps your notebook computes t-SNE, UMAP, or PyMDE embeddings, and exposes their parameters as UI elements. Caching the embeddings for different configurations of the elements would greatly speed up your notebook.\n\nRecipe.\n\nUse functools to cache function outputs given inputs.\n\nimport functools\n\n@functools.cache\ndef compute_predictions(problem_parameters):\n   # replace with your own function/parameters\n   ...\n\n\nWhenever compute_predictions is called with a value of problem_parameters it has not seen, it will compute the predictions and store them in a cache. The next time it is called with the same parameters, instead of recomputing the predictions, it will return the previously computed value from the cache.\n\nSee our best practices guide to learn more.\n\nNext\nAPI Reference\nPrevious\nDeploying\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nControl Flow\nShow an output conditionally\nRun a cell on a timer\nRequire form submission before sending UI value\nStop execution of a cell and its descendants\nGrouping UI elements together\nCreate an array of UI elements\nCreate a dictionary of UI elements\nEmbed a dynamic number of UI elements in another output\nCreate a hstack (or vstack) of UI elements with on_change handlers\nCreate a table column of buttons with on_change handlers\nCreate a form with multiple UI elements\nWorking with buttons\nCreate a button that triggers computation when clicked\nCreate a counter button\nCreate a toggle button\nRe-run a cell when a button is pressed\nRun a cell when a button is pressed, but not before\nReveal an output when a button is pressed\nCaching\nCache expensive computations"
  },
  {
    "title": "Deploying - marimo",
    "url": "https://docs.marimo.io/guides/deploying/index.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nOverview\nReactivity\nInteractivity\nSQL\nRun as an app\nRun as a script\nOutputs\nDataframes\nPlotting\nEditor features\nToggle navigation of Editor features\nTheming\nBest practices\nToggle navigation of Best practices\nComing from other tools\nToggle navigation of Coming from other tools\nIntegrating with marimo\nToggle navigation of Integrating with marimo\nReactive state\nOnline playground\nExporting\nConfiguration\nTroubleshooting\nDeploying\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nDeploying\n\nYou can deploy marimo in three ways:\n\nvia an edit server, which allows you to create and edit notebooks. On the CLI, this is launched with marimo edit, and is similar to jupyter notebook.\n\nvia a run server, which allows you serve marimo notebooks as read-only web apps. On the CLI, this is launched with marimo run notebook.py\n\nprogrammatically, which allows you serve read-only marimo apps as part of other ASGI applications, for example using FastAPI.\n\nSharing lightweight notebooks on the web\n\nTo share notebooks on the public web, try using our online playground . Our playground runs entirely in the browser ‚Äì no backend required, via WASM.\n\nOr, to share notebooks with email-based authorization, you can also try our free community cloud, which is also powered by WASM.\n\nWASM notebooks support most but not all Python features and packages.\n\nDeploying an edit server\n\nHere are a few ways to deploy an edit server on a remote instance:\n\nWith ssh-port forwarding, using marimo edit --headless.\n\nVia docker and our prebuilt containers.\n\nVia a deployment service such as Railway.\n\nBehind JupyterHub.\n\nDeploying as read-only apps\n\nThese guides help you deploy marimo notebooks as read-only apps.\n\n\t\n\n\n\n\nRunning the marimo backend programmatically\n\n\t\n\nProgrammatically run and customize read-only marimo apps\n\n\n\n\nDeploy with Docker\n\n\t\n\nDeploy with Docker\n\n\n\n\nAuthentication\n\n\t\n\nAuthentication and security\n\n\n\n\nDeploy to our public gallery\n\n\t\n\nDeploy to our public gallery\n\n\n\n\nDeploy to Marimo Cloud\n\n\t\n\nDeploy to Marimo Cloud\n\n\n\n\nDeploy to Ploomber Cloud\n\n\t\n\nDeploy to Ploomber Cloud\n\nHealth and status endpoints\n\nThe following endpoints may be useful when deploying your application:\n\n/health - A health check endpoint that returns a 200 status code if the application is running as expected\n\n/healthz - Same as above, just a different name for easier integration with cloud providers\n\n/api/status - A status endpoint that returns a JSON object with the status of the server\n\nConfiguration\n\nIf you would like to deploy your application at a subpath, you can set the --base-url flag when running your application.\n\nmarimo run app.py --base-url /subpath\n\nIncluding code in your application\n\nYou can include code in your application by using the --include-code flag when running your application.\n\nmarimo run app.py --include-code\n\nNext\nRecipes\nPrevious\nTroubleshooting\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nDeploying an edit server\nDeploying as read-only apps\nHealth and status endpoints\nConfiguration\nIncluding code in your application"
  },
  {
    "title": "Troubleshooting - marimo",
    "url": "https://docs.marimo.io/guides/troubleshooting.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nOverview\nReactivity\nInteractivity\nSQL\nRun as an app\nRun as a script\nOutputs\nDataframes\nPlotting\nEditor features\nToggle navigation of Editor features\nTheming\nBest practices\nToggle navigation of Best practices\nComing from other tools\nToggle navigation of Coming from other tools\nIntegrating with marimo\nToggle navigation of Integrating with marimo\nReactive state\nOnline playground\nExporting\nConfiguration\nTroubleshooting\nDeploying\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nTroubleshooting\n\nThis guide covers common issues and unexpected behaviors you might encounter when using marimo notebooks, along with ways to debug and resolve them. If your issue isn‚Äôt covered here, try checking our FAQ.\n\nWhy aren‚Äôt my cells running?\n\nIf you‚Äôre expecting cells to run in response to changes in other cells, but they‚Äôre not, consider the following:\n\nCheck for mutations\n\nmarimo doesn‚Äôt track mutations to objects. If you‚Äôre modifying an object in one cell and expecting another cell to react, this won‚Äôt work as expected.\n\nInstead of mutating objects across cells, try creating new objects or performing all mutations within the same cell.\n\nRead more about reactivity.\n\nVerify cell connections\n\nUse the Dependency Panel or Variable Panel to check if your cells are actually connected as you expect.\n\nOpen the Dependency Panel (graph icon) or Variable Panel (variable icon) in the left sidebar.\n\nLook for arrows connecting your cells or check which cells are listed as using each variable.\n\nIf connections are missing, review your variable usage to ensure cells are properly referencing each other.\n\nDependency graph showing cell connections.\nWhy is my cell running unexpectedly?\n\nIf a cell is running more often than you anticipate:\n\nCheck cell dependencies\n\nUse the Dependency Panel or Variable Panel to see what‚Äôs triggering your cell:\n\nOpen the Dependency Panel or Variable Panel.\n\nLocate your cell and examine its incoming connections.\n\nYou might find unexpected dependencies that are causing the cell to run.\n\nUnderstand global vs local variables vs functions args\n\nEnsure you‚Äôre not inadvertently using a global variables when intending to use a local variable or function argument:\n\nCheck for any variables used in your cell that aren‚Äôt defined within it.\n\nConsider using local variables (prefixed with _) for values that shouldn‚Äôt be consumed by other cells.\n\nWhy is my UI element‚Äôs value being reset?\n\nIf a UI element‚Äôs value keeps resetting:\n\nCheck that cell defining the UI element isn‚Äôt rerunning\n\nIf the cell defining the UI element reruns, it will reset the element‚Äôs value to its initial value argument. You may be able to avoid this by splitting the UI element definition into a separate cell.\n\nUse state for persistence\n\nIf you need to maintain UI element values across cell runs, consider using mo.state:\n\n# Declare state in a separate cell\nget_value, set_value = mo.state(initial_value)\n\nelement = mo.ui.slider(0, 10, value=get_value(), on_change=set_value)\n\n\nThis way, the value persists even if the cell defining the element reruns.\n\nHow can I force one cell to run after another?\n\nIf you need to ensure a specific execution order:\n\nUse explicit dependencies\n\nCreate an explicit dependency by using a variable from the first cell in the second:\n\n# Cell 1\nresult = some_computation()\n\n# Cell 2\n_ = result  # This creates a dependency on Cell 1\nfurther_computation()\n\nConsider refactoring\n\nIf you find yourself needing to force execution order often, it might be a sign that your notebook structure could be improved:\n\nTry to organize your cells so that natural data flow creates the desired order.\n\nConsider combining related operations into single cells where appropriate.\n\nGeneral debugging tips\n\nUse the Variables Panel to inspect variable values and see where they‚Äôre defined and used.\n\nAdd print statements or use mo.md() to output debug information in cell outputs.\n\nTemporarily disable cells to isolate issues.\n\nUse the ‚ÄúLazy‚Äù runtime configuration to see which cells are being marked as stale without automatically running them.\n\nRemember, marimo‚Äôs reactivity is based on global variable definitions and references, and mutations to objects aren‚Äôt tracked. Keeping this in mind can help you understand and debug unexpected behaviors in your notebooks.\n\nNext\nDeploying\nPrevious\nConfiguration\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nWhy aren‚Äôt my cells running?\nCheck for mutations\nVerify cell connections\nWhy is my cell running unexpectedly?\nCheck cell dependencies\nUnderstand global vs local variables vs functions args\nWhy is my UI element‚Äôs value being reset?\nCheck that cell defining the UI element isn‚Äôt rerunning\nUse state for persistence\nHow can I force one cell to run after another?\nUse explicit dependencies\nConsider refactoring\nGeneral debugging tips"
  },
  {
    "title": "Exporting - marimo",
    "url": "https://docs.marimo.io/guides/exporting.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nOverview\nReactivity\nInteractivity\nSQL\nRun as an app\nRun as a script\nOutputs\nDataframes\nPlotting\nEditor features\nToggle navigation of Editor features\nTheming\nBest practices\nToggle navigation of Best practices\nComing from other tools\nToggle navigation of Coming from other tools\nIntegrating with marimo\nToggle navigation of Integrating with marimo\nReactive state\nOnline playground\nExporting\nConfiguration\nTroubleshooting\nDeploying\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nExporting\n\nExport marimo notebooks to other file formats at the command line using\n\nmarimo export\n\nExport to static HTML\n\nExport the current view your notebook to static HTML via the notebook menu:\n\nDownload as static HTML.\n\nYou can also export to HTML at the command-line:\n\nmarimo export html notebook.py -o notebook.html\n\n\nor watch the notebook for changes and automatically export to HTML:\n\nmarimo export html notebook.py -o notebook.html --watch\n\nExport to a Python script\n\nExport to a flat Python script in topological order, so the cells adhere to their dependency graph.\n\nmarimo export script notebook.py -o notebook.script.py\n\n\nTop-level await not supported\n\nExporting to a flat Python script does not support top-level await. If you have top-level await in your notebook, you can still execute the notebook as a script with python notebook.py.\n\nExport to markdown\n\nExport to markdown notebook in top to bottom order, so the cells are in the order as they appear in the notebook.\n\nmarimo export md notebook.py -o notebook.md\n\n\nThis can be useful to plug into other tools that read markdown, such as Quarto or MyST.\n\nYou can also convert the markdown back to a marimo notebook:\n\nmarimo convert notebook.md > notebook.py\n\nExport to Jupyter notebook\n\nExport to Jupyter notebook in topological order, so the cells adhere to their dependency graph.\n\nmarimo export ipynb notebook.py -o notebook.ipynb\n\nüèùÔ∏è Embed marimo outputs in HTML using Islands\n\nPreview\n\nIslands are an early feature. While the API likely won‚Äôt change, there are some improvements we‚Äôd like to make before we consider them stable. Please let us know on GitHub if you run into any issues or have any feedback!\n\nmarimo islands are a way to embed marimo outputs and/or python code in your HTML that will become interactive when the page is loaded. This is useful for creating interactive blog posts, tutorials, and educational materials, all powered by marimo‚Äôs reactive runtime.\n\nCheck out an example island-powered document.\n\nIslands in action\n\nAdvanced topic!\n\nIslands are an advanced concept that is meant to be a building block for creating integrations with existing tools such as static site generators or documentation tools.\n\nIn order to use marimo islands, you need to import the necessary JS/CSS headers in your HTML file, and use our custom HTML tags to define the islands.\n\n<head>\n  <!-- marimo js/ccs -->\n  <script\n    type=\"module\"\n    src=\"https://cdn.jsdelivr.net/npm/@marimo-team/islands@<version>/dist/main.js\"\n  ></script>\n  <link\n    href=\"https://cdn.jsdelivr.net/npm/@marimo-team/islands@<version>/dist/style.css\"\n    rel=\"stylesheet\"\n    crossorigin=\"anonymous\"\n  />\n  <!-- fonts -->\n  <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n  <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n  <link\n    href=\"https://fonts.googleapis.com/css2?family=Fira+Mono:wght@400;500;700&amp;family=Lora&amp;family=PT+Sans:wght@400;700&amp;display=swap\"\n    rel=\"stylesheet\"\n  />\n  <link\n    rel=\"stylesheet\"\n    href=\"https://cdn.jsdelivr.net/npm/katex@0.16.10/dist/katex.min.css\"\n    integrity=\"sha384-wcIxkf4k558AjM3Yz3BBFQUbk/zgIYC2R0QpeeYb+TwlBVMrlgLqwRjRtGZiK7ww\"\n    crossorigin=\"anonymous\"\n  />\n</head>\n\n<body>\n  <marimo-island data-app-id=\"main\" data-cell-id=\"MJUe\" data-reactive=\"true\">\n    <marimo-cell-output>\n      <span class=\"markdown\">\n        <span class=\"paragraph\">Hello, islands!</span>\n      </span>\n    </marimo-cell-output>\n    <marimo-cell-code hidden>mo.md('Hello islands üèùÔ∏è!')</marimo-cell-code>\n  </marimo-island>\n</body>\n\nGenerating islands\n\nWhile you can generate the HTML code for islands yourself, it it recommend to use our MarimoIslandGenerator class to generate the HTML code for you.\n\nclass marimo.MarimoIslandGenerator(app_id: str = 'main')\n\nGenerates Marimo islands for embedding in other pages.\n\nThis is a great way to use another SSG framework that converts Python code to HTML using marimo-islands.\n\nGenerally you will want to:\n\nFind all the code snippets and add them to the generator.\n\nBuild the app.\n\nReplace all code snippets with the rendered HTML.\n\nInclude the header in the\n\ntag.\n\nExample\nfrom marimo import MarimoIslandGenerator\n\ngenerator = MarimoIslandGenerator()\nblock1 = generator.add_code(\"import marimo as mo\")\nblock2 = generator.add_code(\"mo.md('Hello, islands!')\")\n\n# Build the app\napp = await generator.build()\n\n# Render the app\noutput = f\"\"\"\n<html>\n    <head>\n        {generator.render_head()}\n    </head>\n    <body>\n        {block1.render(display_output=False)}\n        {block2.render()}\n    </body>\n</html>\n\"\"\"\n\n\nPUBLIC METHODS\n\nfrom_file(filename[, display_code])\n\n\t\n\nCreate a MarimoIslandGenerator and populate MarimoIslandStubs using code cells from a marimo *.py file.\n\n\n\n\nadd_code(code[, display_code, ...])\n\n\t\n\nAdd a code cell to the app.\n\n\n\n\nbuild()\n\n\t\n\nBuild the app.\n\n\n\n\nrender_head(*[, version_override, ...])\n\n\t\n\nRender the header for the app.\n\n\n\n\nrender_init_island()\n\n\t\n\nRenders a static html MarimoIsland str which displays a spinning initialization loader while Pyodide loads and disappears once the kernel is ready to use.\n\n\n\n\nrender_body(*[, include_init_island, ...])\n\n\t\n\nRender the body for the app.\n\n\n\n\nrender_html(*[, version_override, ...])\n\n\t\n\nRender reactive html for the app.\n\nstatic from_file(filename: str, display_code: bool = False) ‚Üí MarimoIslandGenerator\n\nCreate a MarimoIslandGenerator and populate MarimoIslandStubs using code cells from a marimo *.py file.\n\nArgs:\n\nfilename (str): Marimo .py filename to convert to reactive HTML.\n\ndisplay_code (bool): Whether to display the code in HTML snippets.\n\nadd_code(code: str, display_code: bool = False, display_output: bool = True, is_reactive: bool = True, is_raw: bool = False) ‚Üí MarimoIslandStub\n\nAdd a code cell to the app.\n\nArgs:\n\ncode (str): The code to add to the app.\n\ndisplay_code (bool): Whether to display the code in the HTML.\n\ndisplay_output (bool): Whether to display the output in the HTML.\n\nis_raw (bool): Whether to handled the code without formatting.\n\nis_reactive (bool): Whether this code block will run with pyodide.\n\nasync build() ‚Üí App\n\nBuild the app. This should be called after adding all the code cells.\n\nReturns:\n\nApp: The built app.\n\nrender_head(*, version_override: str = '0.8.18', _development_url: str | bool = False) ‚Üí str\n\nRender the header for the app. This should be included in the\n\ntag of the page.\n\nArgs:\n\nversion_override (str): Marimo version to use for loaded js/css.\n\n_development_url (str): If True, uses local marimo islands js.\n\nrender_init_island() ‚Üí str\n\nRenders a static html MarimoIsland str which displays a spinning initialization loader while Pyodide loads and disappears once the kernel is ready to use.\n\nrender_body(*, include_init_island: bool = True, max_width: str | None = None, margin: str | None = None, style: str | None = None) ‚Üí str\n\nRender the body for the app. This should be included in the\n\ntag of the page.\n\nArgs: - include_init_island (bool): If True, adds initialization loader. - max_width (str): CSS style max_width property. - margin (str): CSS style margin property. - style (str): CSS style. Overrides max_width and margin.\n\nrender_html(*, version_override: str = '0.8.18', _development_url: str | bool = False, include_init_island: bool = True, max_width: str | None = None, margin: str | None = None, style: str | None = None) ‚Üí str\n\nRender reactive html for the app.\n\nArgs:\n\nversion_override (str): Marimo version to use for loaded js/css.\n\n_development_url (str): If True, uses local marimo islands js.\n\ninclude_init_island (bool): If True, adds initialization loader.\n\nmax_width (str): CSS style max_width property.\n\nmargin (str): CSS style margin property.\n\nstyle (str): CSS style. Overrides max_width and margin.\n\nNext\nConfiguration\nPrevious\nOnline playground\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nExport to static HTML\nExport to a Python script\nExport to markdown\nExport to Jupyter notebook\nüèùÔ∏è Embed marimo outputs in HTML using Islands\nIslands in action\nGenerating islands\nMarimoIslandGenerator\nMarimoIslandGenerator.from_file()\nMarimoIslandGenerator.add_code()\nMarimoIslandGenerator.build()\nMarimoIslandGenerator.render_head()\nMarimoIslandGenerator.render_init_island()\nMarimoIslandGenerator.render_body()\nMarimoIslandGenerator.render_html()"
  },
  {
    "title": "Configuration - marimo",
    "url": "https://docs.marimo.io/guides/configuration.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nOverview\nReactivity\nInteractivity\nSQL\nRun as an app\nRun as a script\nOutputs\nDataframes\nPlotting\nEditor features\nToggle navigation of Editor features\nTheming\nBest practices\nToggle navigation of Best practices\nComing from other tools\nToggle navigation of Coming from other tools\nIntegrating with marimo\nToggle navigation of Integrating with marimo\nReactive state\nOnline playground\nExporting\nConfiguration\nTroubleshooting\nDeploying\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nConfiguration\n\nmarimo offers two types of configuration: User Configuration and App Configuration. Both can be easily managed through the Settings menu in the marimo editor.\n\nApp Configuration\n\nApp Configuration is specific to each notebook and is stored in the notebook.py file. This allows you to customize various aspects of your notebook, including:\n\nNotebook width\n\nNotebook title\n\nCustom CSS\n\nAdditional app-specific settings\n\nand more\n\nUser Configuration\n\nUser Configuration applies globally across all marimo notebooks and is stored in a .marimo.toml file. marimo searches for this file in the following order:\n\nCurrent directory\n\nParent directories (moving up the tree)\n\nHome directory (~/.marimo.toml)\n\nIf no .marimo.toml file is found, marimo creates a default one in your home directory.\n\nWhile you can edit the .marimo.toml file directly, we recommend using the marimo UI for a more user-friendly experience. To view your current configuration and locate the config file, run:\n\nmarimo config show\n\n\nYou can customize:\n\nRuntime configuration\n\nHotkeys\n\nCompletion settings (auto-completion, AI copilot, etc.)\n\nDisplay settings (theme, font size, output placement, etc.)\n\nAutosave settings\n\nPackage management preferences\n\nServer settings\n\nVIM keybindings\n\nFormatting settings\n\nAI settings\n\nand more\n\nEnvironment Variables\n\nThere are some configuration options that can be set via environment variables. These are:\n\nEnvironment Variable\n\n\t\n\nDescription\n\n\t\n\nDefault Value\n\n\n\n\nMARIMO_OUTPUT_MAX_BYTES\n\n\t\n\nMaximum size of output that marimo will display. Outputs larger than this will be truncated.\n\n\t\n\n5,000,000 (5MB)\n\n\n\n\nMARIMO_STD_STREAM_MAX_BYTES\n\n\t\n\nMaximum size of standard stream (stdout/stderr) output that marimo will display. Outputs larger than this will be truncated.\n\n\t\n\n1,000,000 (1MB)\n\n\n\n\nMARIMO_SKIP_UPDATE_CHECK\n\n\t\n\nIf set to ‚Äú1‚Äù, marimo will skip checking for updates when starting.\n\n\t\n\nNot set\n\n\n\n\nMARIMO_SQL_DEFAULT_LIMIT\n\n\t\n\nDefault limit for SQL query results. If not set, no limit is applied.\n\n\t\n\nNot set\n\nNext\nTroubleshooting\nPrevious\nExporting\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nApp Configuration\nUser Configuration\nEnvironment Variables"
  },
  {
    "title": "Reactive state - marimo",
    "url": "https://docs.marimo.io/guides/state.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nOverview\nReactivity\nInteractivity\nSQL\nRun as an app\nRun as a script\nOutputs\nDataframes\nPlotting\nEditor features\nToggle navigation of Editor features\nTheming\nBest practices\nToggle navigation of Best practices\nComing from other tools\nToggle navigation of Coming from other tools\nIntegrating with marimo\nToggle navigation of Integrating with marimo\nReactive state\nOnline playground\nExporting\nConfiguration\nTroubleshooting\nDeploying\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nReactive state\n\nAdvanced topic!\n\nThis guide covers reactive state (mo.state), an advanced topic.\n\nYou likely don‚Äôt need reactive state. UI elements already have built-in state, their associated value, which you can access with their value attribute. For example, mo.ui.slider() has a value that is its current position on an interval, while mo.ui.button() has a value that can be configured to count the number of times it has been clicked, or to toggle between True and False. Additionally, interacting with UI elements bound to global variables automatically executes cells that reference those variables, letting you react to changes by just reading their value attributes. This functional paradigm is the preferred way of reacting to UI interactions in marimo. So if you think you need to use mo.state, make sure to first read the guide on interactivity. Chances are, the reactive execution built into UI elements will suffice. (For example, you don‚Äôt need reactive state to handle a button click.)\n\nThat said, here are some signs you might need mo.state:\n\nyou need to maintain historical state related to a UI element that can‚Äôt be computed from its built-in value (e.g., all values the user has ever input into a form)\n\nyou need to synchronize two different UI elements (e.g., so that interacting with either one controls the other)\n\nyou need to introduce cycles across cells\n\nIf one of these cases applies to you, then read on. mo.state lets you make all kinds of interesting applications, but like mutable state in general, it can complicate notebook development and has the potential to introduce hard-to-find bugs.\n\nYou can build powerful, interactive notebooks and apps using just mo.ui and reactivity.\n\nBut sometimes, you might want interactions to mutate state:\n\nYou‚Äôre building a checklist, and you want to maintain a list of action items, even as you add and remove some items.\n\nA proof-of-concept TODO list made using state.\n\nYou want to tie two different UI elements so that updating one updates the other.\n\nUse state to tie two elements together.\n\nFor cases like these, marimo provides the function mo.state(), which creates a state object and returns a getter and setter function. When you call the setter function in one cell, all other cells that reference the getter function via a global variable are automatically run (similar to UI elements).\n\nState and UI elements are similar\n\nState is analogous to UI elements. When you interact with a UI element, all cells that reference that element via a global variable run automatically with the new value. In the same way, when you update state via the setter, all other cells that reference the getter via a global variable run automatically with the new value.\n\nState is particularly useful when used in conjunction with a UIElement‚Äôs on_change callback to run side effects based on user input.\n\nCreating state\n\nmo.state() takes an initial state value as its argument, creates a state object, and returns\n\na getter function for reading the state\n\na setter function for updating the state\n\nFor exaxmple,\n\nget_counter, set_counter = mo.state(0)\n\n\nAssign state to global variables!\n\nWhen using mo.state(), you must assign the state getter to a global variable. This is similar to UI elements work.\n\nReading state\n\nAccess the state‚Äôs latest value via the getter:\n\nget_counter()\n\nUpdating state\n\nYou can update a state‚Äôs value by calling its setter function with a new value. For example,\n\nset_counter(1)\n\n\nTo update the state based on its current value, pass a function that takes the current state value as an argument and returns a new value\n\nset_counter(lambda count: count + 1)\n\n\nA single rule determines what happens next:\n\nState reactivity rule\n\nWhen a state setter function is called in one cell, marimo automatically runs all other cells that reference any global variables assigned to the state getter.\n\nThis rule has some important aspects:\n\nOnly cells that read the state getter via a global variable will be run.\n\nThe cell that called the setter won‚Äôt be re-run, even if it references the getter. This restriction helps prevent against bugs that could otherwise arise. To lift this restriction, and allow the caller cell to be re-run, create your state with mo.state(value, allow_self_loops=True).\n\nNotice how similar this rule is to the reactivity rule for UI element interactions.\n\nUsing state with UI elements\n\nEvery UI element takes an optional on_change callback, a function that takes the new value of the element and does anything with it. You can use the setter function in an on_change callback to mutate state.\n\nUse state sparingly\n\nYou can get far using just mo.ui, without state. But judiciously using state can simplify the implementation of highly interactive notebooks/apps, and also enables new use cases. The next few examples showcase good uses of state.\n\nExample: counter\n\nThe next few cells implement a counter controlled by two buttons. This particular example could be implemented without state (try it!), but the implementation using state is simpler.\n\nimport marimo as mo\n\nget_counter, set_counter = mo.state(0)\n\nincrement = mo.ui.button(\n    label=\"increment\",\n    on_change=lambda _: set_counter(lambda v: v + 1),\n)\n\ndecrement = mo.ui.button(\n    label=\"decrement\",\n    on_change=lambda _: set_counter(lambda v: v - 1),\n)\n\nmo.hstack([increment, decrement], justify=\"center\")\n\nmo.md(\n    f\"\"\"\n    The counter's current value is **{get_counter()}**!\n\n    This cell runs automatically on button click, even though it \n    doesn't reference either button. \n    \"\"\"\n)\n\nExample: tied elements\n\nThis example shows how to tie two different UI elements so that each one‚Äôs value depends on the other. This is impossible to do without mo.state.\n\nimport marimo as mo\n\nget_x, set_x = mo.state(0)\n\nx = mo.ui.slider(\n    0, 10, value=get_x(), on_change=set_x, label=\"$x$:\"\n)\n\nx_plus_one = mo.ui.number(\n    1,\n    11,\n    value=get_x() + 1,\n    on_change=lambda v: set_x_state(v - 1),\n    label=\"$x + 1$:\",\n)\n\n[x, x_plus_one]\n\n\nCreate tied UI elements in separate cells\n\nNotice that we created the slider and number elements in different cells. When tying elements, this is necessary, because calling a setter in a cell queues all other cells reading the state to run, not including the one that just called the setter.\n\nCycles at runtime\n\nYou can use state to introduce cycles across cells at runtime. This lets you tie multiple UI elements together, for example. Just be careful not to introduce an infinite loop!\n\nmarimo programs are statically parsed into directed acyclic graphs (DAGs) involving cells, and state doesn‚Äôt change that. Think of state setters as hooking into the DAG: at runtime, when they‚Äôre invoked (and only when they‚Äôre invoked), they trigger additional computation.\n\nExample: todo list\n\nThe next few cells use state to create a todo list.\n\nimport marimo as mo\nfrom dataclasses import dataclass\n\n@dataclass\nclass Task:\n    name: str\n    done: bool = False\n\n\nget_tasks, set_tasks = mo.state([])\ntask_added, set_task_added = mo.state(False)\n\n# Refresh the text box whenever a task is added\ntask_added\n\ntask_entry_box = mo.ui.text(placeholder=\"a task ...\")\n\ndef add_task():\n    if task_entry_box.value:\n        set_tasks(lambda v: v + [Task(task_entry_box.value)])\n        set_task_added(True)\n\ndef clear_tasks():\n    set_tasks(lambda v: [task for task in v if not task.done])\n\nadd_task_button = mo.ui.button(\n    label=\"add task\",\n    on_change=lambda _: add_task(),\n)\n\nclear_tasks_button = mo.ui.button(\n    label=\"clear completed tasks\",\n    on_change=lambda _: clear_tasks()\n)\n\ntask_list = mo.ui.array(\n    [mo.ui.checkbox(value=task.done, label=task.name) for task in get_tasks()],\n    label=\"tasks\",\n    on_change=lambda v: set_tasks(\n        lambda tasks: [Task(task.name, done=v[i]) for i, task in enumerate(tasks)]\n    ),\n)\n\nmo.hstack(\n    [task_entry_box, add_task_button, clear_tasks_button], justify=\"start\"\n)\n\nNext\nOnline playground\nPrevious\nCustom UI elements\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nCreating state\nReading state\nUpdating state\nUsing state with UI elements\nExample: counter\nExample: tied elements\nExample: todo list"
  },
  {
    "title": "Custom UI elements - marimo",
    "url": "https://docs.marimo.io/guides/integrating_with_marimo/custom_ui_plugins.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nOverview\nReactivity\nInteractivity\nSQL\nRun as an app\nRun as a script\nOutputs\nDataframes\nPlotting\nEditor features\nToggle navigation of Editor features\nTheming\nBest practices\nToggle navigation of Best practices\nComing from other tools\nToggle navigation of Coming from other tools\nIntegrating with marimo\nToggle navigation of Integrating with marimo\nRichly display objects\nCustom UI elements\nReactive state\nOnline playground\nExporting\nConfiguration\nTroubleshooting\nDeploying\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nCustom UI elements\n\nBuild custom UI plugins that hook into marimo‚Äôs reactive execution engine by using anywidget.\n\nanywidget is a Python library and specification for creating custom Jupyter-compatible widgets. marimo supports anywidget, allowing you to import anywidget widgets or create your own custom widgets and use them in your notebooks and apps.\n\nImporting a widget\n\nYou can use anywidgets that others have built, such as quak or drawdata, directly in marimo.\n\nHere is an example using drawdata:\n\n# pip install drawdata\nfrom drawdata import ScatterWidget\n\nwidget = mo.ui.anywidget(ScatterWidget())\n\n# In another cell, you can access the widget's value\nwidget.value\n\n# You can also access the widget's specific properties\nwidget.data\nwidget.data_as_polars\n\n\nFor additional examples, see our repo.\n\nCustom widget\nimport anywidget\nimport traitlets\nimport marimo as mo\n\nclass CounterWidget(anywidget.AnyWidget):\n  # Widget front-end JavaScript code\n  _esm = \"\"\"\n    function render({ model, el }) {\n      let getCount = () => model.get(\"count\");\n      let button = document.createElement(\"button\");\n      button.innerHTML = `count is ${getCount()}`;\n      button.addEventListener(\"click\", () => {\n        model.set(\"count\", getCount() + 1);\n        model.save_changes();\n      });\n      model.on(\"change:count\", () => {\n        button.innerHTML = `count is ${getCount()}`;\n      });\n      el.appendChild(button);\n    }\n    export default { render };\n  \"\"\"\n  _css = \"\"\"\n    button {\n      padding: 5px !important;\n      border-radius: 5px !important;\n      background-color: #f0f0f0 !important;\n\n      &:hover {\n        background-color: lightblue !important;\n        color: white !important;\n      }\n    }\n  \"\"\"\n\n  # Stateful property that can be accessed by JavaScript & Python\n  count = traitlets.Int(0).tag(sync=True)\n\nwidget = mo.ui.anywidget(CounterWidget())\n\n\n# In another cell, you can access the widget's value\nwidget.value\n\n# You can also access the widget's specific properties\nwidget.count\n\nclass marimo.ui.anywidget(widget: AnyWidget)\n\nCreate a UIElement from an AnyWidget. This proxies all the widget‚Äôs attributes and methods.\n\nExample.\n\nfrom drawdata import ScatterWidget\nimport marimo as mo\n\nscatter = ScatterWidget()\nscatter = mo.ui.anywidget(scatter)\n\n# In another cell, access its value\n# This works for all widgets\nscatter.value\n\n# Or attributes specifically on the ScatterWidget\nscatter.data_as_pandas\nscatter.data_as_polars\n\n\nAttributes.\n\nvalue: The value of the widget‚Äôs traits as a dictionary.\n\nwidget: The widget being wrapped.\n\nInitialization Args.\n\nwidget: The widget to wrap.\n\nPUBLIC METHODS\n\nInherited from UIElement\nInherited from Html\n\nPUBLIC DATA ATTRIBUTES:\n\nInherited from UIElement\nInherited from Html\nNext\nReactive state\nPrevious\nRichly display objects\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nImporting a widget\nCustom widget\nanywidget"
  },
  {
    "title": "Richly display objects - marimo",
    "url": "https://docs.marimo.io/guides/integrating_with_marimo/displaying_objects.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nOverview\nReactivity\nInteractivity\nSQL\nRun as an app\nRun as a script\nOutputs\nDataframes\nPlotting\nEditor features\nToggle navigation of Editor features\nTheming\nBest practices\nToggle navigation of Best practices\nComing from other tools\nToggle navigation of Coming from other tools\nIntegrating with marimo\nToggle navigation of Integrating with marimo\nRichly display objects\nCustom UI elements\nReactive state\nOnline playground\nExporting\nConfiguration\nTroubleshooting\nDeploying\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nRichly display objects\n\nmarimo has built-in rich representations of many objects, including native Python objects like lists and dicts as well as marimo objects like UI elements and libraries, including matplotlib, seaborn, Plotly, altair pandas, and more. These rich representations are displayed for the last expression of a cell, or when using mo.output.append.\n\nYou can register rich displays with marimo for your own objects.\n\nOption 1: Implement a _mime_ method\n\nWhen displaying an object, marimo‚Äôs media viewer checks for the presence of a method called _mime_. This method should take no arguments and return a tuple of two strings, the mime type and data to be displayed.\n\nExamples.\n\nOption 2: Add a formatter to the marimo repo\n\nWhen you don‚Äôt have the ability to implement a _mime_ method on the type you want displayed, you can register custom formatters with marimo.\n\nWe welcome contributors to add formatters to the marimo codebase. Look at our codebase for examples, then open a pull request.\n\nanywidget\n\nNext\nCustom UI elements\nPrevious\nIntegrating with marimo\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nOption 1: Implement a _mime_ method\nOption 2: Add a formatter to the marimo repo"
  },
  {
    "title": "Coming from Jupyter - marimo",
    "url": "https://docs.marimo.io/guides/coming_from/jupyter.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nOverview\nReactivity\nInteractivity\nSQL\nRun as an app\nRun as a script\nOutputs\nDataframes\nPlotting\nEditor features\nToggle navigation of Editor features\nTheming\nBest practices\nToggle navigation of Best practices\nComing from other tools\nToggle navigation of Coming from other tools\nComing from Jupyter\nComing from Jupytext\nComing from Papermill\nComing from Streamlit\nIntegrating with marimo\nToggle navigation of Integrating with marimo\nReactive state\nOnline playground\nExporting\nConfiguration\nTroubleshooting\nDeploying\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nComing from Jupyter\n\nIf you‚Äôre coming from Jupyter, this guide will help you get started with marimo. Fun fact: the guide is itself a marimo notebook!\n\nNext\nComing from Jupytext\nPrevious\nComing from other tools\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo"
  },
  {
    "title": "Integrating with marimo - marimo",
    "url": "https://docs.marimo.io/guides/integrating_with_marimo/index.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nOverview\nReactivity\nInteractivity\nSQL\nRun as an app\nRun as a script\nOutputs\nDataframes\nPlotting\nEditor features\nToggle navigation of Editor features\nTheming\nBest practices\nToggle navigation of Best practices\nComing from other tools\nToggle navigation of Coming from other tools\nIntegrating with marimo\nToggle navigation of Integrating with marimo\nRichly display objects\nCustom UI elements\nReactive state\nOnline playground\nExporting\nConfiguration\nTroubleshooting\nDeploying\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nIntegrating with marimo\n\nThese guides will help you integrate your objects with marimo and hook into marimo‚Äôs reactive execution engine for UI plugins.\n\nStill need help? Reach out to us on Discord or GitHub issues.\n\nChecking if running in a marimo notebook\n\nYou can check if Python is running in a marimo notebook with mo.running_in_notebook. This can be helpful when developing library code that integrates with marimo.\n\n\t\n\n\n\n\nRichly display objects\n\n\t\n\nRichly display objects by hooking into marimo‚Äôs media viewer\n\n\n\n\nCustom UI elements\n\n\t\n\nBuild custom UI plugins that hook into marimo‚Äôs reactive execution engine\n\nNext\nRichly display objects\nPrevious\nComing from Streamlit\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo"
  },
  {
    "title": "Coming from Streamlit - marimo",
    "url": "https://docs.marimo.io/guides/coming_from/streamlit.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nOverview\nReactivity\nInteractivity\nSQL\nRun as an app\nRun as a script\nOutputs\nDataframes\nPlotting\nEditor features\nToggle navigation of Editor features\nTheming\nBest practices\nToggle navigation of Best practices\nComing from other tools\nToggle navigation of Coming from other tools\nComing from Jupyter\nComing from Jupytext\nComing from Papermill\nComing from Streamlit\nIntegrating with marimo\nToggle navigation of Integrating with marimo\nReactive state\nOnline playground\nExporting\nConfiguration\nTroubleshooting\nDeploying\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nComing from Streamlit\n\nIf you‚Äôre familiar with Streamlit and looking to transition to marimo, read on. The biggest difference between Streamlit and marimo is that Streamlit can only be used for data apps, whereas marimo is a notebook-first programming environment that makes it effortless to run notebooks as apps.\n\nKey Differences\n\nNotebook vs. App Framework:\n\nmarimo is primarily a reactive notebook environment, while Streamlit is an app framework.\n\nmarimo notebooks can be run as apps ‚Äì often with better performance than streamlit apps ‚Äì but they‚Äôre designed with a notebook-first approach.\n\nWhen creating streamlit apps, it is common to first prototype them as Jupyter notebooks, then migrate and refactor them into streamlit apps. With marimo, every notebook is automatically an app; there‚Äôs no migration step needed.\n\nExecution Model:\n\nmarimo uses a reactive execution model that, on interaction or code change, runs the minimal subset of notebook code needed to keep your notebook up-to-date.\n\nStreamlit reruns the entire script on each interaction, which frequently causes performance issues.\n\nFile Format:\n\nmarimo notebooks and Streamlit apps are pure Python files (.py).\n\nmarimo‚Äôs structure allows for more fine-grained reactivity.\n\nUnlike streamlit files, marimo files can be executed as Python scripts from the command-line, and can be imported and used as a module by other Python programs. For example, other programs can reuse cells from a marimo notebook.\n\nUI Elements:\n\nBoth offer UI elements like sliders, text fields, and tables.\n\nIn streamlit, creating a UI element automatically outputs it to the display. -In marimo, the creation of a UI element is separated from its display, meaning that you can easily create custom layouts and higher-order elements, and even emit the same UI element twice.\n\nmarimo support the anywidget spec for custom UI components, letting you reuse widgets that were originally developed for the Jupyter ecosystem,\n\nstreamlit has its own system for creating custom components.\n\nBuilt-in Editor:\n\nmarimo includes a built-in editor for notebooks, designed specifically for working with data.\n\nStreamlit relies on external editors.\n\nBoth approaches have their pros and cons.\n\nWorking with data.:\n\nmarimo‚Äôs notebook environment allows for iterative and interactive development and exploration, letting it serve as your daily driver for working with data. marimo even has native support for SQL.\n\nStreamlit is exclusively used for building standalone data apps.\n\nCommon Streamlit Features in marimo\n1. Displaying text\n\nStreamlit:\n\nimport streamlit as st\nst.markdown(\n    \"\"\"\n    # Greetings\n    Hello world\n    \"\"\"\n)\n\n\nmarimo:\n\nimport marimo as mo\nmo.md(\n    \"\"\"\n    # Greetings\n    Hello world\n    \"\"\"\n)\n\n2. Displaying Data\n\nStreamlit:\n\nst.dataframe(df)\n\n\nmarimo:\n\ndf  # Last expression in a cell is automatically displayed\n\n3. Input Widgets\n\nStreamlit:\n\nage = st.slider(\"How old are you?\", 0, 130, 25)\n\n\nmarimo:\n\nage = mo.ui.slider(label=\"How old are you?\", start=0, stop=130, value=25)\nmo.md(f\"One more question: {age}\") # marimo can achieve more advanced composition\n\n4. Buttons\n\nStreamlit:\n\nif st.button(\"Click me\"):\n    st.write(\"Button clicked!\")\n\n\nmarimo:\n\nbutton = mo.ui.run_button(\"Click me\")\n\n# In another cell\nif button.value:\n    mo.output.replace(mo.md(\"Button clicked!\"))\n\n# Or\nmo.md(\"Button clicked!\") if button.value else None\n\n5. Layouts\n\nStreamlit:\n\ncol1, col2 = st.columns(2)\nwith col1:\n    st.write(\"Column 1\")\nwith col2:\n    st.write(\"Column 2\")\n\n\nmarimo:\n\nmo.hstack([\n    mo.md(\"Column 1\"),\n    mo.md(\"Column 2\")\n])\n\n6. Advanced Layouts (tabs, accordions)\n\nStreamlit:\n\nwith st.expander(\"Expand me\"):\n    st.write(\"Hello from the expander!\")\n\n\nmarimo:\n\nmo.accordion({\"Expand me\": \"Hello from the expander!\"})\n\n\nmarimo‚Äôs unique approach to composition allows for more flexible layouts with unlimited nesting.\n\n6. Plotting\n\nStreamlit:\n\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\nax.plot([1, 2, 3, 4])\nst.pyplot(fig)\n\n\nmarimo:\n\nimport matplotlib.pyplot as plt\n\nplt.plot([1, 2, 3, 4])\nplt.gca()  # Last expression is displayed\n\n7. Caching\n\nStreamlit:\n\n@st.cache_data\ndef expensive_computation(args):\n    # ...\n\n\nmarimo:\n\n@functools.cache\ndef expensive_computation(args):\n    # ...\n\n8. Session State\n\nStreamlit uses st.session_state for persisting data. In marimo, you can use regular Python variables, as the notebook maintains consistent state for cells that are not re-executed.\n\n9. Running as an App\n\nStreamlit:\n\nstreamlit run your_app.py\n\n\nmarimo:\n\nmarimo run your_notebook.py\n\nKey Concepts to Remember\n\nIn marimo, cells are automatically re-executed when their dependencies change. But only the affected cells are re-executed, making it far more efficient than a naively written streamlit program.\n\nUI elements in marimo are typically assigned to variables and their values accessed via the value attribute.\n\nmarimo‚Äôs mo.md() function is versatile and can include both text and UI elements with f-strings.\n\nmarimo‚Äôs notebook-first approach allows it to be used for all kinds of data work, including exploratory data analysis, data engineering, machine learning experimentation and model training, library documentation and examples, and more.\n\nNext\nIntegrating with marimo\nPrevious\nComing from Papermill\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nKey Differences\nCommon Streamlit Features in marimo\n1. Displaying text\n2. Displaying Data\n3. Input Widgets\n4. Buttons\n5. Layouts\n6. Advanced Layouts (tabs, accordions)\n6. Plotting\n7. Caching\n8. Session State\n9. Running as an App\nKey Concepts to Remember"
  },
  {
    "title": "Coming from Jupytext - marimo",
    "url": "https://docs.marimo.io/guides/coming_from/jupytext.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nOverview\nReactivity\nInteractivity\nSQL\nRun as an app\nRun as a script\nOutputs\nDataframes\nPlotting\nEditor features\nToggle navigation of Editor features\nTheming\nBest practices\nToggle navigation of Best practices\nComing from other tools\nToggle navigation of Coming from other tools\nComing from Jupyter\nComing from Jupytext\nComing from Papermill\nComing from Streamlit\nIntegrating with marimo\nToggle navigation of Integrating with marimo\nReactive state\nOnline playground\nExporting\nConfiguration\nTroubleshooting\nDeploying\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nComing from Jupytext\n\nIf you‚Äôre familiar with Jupytext, you‚Äôll find that marimo offers similar functionality for working with notebooks as Python files, but without the need for additional setup or synchronization issues because marimo notebooks are stored as .py files by default. However, Jupytext works with IPython notebooks, whereas marimo works with marimo notebooks, which are not based on IPython/Jupyter. Here‚Äôs a comparison to help you transition smoothly.\n\nNotebook Format\n\nJupytext\n\n\t\n\nmarimo\n\n\n\n\nJupytext uses comments or special markers to define cell types in notebooks.\n\n\t\n\nNotebooks are pure Python (.py) files by default, using standard Python syntax, such as decorators and functions, to define cells.\n\nConverting Jupyter notebooks\nFrom .ipynb\n\nJupytext\n\n\t\n\nmarimo\n\n\n\n\njupytext --to py notebook.ipynb\n\n\t\n\nmarimo convert notebook.ipynb > notebook.py\n\nFrom py:percent notebooks to marimo notebooks\n\nIf you have a Python file encoded in the py:percent format, you can convert it to a marimo notebook in two steps:\n\njupytext --to notebook.ipynb percent_notebook.py\nmarimo convert notebook.ipynb > marimo_notebook.py\n\nTo .ipynb\n\nJupytext\n\n\t\n\nmarimo\n\n\n\n\njupytext --to notebook.ipynb notebook.py\n\n\t\n\nmarimo export ipynb notebook.py > notebook.ipynb\n\nEditing Notebooks\n\nJupytext\n\n\t\n\nmarimo\n\n\n\n\nRequires synchronization between .ipynb and .py files.\n\n\t\n\nEdit marimo notebooks files directly in the marimo editor (marimo edit¬†¬† notebook.py), and changes are read from and written to the same file.\n\nExecuting Notebooks\n\nJupytext\n\n\t\n\nmarimo\n\n\n\n\nUse Jupyter to edit notebooks interactively, or Papermill to execute notebooks from the command line.\n\n\t\n\nIn addition to running notebooks interactively (marimo¬†¬† notebook.py), you can run notebooks as scripts (python notebook.py) or as apps (marimo run notebook.py), passing values to them with marimo‚Äôs built-in support for CLI args.\n\nVersion Control\n\nJupytext\n\n\t\n\nmarimo\n\n\n\n\nJupyter notebooks are stored as JSON by default, making them difficult to meaningfully version with git. Use Jupytext to pair and synchronize jupyter notebooks with text representations for smaller git diffs.\n\n\t\n\nNotebooks are already in .py format, making them git-friendly by default. Small changes to the notebook are guaranteed to yield small diffs.\n\nMarkdown and Code Cells\n\nJupytext\n\n\t\n\nmarimo\n\n\n\n\nUses special markers or formats to distinguish cell types. Magical syntax is required.\n\n\t\n\nUses mo.md(\"...\") for Markdown content, and interpolate Python values with mo.md(f\"...\"); no magical syntax.\n\nDeployment\n\nJupytext\n\n\t\n\nmarimo\n\n\n\n\nRequires migrating to other libraries like Voila or Streamlit for deployment.\n\n\t\n\nCan be deployed as interactive web apps with marimo run.\n\nNext\nComing from Papermill\nPrevious\nComing from Jupyter\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nNotebook Format\nConverting Jupyter notebooks\nFrom .ipynb\nTo .ipynb\nEditing Notebooks\nExecuting Notebooks\nVersion Control\nMarkdown and Code Cells\nDeployment"
  },
  {
    "title": "Coming from Papermill - marimo",
    "url": "https://docs.marimo.io/guides/coming_from/papermill.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nOverview\nReactivity\nInteractivity\nSQL\nRun as an app\nRun as a script\nOutputs\nDataframes\nPlotting\nEditor features\nToggle navigation of Editor features\nTheming\nBest practices\nToggle navigation of Best practices\nComing from other tools\nToggle navigation of Coming from other tools\nComing from Jupyter\nComing from Jupytext\nComing from Papermill\nComing from Streamlit\nIntegrating with marimo\nToggle navigation of Integrating with marimo\nReactive state\nOnline playground\nExporting\nConfiguration\nTroubleshooting\nDeploying\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nComing from Papermill\n\nmarimo provides built-in support for parametrizing and executing marimo notebooks. If you‚Äôre familiar with Papermill, this guide will help you understand how to achieve similar functionality using marimo‚Äôs features.\n\nParameterizing Notebooks\n\nPapermill\n\nPapermill allows you to parameterize Jupyter notebooks by defining a ‚Äúparameters‚Äù cell and injecting values at runtime.\n\nmarimo\n\nmarimo offers two main ways to parameterize notebooks:\n\nCommand Line Arguments: Use mo.cli_args to access command-line arguments passed to your notebook.\n\nimport marimo as mo\n\n# Access CLI args\nargs = mo.cli_args()\nparam1 = args.get(\"param1\", \"default_value\")\n\n\nRun your notebook as a script with:\n\npython notebook.py -- --param1 value1\n\n\nRun your notebook as an app with:\n\nmarimo run notebook.py -- --param1 value1\n\n\nQuery Parameters: For web apps, use mo.query_params to access URL query parameters.\n\nimport marimo as mo\n\n# Access query params\nparams = mo.query_params()\nparam1 = params.get(\"param1\", \"default_value\")\n\n\nAccess your app with:\n\nmarimo run notebook.py\n\n\nThen visit:\n\nhttp://your-app-url/?param1=value1\n\nExecuting Notebooks\n\nPapermill\n\nPapermill allows you to execute notebooks programmatically and pass parameters.\n\nmarimo\n\nmarimo notebooks are pure Python files, making them easy to execute programmatically.\n\nRunning a named cell:\n\nAfter naming a cell in your file, you can run it using the cell execution API.\n\nfrom my_notebook import my_cell\n\n# last_expression is the visual output of the cell\n# definitions is a dictionary of the variables defined by the cell\nlast_expression, definitions = my_cell.run()\n\n\nThis API also allows for parametrizing the inputs to the cell; to learn more, make sure to checkout the example in our API reference.\n\nUsing subprocess:\n\nimport subprocess\n\nsubprocess.run([\"python\", \"notebook.py\", \"--\", \"--param1\", \"value1\"])\n\nStoring or Sharing Artifacts\n\nPapermill\n\nPapermill can store executed notebooks with output.\n\nmarimo\n\nmarimo offers several options for storing and sharing outputs:\n\nExport to HTML:\n\nmarimo export html notebook.py -o notebook.html -- -arg1 foo --arg2 bar\n\n\nDeploy as Web App:\n\nmarimo run notebook.py\n\n\nAuto-export HTML: You can configure marimo to automatically export to HTML during the editing process. This is configured in the marimo application settings directly in the editor. This way, after changes are made to your notebook, an HTML snapshot is generated, and placed in a .marimo/ directory in the same location as your notebook.\n\nWorkflow Integration\n\nPapermill\n\nPapermill is often used in data pipelines and workflow systems.\n\nmarimo\n\nmarimo notebooks can be easily integrated into workflows:\n\nAs Python Scripts: marimo notebooks are Python files, so they can be executed directly in most workflow systems. See our examples for integrating with popular tools.\n\nProgrammatic Execution: Importing notebook as Python modules or executing via subprocess allows for chaining together multiple notebooks in a workflow.\n\nNext\nComing from Streamlit\nPrevious\nComing from Jupytext\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nParameterizing Notebooks\nExecuting Notebooks\nStoring or Sharing Artifacts\nWorkflow Integration"
  },
  {
    "title": "Coming from other tools - marimo",
    "url": "https://docs.marimo.io/guides/coming_from/index.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nOverview\nReactivity\nInteractivity\nSQL\nRun as an app\nRun as a script\nOutputs\nDataframes\nPlotting\nEditor features\nToggle navigation of Editor features\nTheming\nBest practices\nToggle navigation of Best practices\nComing from other tools\nToggle navigation of Coming from other tools\nComing from Jupyter\nComing from Jupytext\nComing from Papermill\nComing from Streamlit\nIntegrating with marimo\nToggle navigation of Integrating with marimo\nReactive state\nOnline playground\nExporting\nConfiguration\nTroubleshooting\nDeploying\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nComing from other tools\n\nmarimo is a single tool that replaces jupyter, streamlit, jupytext, ipywidgets, papermill, and more.\n\nGuide\n\n\t\n\nDescription\n\n\n\n\nComing from Jupyter\n\n\t\n\nTransitioning from Jupyter notebooks\n\n\n\n\nComing from Jupytext\n\n\t\n\nTransitioning from Jupytext\n\n\n\n\nComing from Papermill\n\n\t\n\nTransitioning from Papermill\n\n\n\n\nComing from Streamlit\n\n\t\n\nTransitioning from Streamlit\n\nNext\nComing from Jupyter\nPrevious\nPerformance\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo"
  },
  {
    "title": "Performance - marimo",
    "url": "https://docs.marimo.io/guides/best_practices/performance.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nOverview\nReactivity\nInteractivity\nSQL\nRun as an app\nRun as a script\nOutputs\nDataframes\nPlotting\nEditor features\nToggle navigation of Editor features\nTheming\nBest practices\nToggle navigation of Best practices\nPerformance\nComing from other tools\nToggle navigation of Coming from other tools\nIntegrating with marimo\nToggle navigation of Integrating with marimo\nReactive state\nOnline playground\nExporting\nConfiguration\nTroubleshooting\nDeploying\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nPerformance\nCache computations with @functools.cache\n\nUse Python‚Äôs builtin functools library to cache expensive computations.\n\nFor example,\n\nimport functools\n\n@functools.cache\ndef compute_predictions(problem_parameters):\n ...\n\n\nWhenever compute_predictions is called with a value of problem_parameters it has not seen, it will compute the predictions and store them in a cache. The next time it is called with the same parameters, instead of recomputing the predictions, it will return the previously computed value from the cache.\n\nDisable expensive cells\n\nmarimo lets you temporarily disable cells from automatically running. This is helpful when you want to edit one part of a notebook without triggering execution of other parts. See the reactivity guide for more info.\n\nDisable notebook autorun\n\nFor expensive notebooks, you can disable autorun.\n\nLazy-load expensive elements or computations\n\nYou can lazily render UI elements that are expensive to compute using marimo.lazy.\n\nFor example,\n\nimport marimo as mo\n\ndata = db.query(\"SELECT * FROM data\")\nmo.lazy(mo.ui.table(data))\n\n\nIn this example, mo.ui.table(data) will not be rendered on the frontend until is it in the viewport. For example, an element can be out of the viewport due to scroll, inside a tab that is not selected, or inside an accordion that is not open.\n\nHowever, in this example, data is eagerly computed, while only the rendering of the table is lazy. It is possible to lazily compute the data as well: see the next example.\n\nimport marimo as mo\n\ndef expensive_component():\n    import time\n    time.sleep(1)\n    data = db.query(\"SELECT * FROM data\")\n    return mo.ui.table(data)\n\naccordion = mo.ui.accordion({\n    \"Charts\": mo.lazy(expensive_component)\n})\n\n\nIn this example, we pass a function to mo.lazy instead of a component. This function will only be called when the user opens the accordion. In this way, expensive_component lazily computed and we only query the database when the user needs to see the data. This can be useful when the data is expensive to compute and the user may not need to see it immediately.\n\nNext\nComing from other tools\nPrevious\nBest practices\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nCache computations with @functools.cache\nDisable expensive cells\nDisable notebook autorun\nLazy-load expensive elements or computations"
  },
  {
    "title": "Best practices - marimo",
    "url": "https://docs.marimo.io/guides/best_practices/index.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nOverview\nReactivity\nInteractivity\nSQL\nRun as an app\nRun as a script\nOutputs\nDataframes\nPlotting\nEditor features\nToggle navigation of Editor features\nTheming\nBest practices\nToggle navigation of Best practices\nPerformance\nComing from other tools\nToggle navigation of Coming from other tools\nIntegrating with marimo\nToggle navigation of Integrating with marimo\nReactive state\nOnline playground\nExporting\nConfiguration\nTroubleshooting\nDeploying\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nBest practices\n\nHere are best practices for writing marimo notebooks.\n\nUse global variables sparingly. Keep the number of global variables in your program small to avoid name collisions. If you have intermediate variables, encapsulate them in functions or prefix them with an underscore (_tmp = ...) to make them local to a cell.\n\nUse descriptive names. Use descriptive variable names, especially for global variables. This will help you minimize name clashes, and will also result in better code.\n\nUse functions. Encapsulate logic into functions to avoid polluting the global namespace with temporary or intermediate variables, and to avoid code duplication.\n\nUse Python modules. If your notebook gets too long, split complex logic into helper Python modules and import them into your notebook.\n\nMinimize mutations. marimo does not track mutations to objects. Try to only mutate an object in the cell that creates it, or create new objects instead of mutating existing ones.\n\nExample\n\nWrite idempotent cells. Write cells whose outputs and behavior are the same when given the same inputs (references); such cells are called idempotent. This will help you avoid bugs and cache expensive intermediate computations.\n\nPerformance\n\nFor tips on writing performant notebooks (e.g., how to cache intermediate outputs), see the performance guide.\n\nNext\nPerformance\nPrevious\nTheming\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo"
  },
  {
    "title": "Theming - marimo",
    "url": "https://docs.marimo.io/guides/theming.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nOverview\nReactivity\nInteractivity\nSQL\nRun as an app\nRun as a script\nOutputs\nDataframes\nPlotting\nEditor features\nToggle navigation of Editor features\nTheming\nBest practices\nToggle navigation of Best practices\nComing from other tools\nToggle navigation of Coming from other tools\nIntegrating with marimo\nToggle navigation of Integrating with marimo\nReactive state\nOnline playground\nExporting\nConfiguration\nTroubleshooting\nDeploying\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nTheming\n\nmarimo provides basic support for theming. You can include a custom CSS file in your notebook that will be applied to the entire notebook. This allows you to customize the appearance of your notebook to your liking.\n\nTo include a custom CSS file, in the configuration dropdown, add the relative file path to your CSS file in the Custom CSS field. Once saved, you should see the changes applied to your notebook:\n\napp = marimo.App(css_file=\"custom.css\")\n\nCSS Variables\n\nWe support only a few CSS variables as part of the ‚Äúpublic API‚Äù for theming. These are:\n\n--marimo-monospace-font\n--marimo-text-font\n--marimo-heading-font\n\n\nOther CSS Variables\n\nWe cannot guarantee that other CSS variables or classnames will be stable across versions.\n\nExample\n\nHere is an example of a custom CSS file that changes the font of the notebook:\n\n/* Load Inter from Google Fonts */\n@import url('https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap');\n\n:root {\n  --marimo-heading-font: 'Inter', sans-serif;\n}\n\n/* Increase paragraph font size and change color */\n.paragraph {\n  font-size: 1.2rem;\n  color: light-dark(navy, pink);\n}\n\nMore customizations\n\nWe want to hear from you! If you have any suggestions for more theming options, please let us know on GitHub\n\nNext\nBest practices\nPrevious\nHotkeys\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nCSS Variables\nExample\nMore customizations"
  },
  {
    "title": "Hotkeys - marimo",
    "url": "https://docs.marimo.io/guides/editor_features/hotkeys.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nOverview\nReactivity\nInteractivity\nSQL\nRun as an app\nRun as a script\nOutputs\nDataframes\nPlotting\nEditor features\nToggle navigation of Editor features\nEditor overview\nPackage management\nAI completion\nHotkeys\nTheming\nBest practices\nToggle navigation of Best practices\nComing from other tools\nToggle navigation of Coming from other tools\nIntegrating with marimo\nToggle navigation of Integrating with marimo\nReactive state\nOnline playground\nExporting\nConfiguration\nTroubleshooting\nDeploying\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nHotkeys\n\nIf you‚Äôd like to override the default hotkeys, you can do so in the hotkeys menu (Mod-Shift-h), or modifying your ~/.marimo.toml.\n\nYou can find a list of available hotkeys below:\n\nHotkey\n\n\n\n\ncell.aiCompletion\n\n\n\n\ncell.cellActions\n\n\n\n\ncell.complete\n\n\n\n\ncell.createAbove\n\n\n\n\ncell.createBelow\n\n\n\n\ncell.delete\n\n\n\n\ncell.findAndReplace\n\n\n\n\ncell.focusDown\n\n\n\n\ncell.focusUp\n\n\n\n\ncell.fold\n\n\n\n\ncell.foldAll\n\n\n\n\ncell.format\n\n\n\n\ncell.goToDefinition\n\n\n\n\ncell.hideCode\n\n\n\n\ncell.moveDown\n\n\n\n\ncell.moveUp\n\n\n\n\ncell.redo\n\n\n\n\ncell.run\n\n\n\n\ncell.runAndNewAbove\n\n\n\n\ncell.runAndNewBelow\n\n\n\n\ncell.selectNextOccurrence\n\n\n\n\ncell.sendToBottom\n\n\n\n\ncell.sendToTop\n\n\n\n\ncell.splitCell\n\n\n\n\ncell.undo\n\n\n\n\ncell.unfold\n\n\n\n\ncell.unfoldAll\n\n\n\n\ncell.viewAsMarkdown\n\n\n\n\nglobal.commandPalette\n\n\n\n\nglobal.focusBottom\n\n\n\n\nglobal.focusTop\n\n\n\n\nglobal.foldCode\n\n\n\n\nglobal.formatAll\n\n\n\n\nglobal.hideCode\n\n\n\n\nglobal.interrupt\n\n\n\n\nglobal.runStale\n\n\n\n\nglobal.save\n\n\n\n\nglobal.showHelp\n\n\n\n\nglobal.toggleLanguage\n\n\n\n\nglobal.toggleSidebar\n\n\n\n\nglobal.unfoldCode\n\n\n\n\nmarkdown.blockquote\n\n\n\n\nmarkdown.bold\n\n\n\n\nmarkdown.code\n\n\n\n\nmarkdown.italic\n\n\n\n\nmarkdown.link\n\n\n\n\nmarkdown.orderedList\n\n\n\n\nmarkdown.unorderedList\n\nNext\nTheming\nPrevious\nAI completion\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo"
  },
  {
    "title": "AI completion - marimo",
    "url": "https://docs.marimo.io/guides/editor_features/ai_completion.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nOverview\nReactivity\nInteractivity\nSQL\nRun as an app\nRun as a script\nOutputs\nDataframes\nPlotting\nEditor features\nToggle navigation of Editor features\nEditor overview\nPackage management\nAI completion\nHotkeys\nTheming\nBest practices\nToggle navigation of Best practices\nComing from other tools\nToggle navigation of Coming from other tools\nIntegrating with marimo\nToggle navigation of Integrating with marimo\nReactive state\nOnline playground\nExporting\nConfiguration\nTroubleshooting\nDeploying\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nAI completion\n\nmarimo comes with GitHub Copilot, a tool that helps you write code faster by suggesting in-line code suggestions based on the context of your current code.\n\nmarimo also comes with the ability to use AI for refactoring a cell, finishing writing a cell, or writing a full cell from scratch. This feature is currently experimental and is not enabled by default.\n\nGitHub Copilot\n\nThe marimo editor natively supports GitHub Copilot, an AI pair programmer, similar to VS Code.\n\nGet started with Copilot:\n\nInstall Node.js.\n\nEnable Copilot via the settings menu in the marimo editor.\n\nNote: Copilot is not yet available in our conda distribution; please install marimo using pip if you need Copilot.\n\nCodeium Copilot\n\nGo to the Codeium website and sign up for an account: https://codeium.com/\n\nInstall the browser extension: https://codeium.com/chrome_tutorial\n\nOpen the settings for the Chrome extension and click on ‚ÄúGet Token‚Äù\n\nRight-click on the extension window and select ‚ÄúInspect‚Äù to open the developer tools for the extension. Then click on ‚ÄúNetwork‚Äù\n\nCopy the token and paste it into the input area, and then press ‚ÄúEnter Token‚Äù\n\nThis action will log a new API request in the Network tab. Click on ‚ÄúPreview‚Äù to get the API key.\n\nPaste the API key in the marimo settings in the UI, or add it to your ~/.marimo.toml file as follows:\n\n[completion]\ncopilot = \"codeium\"\ncodeium_api_key = \"\"\n\nGenerate code with our AI assistant\n\nmarimo has built-in support for generating and refactoring code with AI, with a variety of providers. marimo works with both hosted AI providers, such as OpenAI and Anthropic, as well as local models served via Ollama.\n\nBelow we describe how to connect marimo to your AI provider. Once enabled, you can generate entirely new cells by clicking the ‚ÄúGenerate with AI‚Äù button at the bottom of your notebook. You can also refactor existing cells by inputting Ctrl/Cmd-Shift-e in a cell, opening an input to modify the cell using AI.\n\nUse AI to modify a cell by pressing `Ctrl/Cmd-Shift-e`.\nUsing OpenAI\n\nInstall openai: pip install openai\n\nAdd the following to your ~/.marimo.toml:\n\n[ai.open_ai]\n# Get your API key from https://platform.openai.com/account/api-keys\napi_key = \"sk-...\"\n# Choose a model, we recommend \"gpt-4-turbo\"\nmodel = \"gpt-4-turbo\"\n# Change the base_url if you are using a different OpenAI-compatible API\nbase_url = \"https://api.openai.com/v1\"\n\nUsing Anthropic\n\nTo use Anthropic with marimo:\n\nSign up for an account at Anthropic and grab your Anthropic Key.\n\nAdd the following to your ~/.marimo.toml:\n\n[ai.open_ai]\nmodel = \"claude-3-5-sonnet-20240620\"\n# or any model from https://docs.anthropic.com/en/docs/about-claude/models\n\n[ai.anthropic]\napi_key = \"sk-...\"\n\nUsing other AI providers\n\nmarimo supports OpenAI‚Äôs GPT-3.5 API by default. If your provider is compatible with OpenAI‚Äôs API, you can use it by changing the base_url in the configuration.\n\nFor other providers not compatible with OpenAI‚Äôs API, please submit a feature request or ‚Äúthumbs up‚Äù an existing one.\n\nUsing local models with Ollama\n\nOllama allows you to run open-source LLMs (e.g. Llama 3.1, Phi 3, Mistral, Gemma 2) on your local machine. To integrate Ollama with marimo:\n\nDownload and install Ollama.\n\nDownload the model you want to use:\n\nollama pull llama2\n\nWe also recommend codellama (code specific) or llama3.1 (more advanced, but larger).\n\nStart the Ollama server: ollama run llama2\n\nVisit http://localhost:11434 to confirm that the server is running.\n\nAdd the following to your ~/.marimo.toml:\n\n[ai.open_ai]\napi_key = \"ollama\" # This is not used, but required\nmodel = \"llama2\" # or the model you downloaded from above\nbase_url = \"http://localhost:11434/v1\"\n\nNext\nHotkeys\nPrevious\nPackage management\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nGitHub Copilot\nCodeium Copilot\nGenerate code with our AI assistant\nUsing OpenAI\nUsing Anthropic\nUsing other AI providers\nUsing local models with Ollama"
  },
  {
    "title": "Package management - marimo",
    "url": "https://docs.marimo.io/guides/editor_features/package_management.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nOverview\nReactivity\nInteractivity\nSQL\nRun as an app\nRun as a script\nOutputs\nDataframes\nPlotting\nEditor features\nToggle navigation of Editor features\nEditor overview\nPackage management\nAI completion\nHotkeys\nTheming\nBest practices\nToggle navigation of Best practices\nComing from other tools\nToggle navigation of Coming from other tools\nIntegrating with marimo\nToggle navigation of Integrating with marimo\nReactive state\nOnline playground\nExporting\nConfiguration\nTroubleshooting\nDeploying\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nPackage management\n\nmarimo supports package management for pip, rye, uv, poetry, pixi. When marimo comes across a module that is not installed, you will be prompted to install it using your preferred package manager.\n\nOnce the module is installed, all cells that depend on the module will be rerun.\n\nPackage Installation\n\nWe use some heuristic for guessing the package name in your registry (e.g. PyPI) from the module name. It is possible that the package name is different from the module name. If you encounter an error, please file an issue or help us by adding your mapping directly to the codebase.\n\nRunning marimo in a sandbox environment (uv only)\n\nIf you want to run marimo in a sandbox environment, you can use the --sandbox flag. This will create an isolated virtual environment (using uv) and install any packages listed in the script metadata, per PEP 723. If there is no package metadata in the script, marimo will still prompt you to install any missing packages.\n\nThis is useful when you want to run marimo in a clean environment without affecting your global environment.\n\nmarimo edit --sandbox notebook.py\n\nAuto-tracking inline script metadata\n\nWhen running with --sandbox, marimo will automatically track the package name metadata in your notebook file, per PEP 723. This metadata is used to manage the notebook‚Äôs dependencies and Python version.\n\nFor example, whenever you add or remove a package, marimo will automatically update the script metadata in your notebook file:\n\n# /// script\n# requires-python = \">=3.11\"\n# dependencies = [\n#     \"pandas==<version>\",\n#     \"altair==<version>\",\n# ]\n# ///\n\n\nThis means your notebook file is a completely self-contained artifact with all the necessary information to run.\n\nNext\nAI completion\nPrevious\nEditor overview\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nRunning marimo in a sandbox environment (uv only)\nAuto-tracking inline script metadata"
  },
  {
    "title": "Editor overview - marimo",
    "url": "https://docs.marimo.io/guides/editor_features/overview.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nOverview\nReactivity\nInteractivity\nSQL\nRun as an app\nRun as a script\nOutputs\nDataframes\nPlotting\nEditor features\nToggle navigation of Editor features\nEditor overview\nPackage management\nAI completion\nHotkeys\nTheming\nBest practices\nToggle navigation of Best practices\nComing from other tools\nToggle navigation of Coming from other tools\nIntegrating with marimo\nToggle navigation of Integrating with marimo\nReactive state\nOnline playground\nExporting\nConfiguration\nTroubleshooting\nDeploying\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nEditor overview\n\nThis guide introduces some of marimo editor‚Äôs features, including a variables panel, dependency graph viewer, table of contents, HTML export, GitHub copilot, code formatting, a feedback form, and more.\n\nConfiguration\n\nThe editor exposes of a number of settings for the current notebook, as well as user-wide configuration that will apply to all your notebooks. These settings include the option to display the current notebook in full width, to use vim keybindings, to enable GitHub copilot, and more.\n\nTo access these settings, click the gear icon in the top-right of the editor.\n\nConfigure settings.\n\nA non-exhaustive list of settings:\n\nOutputs above or below code cells\n\nDisable/enable autorun\n\nPackage installation\n\nVim keybindings\n\nDark mode\n\nAuto-save\n\nAuto-complete\n\nEditor font-size\n\nCode formatting with ruff/black\n\nGitHub Copilot\n\nLLM coding assistant\n\nModule autoreloading\n\nVim keybindings\n\nmarimo supports vim keybindings.\n\nAdditional bindings/features:\n\ngd - go to definition\n\ndd - when a cell is empty, delete it\n\nClick the gear icon to access notebook and editor settings.\nOverview panels\n\nmarimo ships with the IDE panels that provide an overview of your notebook:\n\nfile explorer: view the file tree, open other notebooks\n\nvariables: explore variable values, see where they are defined and used, with go-to-definition\n\ndata explorer: see dataframe and table schemas at a glance\n\ndependency graph: view dependencies between cells, drill-down on nodes and edges\n\ntable of contents: corresponding to your markdown\n\ndocumentation - move your text cursor over a symbol to see its documentation\n\nlogs: a continuous stream of stdout and stderr\n\nscratchpad: a scratchpad cell where you can execute throwaway code\n\nsnippets - searchable snippets to copy directly into your notebook\n\nfeedback - share feedback!\n\nThese panels can be toggled via the buttons in the left of the editor.\n\nCell actions\n\nClick the dot array to the right of a cell to pull up a context menu, or hold and drag to move the cell:\n\nAccess cell actions like code formatting, hiding code, and more through the cell context menu.\nRight-click menus\n\nmarimo supports context-sensitive right-click menus in various locations of the editor. Right-click on a cell to open a context-sensitive menu; right click on the create-cell button (the plus icon) to get options for the cell type to create.\n\nGo-to-definition\n\nClick on a variable in the editor to see where it‚Äôs defined and used\n\nCmd/Ctrl-Click on a variable to jump to its definition\n\nRight-click on a variable to see a context menu with options to jump to its definition\n\nKeyboard shortcuts\n\nWe‚Äôve kept some well-known keyboard shortcuts for notebooks (Ctrl-Enter, Shift-Enter), dropped others, and added a few of our own. Hit Ctrl/Cmd-Shift-H to pull up the shortcuts.\n\nWe know keyboard shortcuts are very personal; you can remap them in the configuration.\n\nMissing a shortcut? File a GitHub issue.\n\nCommand palette\n\nHit Cmd/Ctrl+K to open the command palette.\n\nQuickly access common commands with the command palette.\n\nMissing a command? File a GitHub issue.\n\nShare on our online playground\n\nGet a link to share your notebook via our online playground:\n\nOur online playground uses WebAssembly. Most but not all packages on PyPI are supported. Local files are not synchronized to our playground.\n\nExport to static HTML\n\nExport the current view your notebook to static HTML via the notebook menu:\n\nDownload as static HTML.\n\nYou can also export to HTML at the command-line:\n\nmarimo export html notebook.py -o notebook.html\n\nSend feedback\n\nThe question mark icon in the panel tray opens a dialog to send anonymous feedback. We welcome any and all feedback, from the tiniest quibbles to the biggest blue-sky dreams.\n\nSend anonymous feedback with our feedback form.\n\nIf you‚Äôd like your feedback to start a conversation (we‚Äôd love to talk with you!), please consider posting in our GitHub issues or Discord. But if you‚Äôre in a flow state and can‚Äôt context switch out, the feedback form has your back.\n\nNext\nPackage management\nPrevious\nEditor features\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nConfiguration\nVim keybindings\nOverview panels\nCell actions\nRight-click menus\nGo-to-definition\nKeyboard shortcuts\nCommand palette\nShare on our online playground\nExport to static HTML\nSend feedback"
  },
  {
    "title": "Editor features - marimo",
    "url": "https://docs.marimo.io/guides/editor_features/index.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nOverview\nReactivity\nInteractivity\nSQL\nRun as an app\nRun as a script\nOutputs\nDataframes\nPlotting\nEditor features\nToggle navigation of Editor features\nEditor overview\nPackage management\nAI completion\nHotkeys\nTheming\nBest practices\nToggle navigation of Best practices\nComing from other tools\nToggle navigation of Coming from other tools\nIntegrating with marimo\nToggle navigation of Integrating with marimo\nReactive state\nOnline playground\nExporting\nConfiguration\nTroubleshooting\nDeploying\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nEditor features\n\nThe marimo editor is the browser-based IDE in which you write marimo notebooks. We‚Äôve taken a batteries-included approach to designing the editor: it comes packed with features to make you productive when working with code and data.\n\nGuide\n\n\t\n\nDescription\n\n\n\n\nEditor overview\n\n\t\n\nAn overview of editor features and configuration\n\n\n\n\nPackage management\n\n\t\n\nUsing package managers in marimo\n\n\n\n\nAI completion\n\n\t\n\nCode with the help of a language model\n\n\n\n\nHotkeys\n\n\t\n\nOur hotkeys\n\nHighlights include:\n\na variables panel that lets you explore variable values and see where they are defined\n\na data explorer that lets you inspect dataframes and tables at a glance\n\nsmart module autoreloading that tells you which cells need to be rerun\n\ncode completion\n\nGitHub Copilot\n\nlanguage-model assisted coding\n\nvim keybindings\n\nlive documentation preiews as you type\n\nand much more.\n\nNext\nEditor overview\nPrevious\nPlotting\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo"
  },
  {
    "title": "Plotting - marimo",
    "url": "https://docs.marimo.io/guides/plotting.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nOverview\nReactivity\nInteractivity\nSQL\nRun as an app\nRun as a script\nOutputs\nDataframes\nPlotting\nEditor features\nToggle navigation of Editor features\nTheming\nBest practices\nToggle navigation of Best practices\nComing from other tools\nToggle navigation of Coming from other tools\nIntegrating with marimo\nToggle navigation of Integrating with marimo\nReactive state\nOnline playground\nExporting\nConfiguration\nTroubleshooting\nDeploying\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nPlotting\n\nmarimo supports most major plotting libraries, including Matplotlib, Seaborn, Plotly, Altair, and HoloViews. Just import your plotting library of choice and use it as you normally would.\n\nFor Altair and Plotly plots, marimo does something special: use mo.ui.altair_chart or mo.ui.plotly to connect frontend selections to Python!\n\nReactive plots!\n\nmarimo supports reactive plots via mo.ui.altair_chart and mo.ui.plotly! Select and filter with your mouse, and marimo automatically makes the selected data available in Python as a Pandas dataframe!\n\nReactive plots! ‚ö°\n\nRequirements\n\nReactive plots currently require Altair or Plotly. Install with pip install altair or pip install plotly, depending on which library you are using.\n\nAltair\n\nUse mo.ui.altair_chart to easily create interactive, selectable plots: selections you make on the frontend are automatically made available as Pandas dataframes in Python.\n\nWrap an Altair chart in mo.ui.altair_chart to make it reactive: select data on the frontend, access it via the chart‚Äôs value attribute (chart.value).\n\nDisabling automatic selection\n\nmarimo automatically adds a default selection based on the mark type, however, you may want to customize the selection behavior of your Altair chart. You can do this by setting chart_selection and legend_selection to False, and using .add_params directly on your Altair chart.\n\n# Create an interval selection\nbrush = alt.selection_interval(encodings=[\"x\"])\n\n_chart = (\n    alt.Chart(traces, height=150)\n    .mark_line()\n    .encode(x=\"index:Q\", y=\"value:Q\", color=\"traces:N\")\n    .add_params(brush) # add the selection to the chart\n)\n\nchart = mo.ui.altair_chart(\n    _chart,\n    # disable automatic selection\n    chart_selection=False,\n    legend_selection=False\n)\nchart # You can now access chart.value to get the selected data\n\n\nReactive plots are just one way that marimo makes your data tangible.\n\nExample\nimport marimo as mo\nimport altair as alt\nimport vega_datasets\n\n# Load some data\ncars = vega_datasets.data.cars()\n\n# Create an Altair chart\nchart = alt.Chart(cars).mark_point().encode(\n    x='Horsepower', # Encoding along the x-axis\n    y='Miles_per_Gallon', # Encoding along the y-axis\n    color='Origin', # Category encoding by color\n)\n\n# Make it reactive ‚ö°\nchart = mo.ui.altair_chart(chart)\n\n# In a new cell, display the chart and its data filtered by the selection\nmo.vstack([chart, chart.value.head()])\n\nLearning Altair\n\nIf you‚Äôre new to Altair, we highly recommend exploring the Altair documentation. Altair provides a declarative, concise, and simple way to create highly interactive and sophisticated plots.\n\nAltair is based on Vega-Lite, an exceptional tool for creating interactive charts that serves as the backbone for marimo‚Äôs reactive charting capabilities.\n\nConcepts\n\nLearn by doing? Skip this section!\n\nThis section summarizes the main concepts used by Altair (and Vega-Lite). Feel free to skip this section and return later.\n\nOur choice to use the Vega-Lite specification was driven by its robust data model, which is well-suited for data analysis. Some key concepts are summarized below. (For a more detailed explanation, with examples, we recommend the Basic Statistical Visualization tutorial from Altair.)\n\nData Source: This is the information that will be visualized in the chart. It can be provided in various formats such as a dataframe, a list of dictionaries, or a URL pointing to the data source.\n\nMark Type: This refers to the visual representation used for each data point on the chart. The options include ‚Äòbar‚Äô, ‚Äòdot‚Äô, ‚Äòcircle‚Äô, ‚Äòarea‚Äô, and ‚Äòline‚Äô. Each mark type offers a different way to visualize and interpret the data.\n\nEncoding: This is the process of mapping various aspects or dimensions of the data to visual characteristics of the marks. Encodings can be of different types:\n\nPositional Encodings: These are encodings like ‚Äòx‚Äô and ‚Äòy‚Äô that determine the position of the marks in the chart.\n\nCategorical Encodings: These are encodings like ‚Äòcolor‚Äô and ‚Äòshape‚Äô that categorize data points. They are typically represented in a legend for easy reference.\n\nTransformations: These are operations that can be applied to the data before it is visualized, for example, filtering and aggregation. These transformations allow for more complex and nuanced visualizations.\n\nAutomatically interactive. marimo adds interactivity automatically, based on the mark used and the encodings. For example, if you use a mark_point and an x encoding, marimo will automatically add a brush selection to the chart. If you add a color encoding, marimo will add a legend and a click selection.\n\nAutomatic Selections\n\nBy default mo.ui.altair_chart will make the chart and legend selectable. Depending on the mark type, the chart will either have a point or interval (‚Äúbrush‚Äù) selection. When using non-positional encodings (color, size, etc), mo.ui.altair_chart will also make the legend selectable.\n\nSelection configurable through *_selection params in mo.ui.altair_chart. See the API docs for details.\n\nNote\n\nYou may still add your own selection parameters via Altair or Vega-Lite. marimo will not override your selections.\n\nAltair transformations\n\nAltair supports a variety of transformations, such as filtering, aggregation, and sorting. These transformations can be used to create more complex and nuanced visualizations. For example, you can use a filter to show only the points that meet a certain condition, or use an aggregation to show the average value of a variable.\n\nIn order for marimo‚Äôs reactive plots to work with transformations, you must install vegafusion, as this feature uses chart.transformed_data (which requires version 1.4.0 or greater of the vegafusion packages).\n\n# These can be installed with pip using:\npip install \"vegafusion[embed]>=1.4.0\"\n# Or with conda using:\nconda install -c conda-forge \"vegafusion-python-embed>=1.4.0\" \"vegafusion>=1.4.0\"\n\nPlotly\n\nUse mo.ui.plotly to create selectable Plotly plots whose values are sent back to Python on selection.\n\nmarimo.ui.plotly(figure: go.Figure, config: Dict[str, Any] | None = None, renderer_name: str | None = None, *, label: str = '', on_change: Callable[[JSONType], None] | None = None) ‚Üí None\n\nMake reactive plots with Plotly.\n\nUse mo.ui.plotly to make plotly plots reactive: select data with your cursor on the frontend, get them as a list of dicts in Python!\n\nExample.\n\nimport plotly.express as px\nimport marimo as mo\nfrom vega_datasets import data\n\n_plot = px.scatter(\n    data.cars(), x=\"Horsepower\", y=\"Miles_per_Gallon\", color=\"Origin\"\n)\n\nplot = mo.ui.plotly(_plot)\n\n# View the plot and selected data\nmo.hstack([plot, plot.value])\n\n\nOr with custom configuration:\n\nplot = mo.ui.plotly(\n    _plot,\n    config={\"staticPlot\": True},\n)\n\n\nAttributes.\n\nvalue: a dict of the plot data\n\nranges: the selection of the plot; this may be an interval along the name of an axis\n\nInitialization Args.\n\nfigure: A plotly.graph_objects.Figure\n\nconfig: optional configuration for the plot This is a dictionary that is passed directly to the plotly. See the plotly documentation for more information: https://plotly.com/javascript/configuration-options/ This takes precedence over the default configuration of the renderer.\n\nrenderer_name: optional renderer to use for the plot. If this is not provided, the default renderer (pio.renderers.default) is used.\n\nlabel: optional text label for the element\n\non_change: optional callback to run when this element‚Äôs value changes\n\nmatplotlib\n\nTo output a matplotlib plot in a cell‚Äôs output area, include its Axes or Figure object as the last expression in your notebook. For example:\n\nplt.plot([1, 2])\n# plt.gca() gets the current `Axes`\nplt.gca()\n\n\nor\n\nfig, ax = plt.subplots()\n\nax.plot([1, 2])\nax\n\n\nIf you want to output the plot in the console area, use plt.show() or fig.show().\n\nInteractive plots\n\nTo make matplotlib plots interactive, use mo.mpl.interactive. (Matplotlib plots are not yet reactive.)\n\nNext\nEditor features\nPrevious\nDataframes\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nReactive plots! ‚ö°\nAltair\nDisabling automatic selection\nExample\nLearning Altair\nConcepts\nAutomatic Selections\nAltair transformations\nPlotly\nplotly()\nmatplotlib\nInteractive plots"
  },
  {
    "title": "Dataframes - marimo",
    "url": "https://docs.marimo.io/guides/dataframes.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nOverview\nReactivity\nInteractivity\nSQL\nRun as an app\nRun as a script\nOutputs\nDataframes\nPlotting\nEditor features\nToggle navigation of Editor features\nTheming\nBest practices\nToggle navigation of Best practices\nComing from other tools\nToggle navigation of Coming from other tools\nIntegrating with marimo\nToggle navigation of Integrating with marimo\nReactive state\nOnline playground\nExporting\nConfiguration\nTroubleshooting\nDeploying\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nDataframes\n\nmarimo makes you more productive when working with dataframes, the most common Python tool for interacting with data.\n\nDisplay dataframes in a rich, interactive table and chart views\n\nSelect data from tables or charts and get selections back as dataframes\n\nTransform dataframes with filters, groupbys, aggregations, and more, no code required\n\nmarimo integrates with Pandas and Polars dataframes natively. The examples on this page use Pandas, but Polars works too.\n\nDisplaying dataframes\n\nYou can display dataframes directly in the output area of a cell, by including them in the last expression of the cell:\n\nA raw dataframe output\nimport pandas as pd\n\ndf = pd.read_json(\n    \"https://raw.githubusercontent.com/vega/vega-datasets/master/data/cars.json\"\n)\ndf\n\n\nBy default the dataframe is displayed using mo.ui.table, which provides a a rich, interactive table view. You can also use mo.plain to revert to the to the default HTML representation.\n\ndf = pd.read_json(\n    \"https://raw.githubusercontent.com/vega/vega-datasets/master/data/cars.json\"\n)\nmo.plain(df)\n\n\nRich displays. You can display dataframes in rich tables or charts using the mo.ui.table or mo.ui.altair_chart elements.\n\nRich, interactive displays\nimport marimo as mo\nimport altair as alt\nimport pandas as pd\n\ndf = pd.read_json(\n    \"https://raw.githubusercontent.com/vega/vega-datasets/master/data/cars.json\"\n)[[\"Horsepower\", \"Miles_per_Gallon\", \"Origin\"]]\n\nmo.hstack(\n    [\n        mo.ui.table(df),\n        mo.ui.altair_chart(\n            alt.Chart(df)\n            .mark_point()\n            .encode(x=\"Horsepower\", y=\"Miles_per_Gallon\", color=\"Origin\")\n        ),\n    ],\n    widths=\"equal\",\n)\n\nSelecting dataframes\n\nSelect data in a table or Plotly/Altair plot, and your selection is automatically sent to Python as a Pandas dataframe.\n\nSelect rows in a table, get them back as a dataframe\n# Cell 1 - display a dataframe\nimport marimo as mo\nimport pandas as pd\n\ndf = pd.DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6]})\ntable = mo.ui.table(df, selection=\"multi\")\ntable\n\n# Cell 2 - display the selection\ntable.value\n\nTransforming dataframes\nNo-code transformations\n\nUse mo.ui.dataframe to interactively transform a dataframe with a GUI, no coding required!. When you‚Äôre done, you can copy the code that the GUI generated for you and paste it into your notebook.\n\nBuild transformations using a GUI\n# Cell 1\nimport marimo as mo\nimport pandas as pd\n\ndf = pd.DataFrame({\"person\": [\"Alice\", \"Bob\", \"Charlie\"], \"age\": [20, 30, 40]})\ntransformed_df = mo.ui.dataframe(df)\ntransformed_df\n\n# Cell 2\n# transformed_df.value holds the transformed dataframe\ntransformed_df.value\n\nCopy the code of the transformation\nCustom filters\n\nCreate custom filters with marimo UI elements, like sliders and dropdowns.\n\n# Cell 1 - create a dataframe\ndf = pd.DataFrame({\"person\": [\"Alice\", \"Bob\", \"Charlie\"], \"age\": [20, 30, 40]})\n\n# Cell 2 - create a filter\nage_filter = mo.ui.slider(start=0, stop=100, value=50, label=\"Max age\")\nage_filter\n\n# Cell 3 - display the transformed dataframe\nfiltered_df = df[df[\"age\"] < age_filter.value]\nmo.ui.table(filtered_df)\n\nPolars support\n\nmarimo also supports Polars, a modern, faster alternative to Pandas.\n\nExample.\n\nCheck out a full example here, or run it yourself:\n\nmarimo edit https://raw.githubusercontent.com/marimo-team/marimo/main/examples/third_party/polars_example.py\n\nNext\nPlotting\nPrevious\nOutputs\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nDisplaying dataframes\nSelecting dataframes\nTransforming dataframes\nNo-code transformations\nCustom filters\nPolars support"
  },
  {
    "title": "Outputs - marimo",
    "url": "https://docs.marimo.io/guides/outputs.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nOverview\nReactivity\nInteractivity\nSQL\nRun as an app\nRun as a script\nOutputs\nDataframes\nPlotting\nEditor features\nToggle navigation of Editor features\nTheming\nBest practices\nToggle navigation of Best practices\nComing from other tools\nToggle navigation of Coming from other tools\nIntegrating with marimo\nToggle navigation of Integrating with marimo\nReactive state\nOnline playground\nExporting\nConfiguration\nTroubleshooting\nDeploying\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nOutputs\n\nThe last expression of a cell is its visual output, rendered above the cell. Outputs are included in the ‚Äúapp‚Äù or read-only view of the notebook. marimo comes out of the box a number of elements to help you make rich outputs, documented in the API reference.\n\nMarkdown\n\nMarkdown is written with the marimo library function mo.md. Writing markdown programmatically lets you make dynamic markdown: interpolate Python values into markdown strings, conditionally render your markdown, and embed markdown in other objects.\n\nHere‚Äôs a simple hello world example:\n\nimport marimo as mo\n\nname = mo.ui.text(placeholder=\"Your name here\")\nmo.md(\n  f\"\"\"\n  Hi! What's your name?\n\n  {name}\n  \"\"\"\n)\n\nmo.md(\n  f\"\"\"\n  Hello, {name.value}!\n  \"\"\"\n)\n\n\nNotice that marimo knows how to render marimo objects in markdown: you can just embed them in mo.md() using an f-string, and marimo will figure out how to display them!\n\nFor other objects, like matplotlib plots, wrap them in mo.as_html() to tap into marimo‚Äôs media viewer:\n\nmo.md(\n  f\"\"\"\n  Here's a plot!\n\n  {mo.as_html(figure)}\n  \"\"\"\n)\n\nMarkdown editor\n\nmarimo automatically renders cells that only use mo.md(\"\"), without an f-string, in a markdown editor that supports common hotkeys.\n\nBecause the Markdown editor doesn‚Äôt support f-strings, you‚Äôll need to use mo.md directly to interpolate Python values into your Markdown. You can switch between the Markdown and Python editors by clicking the button in the top right.\n\nmarimo is pure Python, even when you're using markdown.\nLayout\n\nThe marimo library also comes with elements for laying out outputs, including mo.hstack, mo.vstack, mo.accordion, mo.ui.tabs, mo.sidebar, mo.nav_menu, mo.ui.table, and many more.\n\nMedia\n\nmarimo comes with functions to display media, including images, audio, video, pdfs, and more. See the API docs for more info.\n\nNext\nDataframes\nPrevious\nRun as a script\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nMarkdown\nMarkdown editor\nLayout\nMedia"
  },
  {
    "title": "Run as a script - marimo",
    "url": "https://docs.marimo.io/guides/scripts.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nOverview\nReactivity\nInteractivity\nSQL\nRun as an app\nRun as a script\nOutputs\nDataframes\nPlotting\nEditor features\nToggle navigation of Editor features\nTheming\nBest practices\nToggle navigation of Best practices\nComing from other tools\nToggle navigation of Coming from other tools\nIntegrating with marimo\nToggle navigation of Integrating with marimo\nReactive state\nOnline playground\nExporting\nConfiguration\nTroubleshooting\nDeploying\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nRun as a script\n\nYou can run marimo notebooks as scripts at the command line, just like any other Python script. For example,\n\npython my_marimo_notebook.py\n\n\nRunning a notebook as a script is useful when your notebook has side-effects, like writing to disk. Print statements and other console outputs will show up in your terminal.\n\nYou can pass arguments to your notebook at the command-line: see the docs page on CLI args to learn more.\n\nFuture plans\n\nIn the future, we may give you the option to generate a PDF or HTML of the cell outputs when running as a script.\n\nNext\nOutputs\nPrevious\nRun as an app\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo"
  },
  {
    "title": "Run as an app - marimo",
    "url": "https://docs.marimo.io/guides/apps.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nOverview\nReactivity\nInteractivity\nSQL\nRun as an app\nRun as a script\nOutputs\nDataframes\nPlotting\nEditor features\nToggle navigation of Editor features\nTheming\nBest practices\nToggle navigation of Best practices\nComing from other tools\nToggle navigation of Coming from other tools\nIntegrating with marimo\nToggle navigation of Integrating with marimo\nReactive state\nOnline playground\nExporting\nConfiguration\nTroubleshooting\nDeploying\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nRun as an app\n\nThe marimo CLI lets you run any notebook as an app: marimo run lays out the notebook as an app and starts a web server that hosts the resulting app.\n\nBy default, apps are laid out as a concatenation of their outputs, with code hidden. You can customize the layout using marimo‚Äôs built-in drag-and-drop grid editor; you can also choose to include code in the app view.\n\nCLI\nUsage: marimo run [OPTIONS] NAME [ARGS]...\n\n  Run a notebook as an app in read-only mode.\n\n  If NAME is a url, the notebook will be downloaded to a temporary file.\n\n  Example:\n\n      * marimo run notebook.py\n\nOptions:\n  -p, --port INTEGER             Port to attach to.\n  --host TEXT                    Host to attach to.  [default: 127.0.0.1]\n  --proxy TEXT                   Address of reverse proxy.\n  --headless                     Don't launch a browser.\n  --token / --no-token           Use a token for authentication. This enables\n                                 session-based authentication. A random token\n                                 will be generated if --token-password is not\n                                 set.\n\n                                 If --no-token is set, session-based\n                                 authentication will not be used.  [default:\n                                 no-token]\n  --token-password TEXT          Use a specific token for authentication. This\n                                 enables session-based authentication. A\n                                 random token will be generated if not set.\n  --include-code                 Include notebook code in the app.\n  --watch                        Watch the file for changes and reload the\n                                 app. If watchdog is installed, it will be\n                                 used to watch the file. Otherwise, file\n                                 watcher will poll the file every 1s.\n  --base-url TEXT                Base URL for the server. Should start with a\n                                 /.\n  --allow-origins TEXT           Allowed origins for CORS. Can be repeated.\n  --redirect-console-to-browser  Redirect console logs to the browser console.\n  --sandbox                      Run the command in an isolated virtual\n                                 environment using 'uv run --isolated'.\n                                 Requires `uv`.\n  --help                         Show this message and exit.\n\nLayout\n\nWhile editing a notebook with marimo edit, you can preview the notebook as an app by clicking the preview button in the bottom-left of the editor. (You can also use the command palette.)\n\nVertical layout\n\nThe default layout is the vertical layout: cell outputs are concatenated vertically and code is hidden. When combined with marimo‚Äôs built-in functions for laying out outputs, as well as its configurable app widths (configure via the notebook settings menu), the vertical layout can successfully support a wide breadth of application user interfaces.\n\nGrid layout\n\nIf you prefer a drag-and-drop experience over programmatic layout, consider using marimo‚Äôs grid editor for making your apps: with this editor, you simply drag outputs onto a grid to arrange them on the page.\n\nEnable the grid editor in the app preview, via a dropdown:\n\npic.twitter.com/DQpstGAmKh\n\n‚Äî marimo (@marimo_io) February 27, 2024\nGrid layout lets you drag and drop outputs to construct your app\n\nmarimo saves metadata about your constructed layout in a layouts folder; make sure to include this folder when sharing your notebook so that others can reconstruct your layout.\n\nSlides layout\n\nIf you prefer a slideshow-like experience, you can use the slides layout. Enable the slides layout in the app preview, via the same dropdown as above.\n\nUnlike the grid layout, the slides are much less customizable:\n\nThe order of the slides is determined by the order of the cells in the notebook.\n\nThe slides do not support drag-and-drop rearrangement or resizing.\n\nAll outputs are shown and all code is hidden.\n\nIf you need more control over the layout, please file an issue on GitHub, so we can properly prioritize this feature.\n\nNext\nRun as a script\nPrevious\nSQL\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nCLI\nLayout\nVertical layout\nGrid layout\nSlides layout"
  },
  {
    "title": "SQL - marimo",
    "url": "https://docs.marimo.io/guides/sql.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nOverview\nReactivity\nInteractivity\nSQL\nRun as an app\nRun as a script\nOutputs\nDataframes\nPlotting\nEditor features\nToggle navigation of Editor features\nTheming\nBest practices\nToggle navigation of Best practices\nComing from other tools\nToggle navigation of Coming from other tools\nIntegrating with marimo\nToggle navigation of Integrating with marimo\nReactive state\nOnline playground\nExporting\nConfiguration\nTroubleshooting\nDeploying\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nSQL\n\nWith marimo, you can mix-and-match both Python and SQL. To create a SQL cell, you first need to install additional dependencies, including duckdb. Install dependencies with\n\npip install marimo[sql]\n\n\nThis will enable SQL cells in your notebook. Once you‚Äôve installed the dependencies, you can create a SQL cell by right-clicking an Add Cell button and choosing ‚ÄúSQL cell‚Äù, by converting an empty cell to SQL via the cell context menu, or via the SQL button that appears when you mouse hover at the bottom of your notebook.\n\nAdd SQL Cell\n\nThis creates a ‚ÄúSQL‚Äù cell for you, while in reality this is actually Python code. Since we store marimo files as pure Python files, the translated code looks like:\n\noutput_df = mo.sql(f\"SELECT * FROM my_table LIMIT {max_rows.value}\")\n\n\nNotice that we have an output_df variable in the cell. This is a resulting Polars DataFrame (if you have polars installed) or a Pandas DataFrame (if you don‚Äôt). One of them must be installed in order to interact with the SQL result.\n\nThe SQL statement itself is an formatted string (f-string), so this means they can contain any valid Python code, such as the values of UI elements. This means your SQL statement and results can be reactive! üöÄ\n\nReference a local dataframe\n\nYou can reference a local dataframe in your SQL cell by using the name of the Python variable that holds the dataframe. If you have a database connection with a table of the same name, the database table will be used instead.\n\nReference a dataframe\n\nSince the output dataframe variable (_df) has an underscore, making it private, it is not referenceable from other cells.\n\nReference the output of a SQL cell\n\nDefining a non-private (non-underscored) output variable in the SQL cell allows you to reference the resulting dataframe in other Python and SQL cells.\n\nReference the SQL result\nQuerying files, databases, and APIs\n\nIn the above example, you may have noticed we queried an HTTP endpoint instead of a local dataframe. We are not only limited to querying local dataframes; we can also query files, databases, and APIs:\n\n-- or\nSELECT * FROM 's3://my-bucket/file.parquet';\n-- or\nSELECT * FROM read_csv('path/to/example.csv');\n-- or\nSELECT * FROM read_parquet('path/to/example.parquet');\n\n\nFor a full list you can check out the duckdb extensions.\n\nInteractive tutorial\n\nFor an interactive tutorial, run\n\nmarimo tutorial sql\n\n\nat your command-line.\n\nNext\nRun as an app\nPrevious\nInteractivity\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nReference a local dataframe\nReference the output of a SQL cell\nQuerying files, databases, and APIs\nInteractive tutorial"
  },
  {
    "title": "Interactivity - marimo",
    "url": "https://docs.marimo.io/guides/interactivity.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nOverview\nReactivity\nInteractivity\nSQL\nRun as an app\nRun as a script\nOutputs\nDataframes\nPlotting\nEditor features\nToggle navigation of Editor features\nTheming\nBest practices\nToggle navigation of Best practices\nComing from other tools\nToggle navigation of Coming from other tools\nIntegrating with marimo\nToggle navigation of Integrating with marimo\nReactive state\nOnline playground\nExporting\nConfiguration\nTroubleshooting\nDeploying\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nInteractivity\n\nOne of marimo‚Äôs most powerful features is its first-class support for interactive, stateful user interface (UI) elements, or ‚Äúwidgets‚Äù: create them using marimo.ui. Interacting with a UI element bound to a global variable automatically runs all cells that reference it.\n\nHow interactions run cells\n\nEvery UI element you make using marimo.ui has a value, accessible via its value attribute. When you interact with a UI element bound to a global variable, its value is sent back to Python. A single rule determines what happens next:\n\nInteraction rule\n\nWhen a UI element assigned to a global variable is interacted with, marimo automatically runs all cells that reference the variable (but don‚Äôt define it).\n\nIn the clip at the top of this page, interacting with the slider in the second cell re-runs the third cell (which outputs markdown) because it references the slider variable x. It doesn‚Äôt re-run the second cell, because that cell defines x.\n\nFor interactions on a UI element to have any effect, the element must be assigned to a global variable.\n\nDisplaying UI elements\n\nDisplay UI elements in the output area above a cell by including them in the last expression, just like any other object. You can also embed elements in markdown using Python f-strings, like so:\n\nslider = mo.ui.slider(1, 10)\nmo.md(f\"Choose a value: {slider})\")\n\nComposite elements\n\nComposite elements are advanced elements let you build UI elements out of other UI elements. The following composite elements are available:\n\nmo.ui.array\n\nmo.ui.dictionary\n\nmo.ui.batch\n\nmo.ui.form\n\nArrays and dictionaries. Use mo.ui.array and mo.ui.dictionary to logically group together related elements. These elements are especially useful when a set of UI elements is only known at runtime (so you can‚Äôt assign each to a global variable individually, but can assign them to an array or dictionary).\n\nYou can access the elements contained in an array or dictionary using Pythonic syntax, and embed these elements in other outputs. See their docstrings for code examples.\n\nBatch and form. Use these powerful elements to group together multiple UI elements into a single element with custom formatting, and gate the sending of an element‚Äôs value on form submission.\n\nUse a form to gate value updates on submission\nUse an array to group together elements or create a collection of elements that is determined at runtime\nBuilding custom UI elements using our plugin API\n\nYou can build your own reactive and interactive UI elements using anywidget! See our docs on building custom UI elements to learn more.\n\nNext\nSQL\nPrevious\nReactivity\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nHow interactions run cells\nDisplaying UI elements\nComposite elements\nBuilding custom UI elements using our plugin API"
  },
  {
    "title": "Reactivity - marimo",
    "url": "https://docs.marimo.io/guides/reactivity.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nOverview\nReactivity\nInteractivity\nSQL\nRun as an app\nRun as a script\nOutputs\nDataframes\nPlotting\nEditor features\nToggle navigation of Editor features\nTheming\nBest practices\nToggle navigation of Best practices\nComing from other tools\nToggle navigation of Coming from other tools\nIntegrating with marimo\nToggle navigation of Integrating with marimo\nReactive state\nOnline playground\nExporting\nConfiguration\nTroubleshooting\nDeploying\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nReactivity\n\nEvery marimo notebook is a directed acyclic graph (DAG) that models how data flows across blocks of Python code, i.e., cells.\n\nmarimo react to code changes, automatically executing cells with the latest data. Execution order is determined by the DAG, not by the order of cells on the page.\n\nReactive execution is based on a single rule:\n\nRuntime Rule\n\nWhen a cell is run, marimo automatically runs all other cells that reference any of the global variables it defines.\n\nLazy evaluation\n\nThe runtime can be configured to be lazy, only running cells when you ask for them to be run and marking affected cells as stale, instead of automatically running them. Learn more in the runtime configuration guide\n\nReferences and definitions\n\nA marimo notebook is a DAG where nodes are cells and edges are data dependencies. marimo creates this graph by statically analyzing each cell (i.e., without running it) to determine its\n\nreferences, the global variables it reads but doesn‚Äôt define;\n\ndefinitions, the global variables it defines.\n\nGlobal variables\n\nA variable can refer to any Python object. In particular, functions, classes, and imported names are all variables.\n\nThere is an edge from one cell to another if the latter cell references any global variables defined by the former cell. The rule for reactive execution can be restated in terms of the graph: when a cell is run, its descendants are run automatically.\n\nGlobal variable names must be unique\n\nTo make sure your notebook is DAG, marimo requires that every global variable be defined by only one cell.\n\nLocal variables\n\nVariables prefixed with an underscore are local to a cell (.e.g., _x). You can use this in a pinch to fix multiple definition errors, but try instead to refactor your code.\n\nThis rule encourages you to keep the number of global variables in your program small, which is generally considered good practice.\n\nLocal variables\n\nGlobal variables prefixed with an underscore (e.g., _x) are ‚Äúlocal‚Äù to a cell: they can‚Äôt be read by other cells. Multiple cells can reuse the same local variables names.\n\nIf you encapsulate your code using functions and classes when needed, you won‚Äôt need to use many local variables, if any.\n\nNo hidden state\n\nTraditional notebooks like Jupyter have hidden state: running a cell may change the values of global variables, but these changes are not propagated to the cells that use them. Worse, deleting a cell removes global variables from visible code but not from program memory, a common source of bugs. The problem of hidden state has been discussed by many others [1] [2].\n\nmarimo eliminates the problem of hidden state: running a cell automatically refreshes downstream outputs, and deleting a cell deletes its global variables from program memory.\n\nNo hidden state: deleting a cell deletes its variables.\n\nAvoid mutating variables\n\nmarimo‚Äôs reactive execution is based only on the global variables a cell reads and the global variables it defines. In particular, marimo does not track mutations to objects, i.e., mutations don‚Äôt trigger reactive re-runs of other cells. It also does not track the definition or mutation of object attributes. For this reason, avoid defining a variable in one cell and mutating it in another.\n\nIf you need to mutate a variable (such as adding a new column to a dataframe), you should perform the mutation in the same cell as the one that defines it, Or try creating a new variable instead.\n\nExamples\n\nCreate a new variable instead of mutating an existing one.\n\nDon‚Äôt do this:\n\nl = [1]\n\nl.append(2)\n\n\nInstead, do this:\n\nl = [1]\n\nextended_list = l + [2]\n\n\nMutate variables in the cells that define them.\n\nDon‚Äôt do this:\n\ndf = pd.DataFrame({\"my_column\": [1, 2]})\n\ndf[\"another_column\"] = [3, 4]\n\n\nInstead, do this:\n\ndf = pd.DataFrame({\"my_column\": [1, 2]})\ndf[\"another_column\"] = [3, 4]\n\n\nWhy not track mutations?\n\nTracking mutations reliably is a fundamentally impossible task in Python; marimo could never detect all mutations, and even if we could, reacting to mutations could result in surprising re-runs of notebook cells. The simplicity of marimo‚Äôs static analysis approach, based only on variable definitions and references, makes marimo easy to understand and encourages well-organized notebook code.\n\nRuntime configuration\n\nThrough the notebook settings menu, you can configure how and when marimo runs cells.\n\nOn cell change: disabling automatic execution\n\nYou can disable automatic execution of cells by configuring the runtime to be lazy: the lazy runtime only runs cells when you ask for them to be run, marking downstream cells as stale instead of running them.\n\nWhen your notebook has expensive cells or dangerous side-effects, choosing lazy execution can be key to having a good experience in marimo.\n\nOn startup: disabling autorun\n\nBy default, marimo notebooks run automatically on startup; just how the command\n\npython main.py\n\n\nexecutes a script,\n\nmarimo edit notebook.py\n\n\nexecutes the notebook. You can disable autorun on startup in the notebook settings.\n\nOn module change: autoreloading\n\nWhen module autoreloading is enabled, marimo tracks when Python modules used by your notebook are changed and reloads them so you can use the latest version of your code. This works recursively, meaning that marimo tracks modifications for modules imported by your notebook‚Äôs imported modules too.\n\nAutoreloading comes in two types:\n\n‚Äúlazy‚Äù: automatically marks cells affected by module modifications as stale, letting you know which cells need to be re-run.\n\n‚Äúautorun‚Äù: automatically re-runs cells affected by module modification.\n\nWhy autoreload? Autoreloading enables a workflow that many developers find productive: develop complex logic in Python modules, and use the marimo notebook as a DAG or main script that orchestrates your logic.\n\nDisabling cells\n\nSometimes, you may want to edit one part of a notebook without triggering automatic execution of its dependent cells. For example, the dependent cells may take a long time to execute, and you only want to iterate on the first part of a multi-cell computation.\n\nFor cases like this, marimo lets you disable cells: when a cell is disabled, it and its dependents are blocked from running.\n\nDisabling a cell blocks it from running.\n\nWhen you re-enable a cell, if any of the cell‚Äôs ancestors ran while it was disabled, marimo will automatically run it.\n\nEnable a cell through the context menu. Stale cells run automatically.\nNext\nInteractivity\nPrevious\nOverview\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nReferences and definitions\nGlobal variable names must be unique\nLocal variables\nNo hidden state\nAvoid mutating variables\nExamples\nRuntime configuration\nOn cell change: disabling automatic execution\nOn startup: disabling autorun\nOn module change: autoreloading\nDisabling cells"
  },
  {
    "title": "Overview - marimo",
    "url": "https://docs.marimo.io/guides/overview.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nOverview\nReactivity\nInteractivity\nSQL\nRun as an app\nRun as a script\nOutputs\nDataframes\nPlotting\nEditor features\nToggle navigation of Editor features\nTheming\nBest practices\nToggle navigation of Best practices\nComing from other tools\nToggle navigation of Coming from other tools\nIntegrating with marimo\nToggle navigation of Integrating with marimo\nReactive state\nOnline playground\nExporting\nConfiguration\nTroubleshooting\nDeploying\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nOverview\n\nmarimo notebooks are reactive: they automatically react to your code changes and UI interactions and keep your notebook up-to-date, not unlike a spreadsheet.\n\nCreating marimo notebooks\n\nMake sure to first read the getting started page, which teaches you how to install marimo and create notebooks.\n\nCells\n\nA marimo notebook is made of small blocks of Python code called cells. When you run a cell, marimo automatically runs all cells that read any global variables defined by that cell. This is reactive execution.\n\nReactive execution guarantees that your code and program state are consistent. It also gives notebooks a deterministic execution order, letting them double as both reproducible scripts and interactive apps.\n\nLazy evaluation\n\nIf you don‚Äôt want cells to run automatically, the runtime can be configured to be lazy, only running cells when you ask for them to be run and marking affected cells as stale. Learn more in the runtime configuration guide\n\nExecution order. The order of cells on the page has no bearing on the order cells are executed in: execution order is determined by the variables cells define and the variables they read.\n\nYou have full freedom over how to organize your code and tell your stories: move helper functions and other ‚Äúappendices‚Äù to the bottom of your notebook, or put cells with important outputs at the top.\n\nNo hidden state. marimo notebooks have no hidden state because the program state is automatically synchronized with your code changes and UI interactions. And if you delete a cell, marimo automatically deletes that cell‚Äôs variables, preventing painful bugs that arise in traditional notebooks.\n\nNo magical syntax. There‚Äôs no magical syntax or API required to opt-in to reactivity: cells are Python and only Python. Behind-the-scenes, marimo statically analyzes each cell‚Äôs code just once, creating a directed acyclic graph based on the global names each cell defines and reads. This is how data flows in a marimo notebook.\n\nMinimize variable mutation.\n\nmarimo‚Äôs understanding of your code is based on variable definitions and references; marimo does not track mutations to objects at runtime. For this reason, if you need to mutate a variable (such as adding a new column to a dataframe), you should perform the mutation in the same cell as the one that defines it.\n\nLearn more in our reactivity guide.\n\nFor more on reactive execution, open the dataflow tutorial:\n\nmarimo tutorial dataflow\n\n\nor read the reactivity guide.\n\nThe marimo library\n\nmarimo is both a notebook and a library. The marimo library lets you use markdown, interactive UI elements, layout elements, and more in your marimo notebooks.\n\nWe recommend starting each marimo notebook with a cell containing a single line of code,\n\nimport marimo as mo\n\nOutputs\n\nmarimo visualizes the last expression of each cell as its output. Outputs can be any Python value, including markdown and interactive elements created with the marimo library, e.g., mo.md(...), mo.ui.slider(...). You can even interpolate Python values into markdown and other marimo elements to build rich composite outputs.\n\nThanks to reactive execution, running a cell refreshes all the relevant outputs in your notebook.\n\nFor more on outputs, try these tutorials:\n\nmarimo tutorial markdown\nmarimo tutorial plots\nmarimo tutorial layout\n\nInteractive elements\n\nThe marimo library comes with many interactive stateful elements in marimo.ui, including simple ones like sliders, dropdowns, text fields, and file upload areas, as well as composite ones like forms, arrays, and dictionaries that can wrap other UI elements.\n\nUsing UI elements. To use a UI element, create it with marimo.ui and assign it to a global variable. When you interact with a UI element in your browser (e.g., sliding a slider), marimo sends the new value back to Python and reactively runs all cells that use the element, which you can access via its value attribute.\n\nThis combination of interactivity and reactivity is very powerful: use it to make your data tangible during exploration and to build all kinds of tools and apps.\n\nmarimo can only synchronize UI elements that are assigned to global variables. You can use composite elements like mo.ui.array and mo.ui.dictionary if the set of UI elements is not known until runtime.\n\nFor more on interactive elements, run the UI tutorial:\n\nmarimo tutorial ui\n\nComposite elements\n\nmarimo‚Äôs composite UI elements let you wrap other UI elements to create powerful UIs. For example, marimo.ui.form lets you gate elements on submission, while marimo.ui.dictionary and marimo.ui.array let you batch arbitrary collections of elements.\n\nLayout\n\nThe marimo library also comes with elements for laying out outputs, including mo.hstack, mo.vstack, mo.accordion, mo.ui.tabs, mo.sidebar, mo.nav_menu, mo.ui.table, and many more.\n\nSQL\n\nmarimo has built-in support for SQL: you can query Python dataframes, databases, CSVs, Google Sheets, or anything else. After executing your query, marimo returns the result to you as a dataframe, making it seamless to go back and forth between SQL and Python.\n\nQuery a dataframe using SQL!\n\nTo create a SQL cell, click on the SQL button that appears at the bottom of the cell array, or right click the create cell button next to a cell.\n\nTo learn more, run the SQL tutorial:\n\nmarimo tutorial sql\n\n\nor read the SQL guide.\n\nNext\nReactivity\nPrevious\nGuides\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nCells\nThe marimo library\nOutputs\nInteractive elements\nComposite elements\nLayout\nSQL"
  },
  {
    "title": "Guides - marimo",
    "url": "https://docs.marimo.io/guides/index.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nOverview\nReactivity\nInteractivity\nSQL\nRun as an app\nRun as a script\nOutputs\nDataframes\nPlotting\nEditor features\nToggle navigation of Editor features\nTheming\nBest practices\nToggle navigation of Best practices\nComing from other tools\nToggle navigation of Coming from other tools\nIntegrating with marimo\nToggle navigation of Integrating with marimo\nReactive state\nOnline playground\nExporting\nConfiguration\nTroubleshooting\nDeploying\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nGuides\n\nThese guides cover marimo‚Äôs core concepts.\n\nGuide\n\n\t\n\nDescription\n\n\n\n\nOverview\n\n\t\n\nAn overview of basic concepts\n\n\n\n\nReactivity\n\n\t\n\nHow reactive execution works\n\n\n\n\nInteractivity\n\n\t\n\nUsing interactive UI elements\n\n\n\n\nSQL\n\n\t\n\nUse SQL to query dataframes, databases, CSVs, etc.\n\n\n\n\nRun as an app\n\n\t\n\nRunning notebooks as apps\n\n\n\n\nRun as a script\n\n\t\n\nRunning notebooks as scripts\n\n\n\n\nOutputs\n\n\t\n\nMarkdown, plots, and other visual outputs\n\n\n\n\nDataframes\n\n\t\n\nWorking with dataframes\n\n\n\n\nPlotting\n\n\t\n\nInteractive and reactive plots\n\n\n\n\nEditor features\n\n\t\n\nView variables, cell dependencies, errors, and more\n\n\n\n\nTheming\n\n\t\n\nTheming notebooks\n\n\n\n\nBest practices\n\n\t\n\nNotebook best practices\n\n\n\n\nComing from Jupyter\n\n\t\n\nmarimo for Jupyter users\n\n\n\n\nComing from other tools\n\n\t\n\nTransitioning from other tools\n\n\n\n\nIntegrating with marimo\n\n\t\n\nRich displays of objects, custom UI plugins\n\n\n\n\nReactive state\n\n\t\n\nMutable, reactive state\n\n\n\n\nOnline playground\n\n\t\n\nCreate notebooks in our online playground!\n\n\n\n\nExporting\n\n\t\n\nExporting notebooks to HTML and flat scripts\n\n\n\n\nConfiguration\n\n\t\n\nUser and app configuration\n\n\n\n\nDeploying\n\n\t\n\nDeploying marimo notebooks and apps\n\nLearn by doing!\n\nPrefer a hands-on learning experience? marimo comes packaged with interactive tutorials that you can launch with marimo tutorial at the command line.\n\nNext\nOverview\nPrevious\nGetting Started\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo"
  },
  {
    "title": "Getting Started - marimo",
    "url": "https://docs.marimo.io/getting_started/index.html",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\nGetting Started\n\nInstalling marimo gets you the marimo command-line interface (CLI), the entry point to all things marimo.\n\nInstallation\n\nBefore installing marimo, we recommend creating and activating a Python virtual environment.\n\nSetting up a virtual environment\n\nTo install marimo, run the following in a terminal:\n\ninstall with pip\npip install marimo\n\ninstall with uv\ninstall with conda\n\nTo check if the install worked, run\n\nmarimo tutorial intro\n\n\nA tutorial notebook should open in your browser.\n\nInstallation issues?\n\nHaving installation issues? Reach out to us at GitHub or on Discord.\n\nTutorials\n\nmarimo tutorial intro opens the intro tutorial. List all tutorials with\n\nmarimo tutorial --help\n\nNotebooks\n\nCreate and edit notebooks with marimo edit.\n\nlaunch the notebook server to create new notebooks, and start or stop existing ones:\n\nmarimo edit\n\n\ncreate or edit a single notebook with\n\nmarimo edit your_notebook.py\n\n\n(If your_notebook.py doesn‚Äôt exist, marimo will create a blank notebook named your_notebook.py.)\n\nApps\n\nUse marimo run to serve your notebook as an app, with Python code hidden and uneditable.\n\nmarimo run your_notebook.py\n\nConvert Jupyter notebooks\n\nAutomatically translate Jupyter notebooks to marimo notebooks with marimo convert:\n\nmarimo convert your_notebook.ipynb > your_notebook.py\n\n\nBecause marimo is different from traditional notebooks, your converted notebook will likely have errors that you‚Äôll need to fix. marimo will guide you through fixing them when you open it with marimo edit.\n\nGitHub Copilot\n\nThe marimo editor natively supports GitHub Copilot, an AI pair programmer, similar to VS Code.\n\nGet started with Copilot:\n\nInstall Node.js.\n\nEnable Copilot via the settings menu in the marimo editor.\n\nNote: Copilot is not yet available in our conda distribution; please install marimo using pip if you need Copilot.\n\nVS Code extension\n\nIf you prefer VS Code over terminal, try our VS Code extension. Use this extension to edit and run notebooks directly from VS Code, and to list all marimo notebooks in your current directory.\n\nNext\nGuides\nPrevious\nHome\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo\nON THIS PAGE\nInstallation\nTutorials\nNotebooks\nApps\nConvert Jupyter notebooks\nGitHub Copilot\nVS Code extension"
  },
  {
    "title": "marimo",
    "url": "https://docs.marimo.io/",
    "html": "Hide navigation sidebar\nHide table of contents sidebar\nSkip to content\nGetting Started\nGuides\nToggle navigation of Guides\nRecipes\nAPI Reference\nToggle navigation of API Reference\nFAQ\nExamples\nIntegrations\nToggle navigation of Integrations\nCommunity\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nView this page\nEdit this page\nToggle Light / Dark / Auto color theme\n\nmarimo is a reactive notebook for Python that models notebooks as dataflow graphs. Run a cell or interact with a UI element, and marimo automatically runs affected cells (or marks them as stale), keeping code and outputs consistent and preventing bugs before they happen. Every marimo notebook is stored as pure Python, executable as a script, and deployable as an app.\n\nBuilt from the ground up\n\nmarimo was built from the ground up to solve well-known problems associated with traditional notebooks.\n\ninstall with pip\npip install marimo && marimo tutorial intro\n\ninstall with uv\ninstall with conda\n\nDeveloper experience is core to marimo, with an emphasis on reproducibility, maintainability, composability, and shareability.\n\nHighlights.\n\nüöÄ batteries-included: replaces jupyter, streamlit, jupytext, ipywidgets, papermill, & more\n\n‚ö°Ô∏è reactive: run a cell, and marimo reactively runs all dependent cells or marks them as stale\n\nüñêÔ∏è interactive: bind sliders, tables, plots, and more to Python ‚Äî no callbacks required\n\nüî¨ reproducible: no hidden state, deterministic execution, built-in package management\n\nüèÉ executable: execute as a Python script, parametrized by CLI args\n\nüõú shareable: deploy as an interactive web app or slides, run in the browser via WASM\n\nüõ¢Ô∏è designed for data: query dataframes and databases with SQL, filter and search dataframes\n\nüêç git-friendly: notebooks are stored as .py files\n\n‚å®Ô∏è a modern editor: GitHub Copilot, AI assistants, vim keybindings, variable explorer, and more\n\n‚ö° marimo notebooks run automatically with interactions and code changes\n\n‚ú® express yourself with markdown, LaTeX, tables, accordions, tabs, grids, and more\n\nüî¨ do reproducible science in an environment that makes your data tangible\n\nüöÄ deploy as interactive web apps\n\nContents\nGetting Started\nInstallation\nTutorials\nNotebooks\nApps\nConvert Jupyter notebooks\nGitHub Copilot\nVS Code extension\nGuides\nRecipes\nControl Flow\nGrouping UI elements together\nWorking with buttons\nCaching\nAPI Reference\nFAQ\nChoosing marimo\nUsing marimo\nExamples\nIntegrations\nCommunity\nShields\n\nLINKS\n\nGitHub\nDiscord\nNewsletter\nTwitter\nMarimo Cloud Waitlist\nBlog\nIndex\n\nIndex\n\nNext\nGetting Started\nCopyright ¬© 2024, marimo-team\nMade with Sphinx and @pradyunsg's Furo"
  }
]
